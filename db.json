{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/README","path":"README","modified":1,"renderable":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"dcbef7d3a1941d5eb68bf68f807ce29536a48457","modified":1488973691000},{"_id":"source/CNAME","hash":"2af327838a8771fc485629cb3909f14e183739ee","modified":1489156590000},{"_id":"source/favicon.ico","hash":"525ce7a03dbb5cb71217b38701595aaddcaf8f91","modified":1444878035000},{"_id":"source/README","hash":"ba196a296ecfffd1ccabafb4a5075a3c422b30f5","modified":1489158027000},{"_id":"themes/landscape/.DS_Store","hash":"c1458e22511ad648fb461eacfa54c74e5444beed","modified":1489159710000},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1488894199000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1488894199000},{"_id":"themes/landscape/_config.yml","hash":"73dce7f0c4ff287b3da2f8ade5f4419e3a7ea2bc","modified":1488973671000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1488894199000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1488894199000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1488894199000},{"_id":"source/_posts/2048游戏c语言算法实现.md","hash":"7a895158cf8eefd132ea191c55326ac7f7c2cdc6","modified":1503761924000},{"_id":"source/_posts/MYSQL存储引擎.md","hash":"f637eb49e513367a95b69a518e4057d75f64c4bf","modified":1503761924000},{"_id":"source/_posts/Sublime-JsFormat插件安装及使用.md","hash":"349acccdb706857a5bfec9b10cb288d7284e3647","modified":1503761924000},{"_id":"source/_posts/PHP实现多线程抓取网页.md","hash":"397c5ce2f1bb518226135a00cc181136e064fd55","modified":1503761924000},{"_id":"source/_posts/Sublime下XDebug安装及使用.md","hash":"9c181656744e873c87faeb11666976d9394d3169","modified":1503761924000},{"_id":"source/_posts/TargetInvocationException异常.md","hash":"f2082cd90e1f7036a55bc767bd1fddbae0ed1b66","modified":1488986387000},{"_id":"source/_posts/Sublime函数跳转插件Ctags安装及使用.md","hash":"c3fb97f2ad9dc390680a5ff6ec1a38a6ef42e1b1","modified":1503761924000},{"_id":"source/_posts/ajax同步和异步问题.md","hash":"9e0401332e246a0698e26d82bcd3d8690c7779ae","modified":1503761924000},{"_id":"source/_posts/algorithm-greedy.md","hash":"48aa440fe22525bff5244d967ccb3e8d2b560828","modified":1503761924000},{"_id":"source/_posts/centos搭建reviewboard.md","hash":"c5121dcfe41ebf56b6f8730c795a0dcac3576d8c","modified":1503761924000},{"_id":"source/_posts/laravel-eloquent-query-use-index.md","hash":"298b1b4d6f63009ce217bc2539c472db8c273f94","modified":1496238431000},{"_id":"source/_posts/hexo-command.md","hash":"120ebfb983d47cef511c15de1e1a17e420a73934","modified":1503761924000},{"_id":"source/_posts/laravel-npm-gulp-composer-bower.md","hash":"d91e91d387fac0dcd2f4278ab2edd76785fa3b36","modified":1503761924000},{"_id":"source/_posts/lnmp环境及navicat配置安装.md","hash":"882511c08c4e4102104fcf66a6df683d62a09f58","modified":1503761924000},{"_id":"source/_posts/laravel-start-kit.mdown","hash":"700530e4db2193675997c02e09c2d777b4b94594","modified":1490541152000},{"_id":"source/_posts/linux下使用g-编译，gdb调试c-程序.md","hash":"cc15845f610410c2bfa1c21581f56f67f3ed0fc5","modified":1503761924000},{"_id":"source/_posts/mac-tool.md","hash":"87c9b3cd62fa9ce66c2a9e9e93b39a1a493e7bea","modified":1503761924000},{"_id":"source/_posts/migrate-jekyll-to-hexo.md","hash":"961a74542c4efca8db36552c7ade323aba84c22e","modified":1489194401000},{"_id":"source/_posts/mongodb安装及使用-二.md","hash":"1be4ccae391c2688b9ef7d34e547709171993b3a","modified":1503761924000},{"_id":"source/_posts/mysql-optimization.md","hash":"373ee76a39a31dce3839b4ee840fdd5c3489e1cc","modified":1496670017000},{"_id":"source/_posts/mysql-sort.md","hash":"d9053b3cd17dde7ba8a7d41c0571ef22929b3789","modified":1503761924000},{"_id":"source/_posts/mongodb安装及使用.md","hash":"d9d7d670707b5d3d0f7b289c8c676e04c5d13287","modified":1503761924000},{"_id":"source/_posts/mysql开启慢查询日志.md","hash":"4ca103adcc5fcd7b5c31498c998413f3d37cff8b","modified":1503761924000},{"_id":"source/_posts/php-array-merge.md","hash":"e66d2ea250b9ec001b103822732932b1d9b5ed29","modified":1503761924000},{"_id":"source/_posts/mysql主从复制配置.md","hash":"78dc8c55b4d431ad8f20e9b4650d2800da83c857","modified":1503761924000},{"_id":"source/_posts/person-share.md","hash":"8c778b522657528f811771ba9bd5e8668d5f48d9","modified":1503761924000},{"_id":"source/_posts/php-details.md","hash":"589549462e9add2bc86000158f98939612c6dd18","modified":1503761924000},{"_id":"source/_posts/php-emoji.md","hash":"1f86a2264af666f09e37a0dac2f2452421674146","modified":1488975352000},{"_id":"source/_posts/php-fpm-502.md","hash":"17a27c1ad1f328b33de62256249015a35423b9a7","modified":1488975569000},{"_id":"source/_posts/php-like-query.md","hash":"30e9fd15cc3aa0a0f3fba4492e5667d1da855677","modified":1488976131000},{"_id":"source/_posts/php多线程.md","hash":"72783b398f42172b057922611fe2faebdfbf111d","modified":1489194008000},{"_id":"source/_posts/php-parse-soap-xml-response.md","hash":"aac1ffd01cc8e88110d08c648d1f6974fc4f550b","modified":1503761924000},{"_id":"source/_posts/redis-read-error-on-connection.md","hash":"221f04356ab9e06a54f10b0dfdb68ef10932371f","modified":1503761924000},{"_id":"source/_posts/solve-node-sass-install-failed.md","hash":"84d5c52ac4946e758fdb74c7ce716dfb431e24eb","modified":1503761924000},{"_id":"source/_posts/php-shell实现多线程demo.md","hash":"92c82c5a179c923efc0551d0c752a7abc8606305","modified":1503761924000},{"_id":"source/_posts/start-hexo.md","hash":"2c893952472eb490057eb0143502a10635097a54","modified":1488902394000},{"_id":"source/_posts/sublime-hotkeys.md","hash":"c9cfc5f21a26a28a67fdd6f873b35836d9cb0418","modified":1503761924000},{"_id":"source/_posts/thinkphp-hollow.md","hash":"5bc8934742ae998571280899ae7e1f41e6c2367d","modified":1503761924000},{"_id":"source/_posts/vim快捷键.md","hash":"99e31afb4fbc8fd15cb6460929603849920f7c88","modified":1503761924000},{"_id":"source/_posts/使用SVN部署网站到新浪SAE.md","hash":"7753e3a1367c8020efa01b9b50c767ce4152bbe9","modified":1503761924000},{"_id":"source/_posts/五子棋c语言算法实现.md","hash":"bfc1d995065d86a2c6dd3d16a026371464c58afd","modified":1503761924000},{"_id":"source/_posts/内部排序算法分析.md","hash":"3d27afdc85a42ce1cbf4684b06be6f71fb3839e3","modified":1503761924000},{"_id":"source/_posts/动态规划算法.md","hash":"3aaed37aea1648fc5cb8667299013ba52c05b6ad","modified":1503761924000},{"_id":"source/_posts/图的遍历算法———BFS和DFS算法.md","hash":"b139ffd36f3e9060637705754a34592cf62469f4","modified":1503761924000},{"_id":"source/_posts/图论之最短路算法.md","hash":"6234116e27a72f20cf54a1e6eb7f7988006d9017","modified":1503761924000},{"_id":"source/_posts/学习新技术.md","hash":"6755818c8fc1d11f93c987f633439197322ad05e","modified":1503761924000},{"_id":"source/_posts/快速找到段错误的core方法.md","hash":"0ef84a84fe679faf97deca98524ab858ee2c59c5","modified":1503761924000},{"_id":"source/_posts/快速排序代码总结.md","hash":"ac265acfd1a6dbee192ae6abdce94f41bd73cdf8","modified":1503761924000},{"_id":"source/_posts/我们眼中的计算机学院毕业生——男会修电脑，女会上淘宝？.md","hash":"25842114deabcf1cd9d929d52a42795d9ce95eb7","modified":1503761924000},{"_id":"source/_posts/我的数模之路.md","hash":"29e6db9e661aba7341ea9b1f94c668c52f36ae7f","modified":1503761924000},{"_id":"source/_posts/搭建git服务器.md","hash":"057afdeb50f7044e6f6da66dff07a16585381aec","modified":1503761924000},{"_id":"source/_posts/最小生成树.md","hash":"ecd9cc9cab2d549616e0fa6111fb2d1c4feb9bd2","modified":1503761924000},{"_id":"source/_posts/砸向自己的巨人坑.md","hash":"1bf8cf954d564d7d32d6c5819ccbb9bc8e4c6710","modified":1503761924000},{"_id":"source/_posts/砸向自己的巨人坑（二）.md","hash":"ff407fc71e8f3888c648f543c39c3a9b2ce8a9f6","modified":1503761924000},{"_id":"source/_posts/计算机内存分配方式.md","hash":"c7b41f3953a96b926dfe16e9533858976e280cdb","modified":1503761924000},{"_id":"source/_posts/话题社区项目总结.md","hash":"97096f9b91d285e5b496ab0d854e42acdc0a0b96","modified":1503761924000},{"_id":"source/_posts/轻松实现多台服务器数据库备份.md","hash":"eb96d7fc15ee9b125f8b4d364bde7b71b5319129","modified":1503761924000},{"_id":"source/_posts/贪心算法.md","hash":"c0647ee990b18237a59667a8ae8449ea67839b10","modified":1503761924000},{"_id":"source/_posts/高精度算法.md","hash":"7733cb1276bfd02cca8334a7487618b4bdeae111","modified":1503761924000},{"_id":"source/about/index.md","hash":"3cb2901b7997e66978d5657facb9f73ea83b3a42","modified":1488902730000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1488894199000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1488894199000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1488894199000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1488973696000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1488894199000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1488894199000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1488894199000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1488894199000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1488894199000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1488894199000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1488894199000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1488894199000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1488894199000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1488894199000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1488894199000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1488894199000},{"_id":"themes/landscape/scripts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1489159814000},{"_id":"themes/landscape/source/.DS_Store","hash":"016c5e6dc1ae48191a8ffdf81df5bb24166c7125","modified":1489159723000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1503761924000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1488894199000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1503761924000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"133e825b57ffb6ed1c5aa9602c7feacd38705539","modified":1488973109000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1488894199000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"aa7b8e27f7b19b8e90ddc6b3c37cfd6a00659dbe","modified":1488894612000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1488894199000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1488894199000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1488894199000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1488894199000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1488894199000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1488894199000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1488894199000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1488894199000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1488894199000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1488894199000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1488894199000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488894199000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1488894199000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488894199000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488894199000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488894199000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488894199000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488894199000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1488894199000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1488894199000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1488894199000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1503761924000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1488894199000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1488894199000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1488894199000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1488894199000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1488894199000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1488894199000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1488894199000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1488894199000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1488894199000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1488894199000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1488894199000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1488894199000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1488894199000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1488894199000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1488894199000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1488894199000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1488894199000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1488894199000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1488894199000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1488894199000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1488894199000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488894199000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1488894199000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488894199000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1488894199000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488894199000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1488894199000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1488894199000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1488894199000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1488894199000}],"Category":[{"name":"algorithm","_id":"cj6u9wwrg000b2o5puuhkctdk"},{"name":"技术","_id":"cj6u9wwrs000g2o5piokg2fi6"}],"Data":[],"Page":[{"title":"About","date":"2017-03-07T14:36:36.000Z","_content":"\n- 92年，现于北京工作\n- 大隐隐于世，小隐隐于野\n- <strong>Email：</strong><a href=\"mailto:caijinlin2012@gmail.com\">caijinlin2012@gmail.com</a>\n- <strong>Weibo：</strong><a href=\"http://weibo.com/sclgcaijinlin\">http://weibo.com/sclgcaijinlin</a>\n- <strong>Github：</strong><a href=\"https://github.com/caijinlin\">https://github.com/caijinlin</a>\n- <strong>Twitter：</strong><a href=\"https://twitter.com/caijinlin\">https://twitter.com/caijinlin</a>\n    ","source":"about/index.md","raw":"---\ntitle: About\ndate: 2017-03-07 22:36:36\n---\n\n- 92年，现于北京工作\n- 大隐隐于世，小隐隐于野\n- <strong>Email：</strong><a href=\"mailto:caijinlin2012@gmail.com\">caijinlin2012@gmail.com</a>\n- <strong>Weibo：</strong><a href=\"http://weibo.com/sclgcaijinlin\">http://weibo.com/sclgcaijinlin</a>\n- <strong>Github：</strong><a href=\"https://github.com/caijinlin\">https://github.com/caijinlin</a>\n- <strong>Twitter：</strong><a href=\"https://twitter.com/caijinlin\">https://twitter.com/caijinlin</a>\n    ","updated":"2017-03-07T16:05:30.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj6u9wwqu00012o5pyrb3w3zo","content":"<ul>\n<li>92年，现于北京工作</li>\n<li>大隐隐于世，小隐隐于野</li>\n<li><strong>Email：</strong><a href=\"mailto:caijinlin2012@gmail.com\" target=\"_blank\" rel=\"external\">caijinlin2012@gmail.com</a></li>\n<li><strong>Weibo：</strong><a href=\"http://weibo.com/sclgcaijinlin\" target=\"_blank\" rel=\"external\">http://weibo.com/sclgcaijinlin</a></li>\n<li><strong>Github：</strong><a href=\"https://github.com/caijinlin\" target=\"_blank\" rel=\"external\">https://github.com/caijinlin</a></li>\n<li><strong>Twitter：</strong><a href=\"https://twitter.com/caijinlin\" target=\"_blank\" rel=\"external\">https://twitter.com/caijinlin</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>92年，现于北京工作</li>\n<li>大隐隐于世，小隐隐于野</li>\n<li><strong>Email：</strong><a href=\"mailto:caijinlin2012@gmail.com\" target=\"_blank\" rel=\"external\">caijinlin2012@gmail.com</a></li>\n<li><strong>Weibo：</strong><a href=\"http://weibo.com/sclgcaijinlin\" target=\"_blank\" rel=\"external\">http://weibo.com/sclgcaijinlin</a></li>\n<li><strong>Github：</strong><a href=\"https://github.com/caijinlin\" target=\"_blank\" rel=\"external\">https://github.com/caijinlin</a></li>\n<li><strong>Twitter：</strong><a href=\"https://twitter.com/caijinlin\" target=\"_blank\" rel=\"external\">https://twitter.com/caijinlin</a></li>\n</ul>\n"}],"Post":[{"title":"2048游戏c语言算法实现","date":"2014-08-13T00:00:00.000Z","_content":"\n### 2048游戏\n\n玩儿过这款游戏后，小编才知道什么叫“根本停不下来”。在4X4的棋盘上，每次会增加一个数字，你可以选择四个方向，然后数字会按方向移动，遇到相同的数字就会合并，游戏的目的就是合并出2048这个数字，最终看你获得了多少总分。2048也就是2的11次方，即合并11次。原本1024就已经不容易了，升级到2048，一旦停下来就还真的不好完成了！像小编这种数学是体育老师教的，看着这款好玩到爆的游戏只能一声长叹，两行清泪划过脸颊。\n\n<!-- more -->\n\n判断输赢：表格填满数字且无法通过移动来合并数字时，游戏退出\n\n源代码实现c算法版：\n    \t\n    /*\n        2048游戏\n    */\n    #include <stdio.h>\n    #include <memory.h>\n    #include <stdlib.h>\n    #include <time.h>\n    #define MAX 4\n    int row=0,col=0;//元素下标\n    int loop=0;//排数\n    int i = 0, j = 0;//下标\n    int map[MAX][MAX] = {0};\n\n    /*初始化数组*/\n    void init()\n    {\n        memset(map,0,sizeof(map));\n    }\n\n    /*在某一个空的位置创建随机数*/\n    void CreateRandNumber()\n    {\n        int flag =0,pos=0;\n        srand(time(0));\n        int x =0 ,y = 0;\n        int r[MAX*MAX];\n        int c[MAX*MAX];\n        int k = 0;\n        /*判断哪些位置可空*/\n        for(row=0;row<MAX;row++)\n        {\n            for(col=0;col<MAX;col++)\n            {\n                if(map[row][col]==0)\n                {\n                    r[k]=row;\n                    c[k]=col;\n                    k++;\n\n                }\n            }\n        }\n        if(k==0)\n        {\n            printf(\"游戏结束\\n\");\n            exit(0);\n        }\n        printf(\"\\n\");\n        pos = rand()%k;\n        x = r[pos];\n        y = c[pos];\n        map[x][y] = (rand()%2+1)*2;\n        printf(\"产生随机数map[%d][%d]=%d\\n\",x,y,map[x][y]);\n        /*从空的位置中产生一个随机数2或者4*/\n    }\n\n    /*显示游戏盘*/\n    void show_map()\n    {\n        CreateRandNumber();\n        for(row=0;row<4;row++)\n        {\n            for(loop=0;loop<4;loop++)\n            {\n                printf(\"----+\");\n            }\n            printf(\"\\n\");\n            for(col=0;col<4;col++)\n            {\n                if(map[row][col]==0)\n                {\n                    printf(\"    |\");\n                }\n                else\n                {\n                     printf(\"%-4d|\",map[row][col]);\n                }\n            }\n            printf(\"\\n\");\n        }\n        for(loop=0;loop<4;loop++)\n        {\n            printf(\"----+\");\n        }\n        printf(\"\\n\");\n    }\n    /*向左移动*/\n    void toward_left()\n    {\n        printf(\"正在向左移动\\n\");\n        for(loop=0;loop<4;loop++)\n        {\n            //移动数字\n            for(i=1;i<=3;i++)\n            {\n                for(j=i;j>0;j--)\n                {\n                    if(map[loop][j-1]==0)\n                    {\n                        map[loop][j-1]=map[loop][j];\n                        map[loop][j]=0;\n                    }\n                }\n            }\n            //合并相同数字\n            for(i=1;i<=3;i++)\n            {\n                if((map[loop][i]==map[loop][i-1]) && (map[loop][i-1]!=0))\n                {\n                    map[loop][i-1]=2*map[loop][i-1];\n                    map[loop][i]=0;\n                }\n            }\n        }\n    }\n    /*向上移动*/\n    void toward_up()\n    {\n        printf(\"正在向上移动\\n\");\n        for(loop=0;loop<4;loop++)\n        {\n            //移动数字\n            for(i=1;i<=3;i++)\n            {\n                for(j=i;j>0;j--)\n                {\n                    if(map[j-1][loop]==0)\n                    {\n                        map[j-1][loop]=map[j][loop];\n                        map[j][loop]=0;\n                    }\n                }\n            }\n            //合并相同数字\n            for(i=1;i<=3;i++)\n            {\n                if((map[i-1][loop]==map[i][loop]) && (map[i-1][loop]!=0))\n                {\n                    map[i-1][loop]*=2;\n                    map[i][loop]=0;\n                }\n            }\n        }\n\n    }\n    /*向下移动*/\n    void toward_down()\n    {\n        printf(\"正在向下移动\\n\");\n        for(loop=0;loop<4;loop++)\n        {\n            //移动数字\n            for(i=3;i>0;i--)\n            {\n                for(j=i;j<=3;j++)\n                {\n                    if(map[j][loop]==0)\n                    {\n                        map[j][loop]=map[j-1][loop];\n                        map[j-1][loop]=0;\n                    }\n                }\n            }\n            //合并相同数字\n            for(i=3;i>0;i--)\n            {\n                if((map[i][loop]==map[i-1][loop]) && (map[i][loop]!=0))\n                {\n                    map[i][loop]*=2;\n                    map[i-1][loop]=0;\n                }\n            }\n        }\n\n    }\n    /*向右移动*/\n    void toward_right()\n    {\n        printf(\"正在向右移动\\n\");\n        for(loop=0;loop<4;loop++)//四排\n        {\n            //移动数字\n            i = 2;\n            while(i>=0)\n            {\n                for(j=i;j<3;j++)\n                {\n                    if(map[loop][j+1]==0)\n                    {\n                        map[loop][j+1]=map[loop][j];\n                        map[loop][j]=0;\n                    }\n                }\n                i--;\n            }\n            //合并相同数字\n            for(i=2;i>=0;i--)\n            {\n                if((map[loop][i+1]==map[loop][i]) && (map[loop][i+1]!=0))\n                {\n                    map[loop][i+1]=2*map[loop][i+1];\n                    map[loop][i]=0;\n                }\n            }\n        }\n\n    }\n    /*开始游戏*/\n    void play()\n    {\n        show_map();\n        char direction = ' ';\n        while(1)\n        {\n            printf(\"h代表向左，j代表向向上，k代表向下，l代表向右:\\n\");\n            printf(\"输入方向：\");\n            scanf(\"%c\",&direction);\n            scanf(\"%*[^\\n]\");\n            scanf(\"%*c\");\n            switch(direction)\n            {\n                case 'h':toward_left(); show_map();break;\n                case 'j':toward_up(); show_map();break;\n                case 'k':toward_down(); show_map();break;\n                case 'l':toward_right(); show_map();break;\n                default:break;\n            }\n        }\n    }\n    int main()\n    {\n        init();\n        play();\n        return 0;\n    }\n\n","source":"_posts/2048游戏c语言算法实现.md","raw":"---\ntitle: 2048游戏c语言算法实现\ntags: []\ndate: 2014-08-13 08:00:00\n---\n\n### 2048游戏\n\n玩儿过这款游戏后，小编才知道什么叫“根本停不下来”。在4X4的棋盘上，每次会增加一个数字，你可以选择四个方向，然后数字会按方向移动，遇到相同的数字就会合并，游戏的目的就是合并出2048这个数字，最终看你获得了多少总分。2048也就是2的11次方，即合并11次。原本1024就已经不容易了，升级到2048，一旦停下来就还真的不好完成了！像小编这种数学是体育老师教的，看着这款好玩到爆的游戏只能一声长叹，两行清泪划过脸颊。\n\n<!-- more -->\n\n判断输赢：表格填满数字且无法通过移动来合并数字时，游戏退出\n\n源代码实现c算法版：\n    \t\n    /*\n        2048游戏\n    */\n    #include <stdio.h>\n    #include <memory.h>\n    #include <stdlib.h>\n    #include <time.h>\n    #define MAX 4\n    int row=0,col=0;//元素下标\n    int loop=0;//排数\n    int i = 0, j = 0;//下标\n    int map[MAX][MAX] = {0};\n\n    /*初始化数组*/\n    void init()\n    {\n        memset(map,0,sizeof(map));\n    }\n\n    /*在某一个空的位置创建随机数*/\n    void CreateRandNumber()\n    {\n        int flag =0,pos=0;\n        srand(time(0));\n        int x =0 ,y = 0;\n        int r[MAX*MAX];\n        int c[MAX*MAX];\n        int k = 0;\n        /*判断哪些位置可空*/\n        for(row=0;row<MAX;row++)\n        {\n            for(col=0;col<MAX;col++)\n            {\n                if(map[row][col]==0)\n                {\n                    r[k]=row;\n                    c[k]=col;\n                    k++;\n\n                }\n            }\n        }\n        if(k==0)\n        {\n            printf(\"游戏结束\\n\");\n            exit(0);\n        }\n        printf(\"\\n\");\n        pos = rand()%k;\n        x = r[pos];\n        y = c[pos];\n        map[x][y] = (rand()%2+1)*2;\n        printf(\"产生随机数map[%d][%d]=%d\\n\",x,y,map[x][y]);\n        /*从空的位置中产生一个随机数2或者4*/\n    }\n\n    /*显示游戏盘*/\n    void show_map()\n    {\n        CreateRandNumber();\n        for(row=0;row<4;row++)\n        {\n            for(loop=0;loop<4;loop++)\n            {\n                printf(\"----+\");\n            }\n            printf(\"\\n\");\n            for(col=0;col<4;col++)\n            {\n                if(map[row][col]==0)\n                {\n                    printf(\"    |\");\n                }\n                else\n                {\n                     printf(\"%-4d|\",map[row][col]);\n                }\n            }\n            printf(\"\\n\");\n        }\n        for(loop=0;loop<4;loop++)\n        {\n            printf(\"----+\");\n        }\n        printf(\"\\n\");\n    }\n    /*向左移动*/\n    void toward_left()\n    {\n        printf(\"正在向左移动\\n\");\n        for(loop=0;loop<4;loop++)\n        {\n            //移动数字\n            for(i=1;i<=3;i++)\n            {\n                for(j=i;j>0;j--)\n                {\n                    if(map[loop][j-1]==0)\n                    {\n                        map[loop][j-1]=map[loop][j];\n                        map[loop][j]=0;\n                    }\n                }\n            }\n            //合并相同数字\n            for(i=1;i<=3;i++)\n            {\n                if((map[loop][i]==map[loop][i-1]) && (map[loop][i-1]!=0))\n                {\n                    map[loop][i-1]=2*map[loop][i-1];\n                    map[loop][i]=0;\n                }\n            }\n        }\n    }\n    /*向上移动*/\n    void toward_up()\n    {\n        printf(\"正在向上移动\\n\");\n        for(loop=0;loop<4;loop++)\n        {\n            //移动数字\n            for(i=1;i<=3;i++)\n            {\n                for(j=i;j>0;j--)\n                {\n                    if(map[j-1][loop]==0)\n                    {\n                        map[j-1][loop]=map[j][loop];\n                        map[j][loop]=0;\n                    }\n                }\n            }\n            //合并相同数字\n            for(i=1;i<=3;i++)\n            {\n                if((map[i-1][loop]==map[i][loop]) && (map[i-1][loop]!=0))\n                {\n                    map[i-1][loop]*=2;\n                    map[i][loop]=0;\n                }\n            }\n        }\n\n    }\n    /*向下移动*/\n    void toward_down()\n    {\n        printf(\"正在向下移动\\n\");\n        for(loop=0;loop<4;loop++)\n        {\n            //移动数字\n            for(i=3;i>0;i--)\n            {\n                for(j=i;j<=3;j++)\n                {\n                    if(map[j][loop]==0)\n                    {\n                        map[j][loop]=map[j-1][loop];\n                        map[j-1][loop]=0;\n                    }\n                }\n            }\n            //合并相同数字\n            for(i=3;i>0;i--)\n            {\n                if((map[i][loop]==map[i-1][loop]) && (map[i][loop]!=0))\n                {\n                    map[i][loop]*=2;\n                    map[i-1][loop]=0;\n                }\n            }\n        }\n\n    }\n    /*向右移动*/\n    void toward_right()\n    {\n        printf(\"正在向右移动\\n\");\n        for(loop=0;loop<4;loop++)//四排\n        {\n            //移动数字\n            i = 2;\n            while(i>=0)\n            {\n                for(j=i;j<3;j++)\n                {\n                    if(map[loop][j+1]==0)\n                    {\n                        map[loop][j+1]=map[loop][j];\n                        map[loop][j]=0;\n                    }\n                }\n                i--;\n            }\n            //合并相同数字\n            for(i=2;i>=0;i--)\n            {\n                if((map[loop][i+1]==map[loop][i]) && (map[loop][i+1]!=0))\n                {\n                    map[loop][i+1]=2*map[loop][i+1];\n                    map[loop][i]=0;\n                }\n            }\n        }\n\n    }\n    /*开始游戏*/\n    void play()\n    {\n        show_map();\n        char direction = ' ';\n        while(1)\n        {\n            printf(\"h代表向左，j代表向向上，k代表向下，l代表向右:\\n\");\n            printf(\"输入方向：\");\n            scanf(\"%c\",&direction);\n            scanf(\"%*[^\\n]\");\n            scanf(\"%*c\");\n            switch(direction)\n            {\n                case 'h':toward_left(); show_map();break;\n                case 'j':toward_up(); show_map();break;\n                case 'k':toward_down(); show_map();break;\n                case 'l':toward_right(); show_map();break;\n                default:break;\n            }\n        }\n    }\n    int main()\n    {\n        init();\n        play();\n        return 0;\n    }\n\n","slug":"2048游戏c语言算法实现","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwqp00002o5pu9d86rk1","content":"<h3 id=\"2048游戏\"><a href=\"#2048游戏\" class=\"headerlink\" title=\"2048游戏\"></a>2048游戏</h3><p>玩儿过这款游戏后，小编才知道什么叫“根本停不下来”。在4X4的棋盘上，每次会增加一个数字，你可以选择四个方向，然后数字会按方向移动，遇到相同的数字就会合并，游戏的目的就是合并出2048这个数字，最终看你获得了多少总分。2048也就是2的11次方，即合并11次。原本1024就已经不容易了，升级到2048，一旦停下来就还真的不好完成了！像小编这种数学是体育老师教的，看着这款好玩到爆的游戏只能一声长叹，两行清泪划过脸颊。</p>\n<a id=\"more\"></a>\n<p>判断输赢：表格填满数字且无法通过移动来合并数字时，游戏退出</p>\n<p>源代码实现c算法版：</p>\n<pre><code>/*\n    2048游戏\n*/\n#include &lt;stdio.h&gt;\n#include &lt;memory.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n#define MAX 4\nint row=0,col=0;//元素下标\nint loop=0;//排数\nint i = 0, j = 0;//下标\nint map[MAX][MAX] = {0};\n\n/*初始化数组*/\nvoid init()\n{\n    memset(map,0,sizeof(map));\n}\n\n/*在某一个空的位置创建随机数*/\nvoid CreateRandNumber()\n{\n    int flag =0,pos=0;\n    srand(time(0));\n    int x =0 ,y = 0;\n    int r[MAX*MAX];\n    int c[MAX*MAX];\n    int k = 0;\n    /*判断哪些位置可空*/\n    for(row=0;row&lt;MAX;row++)\n    {\n        for(col=0;col&lt;MAX;col++)\n        {\n            if(map[row][col]==0)\n            {\n                r[k]=row;\n                c[k]=col;\n                k++;\n\n            }\n        }\n    }\n    if(k==0)\n    {\n        printf(&quot;游戏结束\\n&quot;);\n        exit(0);\n    }\n    printf(&quot;\\n&quot;);\n    pos = rand()%k;\n    x = r[pos];\n    y = c[pos];\n    map[x][y] = (rand()%2+1)*2;\n    printf(&quot;产生随机数map[%d][%d]=%d\\n&quot;,x,y,map[x][y]);\n    /*从空的位置中产生一个随机数2或者4*/\n}\n\n/*显示游戏盘*/\nvoid show_map()\n{\n    CreateRandNumber();\n    for(row=0;row&lt;4;row++)\n    {\n        for(loop=0;loop&lt;4;loop++)\n        {\n            printf(&quot;----+&quot;);\n        }\n        printf(&quot;\\n&quot;);\n        for(col=0;col&lt;4;col++)\n        {\n            if(map[row][col]==0)\n            {\n                printf(&quot;    |&quot;);\n            }\n            else\n            {\n                 printf(&quot;%-4d|&quot;,map[row][col]);\n            }\n        }\n        printf(&quot;\\n&quot;);\n    }\n    for(loop=0;loop&lt;4;loop++)\n    {\n        printf(&quot;----+&quot;);\n    }\n    printf(&quot;\\n&quot;);\n}\n/*向左移动*/\nvoid toward_left()\n{\n    printf(&quot;正在向左移动\\n&quot;);\n    for(loop=0;loop&lt;4;loop++)\n    {\n        //移动数字\n        for(i=1;i&lt;=3;i++)\n        {\n            for(j=i;j&gt;0;j--)\n            {\n                if(map[loop][j-1]==0)\n                {\n                    map[loop][j-1]=map[loop][j];\n                    map[loop][j]=0;\n                }\n            }\n        }\n        //合并相同数字\n        for(i=1;i&lt;=3;i++)\n        {\n            if((map[loop][i]==map[loop][i-1]) &amp;&amp; (map[loop][i-1]!=0))\n            {\n                map[loop][i-1]=2*map[loop][i-1];\n                map[loop][i]=0;\n            }\n        }\n    }\n}\n/*向上移动*/\nvoid toward_up()\n{\n    printf(&quot;正在向上移动\\n&quot;);\n    for(loop=0;loop&lt;4;loop++)\n    {\n        //移动数字\n        for(i=1;i&lt;=3;i++)\n        {\n            for(j=i;j&gt;0;j--)\n            {\n                if(map[j-1][loop]==0)\n                {\n                    map[j-1][loop]=map[j][loop];\n                    map[j][loop]=0;\n                }\n            }\n        }\n        //合并相同数字\n        for(i=1;i&lt;=3;i++)\n        {\n            if((map[i-1][loop]==map[i][loop]) &amp;&amp; (map[i-1][loop]!=0))\n            {\n                map[i-1][loop]*=2;\n                map[i][loop]=0;\n            }\n        }\n    }\n\n}\n/*向下移动*/\nvoid toward_down()\n{\n    printf(&quot;正在向下移动\\n&quot;);\n    for(loop=0;loop&lt;4;loop++)\n    {\n        //移动数字\n        for(i=3;i&gt;0;i--)\n        {\n            for(j=i;j&lt;=3;j++)\n            {\n                if(map[j][loop]==0)\n                {\n                    map[j][loop]=map[j-1][loop];\n                    map[j-1][loop]=0;\n                }\n            }\n        }\n        //合并相同数字\n        for(i=3;i&gt;0;i--)\n        {\n            if((map[i][loop]==map[i-1][loop]) &amp;&amp; (map[i][loop]!=0))\n            {\n                map[i][loop]*=2;\n                map[i-1][loop]=0;\n            }\n        }\n    }\n\n}\n/*向右移动*/\nvoid toward_right()\n{\n    printf(&quot;正在向右移动\\n&quot;);\n    for(loop=0;loop&lt;4;loop++)//四排\n    {\n        //移动数字\n        i = 2;\n        while(i&gt;=0)\n        {\n            for(j=i;j&lt;3;j++)\n            {\n                if(map[loop][j+1]==0)\n                {\n                    map[loop][j+1]=map[loop][j];\n                    map[loop][j]=0;\n                }\n            }\n            i--;\n        }\n        //合并相同数字\n        for(i=2;i&gt;=0;i--)\n        {\n            if((map[loop][i+1]==map[loop][i]) &amp;&amp; (map[loop][i+1]!=0))\n            {\n                map[loop][i+1]=2*map[loop][i+1];\n                map[loop][i]=0;\n            }\n        }\n    }\n\n}\n/*开始游戏*/\nvoid play()\n{\n    show_map();\n    char direction = &apos; &apos;;\n    while(1)\n    {\n        printf(&quot;h代表向左，j代表向向上，k代表向下，l代表向右:\\n&quot;);\n        printf(&quot;输入方向：&quot;);\n        scanf(&quot;%c&quot;,&amp;direction);\n        scanf(&quot;%*[^\\n]&quot;);\n        scanf(&quot;%*c&quot;);\n        switch(direction)\n        {\n            case &apos;h&apos;:toward_left(); show_map();break;\n            case &apos;j&apos;:toward_up(); show_map();break;\n            case &apos;k&apos;:toward_down(); show_map();break;\n            case &apos;l&apos;:toward_right(); show_map();break;\n            default:break;\n        }\n    }\n}\nint main()\n{\n    init();\n    play();\n    return 0;\n}\n</code></pre>","site":{"data":{}},"excerpt":"<h3 id=\"2048游戏\"><a href=\"#2048游戏\" class=\"headerlink\" title=\"2048游戏\"></a>2048游戏</h3><p>玩儿过这款游戏后，小编才知道什么叫“根本停不下来”。在4X4的棋盘上，每次会增加一个数字，你可以选择四个方向，然后数字会按方向移动，遇到相同的数字就会合并，游戏的目的就是合并出2048这个数字，最终看你获得了多少总分。2048也就是2的11次方，即合并11次。原本1024就已经不容易了，升级到2048，一旦停下来就还真的不好完成了！像小编这种数学是体育老师教的，看着这款好玩到爆的游戏只能一声长叹，两行清泪划过脸颊。</p>","more":"<p>判断输赢：表格填满数字且无法通过移动来合并数字时，游戏退出</p>\n<p>源代码实现c算法版：</p>\n<pre><code>/*\n    2048游戏\n*/\n#include &lt;stdio.h&gt;\n#include &lt;memory.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;time.h&gt;\n#define MAX 4\nint row=0,col=0;//元素下标\nint loop=0;//排数\nint i = 0, j = 0;//下标\nint map[MAX][MAX] = {0};\n\n/*初始化数组*/\nvoid init()\n{\n    memset(map,0,sizeof(map));\n}\n\n/*在某一个空的位置创建随机数*/\nvoid CreateRandNumber()\n{\n    int flag =0,pos=0;\n    srand(time(0));\n    int x =0 ,y = 0;\n    int r[MAX*MAX];\n    int c[MAX*MAX];\n    int k = 0;\n    /*判断哪些位置可空*/\n    for(row=0;row&lt;MAX;row++)\n    {\n        for(col=0;col&lt;MAX;col++)\n        {\n            if(map[row][col]==0)\n            {\n                r[k]=row;\n                c[k]=col;\n                k++;\n\n            }\n        }\n    }\n    if(k==0)\n    {\n        printf(&quot;游戏结束\\n&quot;);\n        exit(0);\n    }\n    printf(&quot;\\n&quot;);\n    pos = rand()%k;\n    x = r[pos];\n    y = c[pos];\n    map[x][y] = (rand()%2+1)*2;\n    printf(&quot;产生随机数map[%d][%d]=%d\\n&quot;,x,y,map[x][y]);\n    /*从空的位置中产生一个随机数2或者4*/\n}\n\n/*显示游戏盘*/\nvoid show_map()\n{\n    CreateRandNumber();\n    for(row=0;row&lt;4;row++)\n    {\n        for(loop=0;loop&lt;4;loop++)\n        {\n            printf(&quot;----+&quot;);\n        }\n        printf(&quot;\\n&quot;);\n        for(col=0;col&lt;4;col++)\n        {\n            if(map[row][col]==0)\n            {\n                printf(&quot;    |&quot;);\n            }\n            else\n            {\n                 printf(&quot;%-4d|&quot;,map[row][col]);\n            }\n        }\n        printf(&quot;\\n&quot;);\n    }\n    for(loop=0;loop&lt;4;loop++)\n    {\n        printf(&quot;----+&quot;);\n    }\n    printf(&quot;\\n&quot;);\n}\n/*向左移动*/\nvoid toward_left()\n{\n    printf(&quot;正在向左移动\\n&quot;);\n    for(loop=0;loop&lt;4;loop++)\n    {\n        //移动数字\n        for(i=1;i&lt;=3;i++)\n        {\n            for(j=i;j&gt;0;j--)\n            {\n                if(map[loop][j-1]==0)\n                {\n                    map[loop][j-1]=map[loop][j];\n                    map[loop][j]=0;\n                }\n            }\n        }\n        //合并相同数字\n        for(i=1;i&lt;=3;i++)\n        {\n            if((map[loop][i]==map[loop][i-1]) &amp;&amp; (map[loop][i-1]!=0))\n            {\n                map[loop][i-1]=2*map[loop][i-1];\n                map[loop][i]=0;\n            }\n        }\n    }\n}\n/*向上移动*/\nvoid toward_up()\n{\n    printf(&quot;正在向上移动\\n&quot;);\n    for(loop=0;loop&lt;4;loop++)\n    {\n        //移动数字\n        for(i=1;i&lt;=3;i++)\n        {\n            for(j=i;j&gt;0;j--)\n            {\n                if(map[j-1][loop]==0)\n                {\n                    map[j-1][loop]=map[j][loop];\n                    map[j][loop]=0;\n                }\n            }\n        }\n        //合并相同数字\n        for(i=1;i&lt;=3;i++)\n        {\n            if((map[i-1][loop]==map[i][loop]) &amp;&amp; (map[i-1][loop]!=0))\n            {\n                map[i-1][loop]*=2;\n                map[i][loop]=0;\n            }\n        }\n    }\n\n}\n/*向下移动*/\nvoid toward_down()\n{\n    printf(&quot;正在向下移动\\n&quot;);\n    for(loop=0;loop&lt;4;loop++)\n    {\n        //移动数字\n        for(i=3;i&gt;0;i--)\n        {\n            for(j=i;j&lt;=3;j++)\n            {\n                if(map[j][loop]==0)\n                {\n                    map[j][loop]=map[j-1][loop];\n                    map[j-1][loop]=0;\n                }\n            }\n        }\n        //合并相同数字\n        for(i=3;i&gt;0;i--)\n        {\n            if((map[i][loop]==map[i-1][loop]) &amp;&amp; (map[i][loop]!=0))\n            {\n                map[i][loop]*=2;\n                map[i-1][loop]=0;\n            }\n        }\n    }\n\n}\n/*向右移动*/\nvoid toward_right()\n{\n    printf(&quot;正在向右移动\\n&quot;);\n    for(loop=0;loop&lt;4;loop++)//四排\n    {\n        //移动数字\n        i = 2;\n        while(i&gt;=0)\n        {\n            for(j=i;j&lt;3;j++)\n            {\n                if(map[loop][j+1]==0)\n                {\n                    map[loop][j+1]=map[loop][j];\n                    map[loop][j]=0;\n                }\n            }\n            i--;\n        }\n        //合并相同数字\n        for(i=2;i&gt;=0;i--)\n        {\n            if((map[loop][i+1]==map[loop][i]) &amp;&amp; (map[loop][i+1]!=0))\n            {\n                map[loop][i+1]=2*map[loop][i+1];\n                map[loop][i]=0;\n            }\n        }\n    }\n\n}\n/*开始游戏*/\nvoid play()\n{\n    show_map();\n    char direction = &apos; &apos;;\n    while(1)\n    {\n        printf(&quot;h代表向左，j代表向向上，k代表向下，l代表向右:\\n&quot;);\n        printf(&quot;输入方向：&quot;);\n        scanf(&quot;%c&quot;,&amp;direction);\n        scanf(&quot;%*[^\\n]&quot;);\n        scanf(&quot;%*c&quot;);\n        switch(direction)\n        {\n            case &apos;h&apos;:toward_left(); show_map();break;\n            case &apos;j&apos;:toward_up(); show_map();break;\n            case &apos;k&apos;:toward_down(); show_map();break;\n            case &apos;l&apos;:toward_right(); show_map();break;\n            default:break;\n        }\n    }\n}\nint main()\n{\n    init();\n    play();\n    return 0;\n}\n</code></pre>"},{"title":"MYSQL存储引擎","date":"2014-12-15T00:00:00.000Z","_content":"\n### MYSQL两种最常用的存储引擎\n\nInnoDB和MyISAM是许多人在使用MySQL时最常用的两个表类型，这两个表类型各有优劣，视具体应用而定。基本的差别为：MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持已经外部键等高级数据库功能。\n\n\n#### 主要区别\n\n\t1.InnoDB不支持FULLTEXT类型的索引。\n\t2.InnoDB 中不保存表的具体行数，也就是说，执行select count(*) from table时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(*)语句包含 where条件时，两种表的操作是一样的。\n\t3.对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。package，搜索ctags就能找到ctags的插件，安装之。\n\t4.DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。tags文件，那么这个时候就可以定位函数了。(具体参考<a href=\"https://github.com/SublimeText/CTags#additional-setup-steps\" target=\"_blank\">官方API</a>)\n\n#### 应用场景一般规则\n\n\t1.应用程序要使用事务时必须采用InnoDB引擎\n\t2.应用程序对查询性能要求较高，就要使用MYISAM了。MYISAM索引和数据是分开的，而且其索引是压缩的，可以更好地利用内存。","source":"_posts/MYSQL存储引擎.md","raw":"---\ntitle: MYSQL存储引擎\ntags: []\ndate: 2014-12-15 08:00:00\n---\n\n### MYSQL两种最常用的存储引擎\n\nInnoDB和MyISAM是许多人在使用MySQL时最常用的两个表类型，这两个表类型各有优劣，视具体应用而定。基本的差别为：MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持已经外部键等高级数据库功能。\n\n\n#### 主要区别\n\n\t1.InnoDB不支持FULLTEXT类型的索引。\n\t2.InnoDB 中不保存表的具体行数，也就是说，执行select count(*) from table时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(*)语句包含 where条件时，两种表的操作是一样的。\n\t3.对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。package，搜索ctags就能找到ctags的插件，安装之。\n\t4.DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。tags文件，那么这个时候就可以定位函数了。(具体参考<a href=\"https://github.com/SublimeText/CTags#additional-setup-steps\" target=\"_blank\">官方API</a>)\n\n#### 应用场景一般规则\n\n\t1.应用程序要使用事务时必须采用InnoDB引擎\n\t2.应用程序对查询性能要求较高，就要使用MYISAM了。MYISAM索引和数据是分开的，而且其索引是压缩的，可以更好地利用内存。","slug":"MYSQL存储引擎","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwqx00022o5pqhg85xvf","content":"<h3 id=\"MYSQL两种最常用的存储引擎\"><a href=\"#MYSQL两种最常用的存储引擎\" class=\"headerlink\" title=\"MYSQL两种最常用的存储引擎\"></a>MYSQL两种最常用的存储引擎</h3><p>InnoDB和MyISAM是许多人在使用MySQL时最常用的两个表类型，这两个表类型各有优劣，视具体应用而定。基本的差别为：MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持已经外部键等高级数据库功能。</p>\n<h4 id=\"主要区别\"><a href=\"#主要区别\" class=\"headerlink\" title=\"主要区别\"></a>主要区别</h4><pre><code>1.InnoDB不支持FULLTEXT类型的索引。\n2.InnoDB 中不保存表的具体行数，也就是说，执行select count(*) from table时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(*)语句包含 where条件时，两种表的操作是一样的。\n3.对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。package，搜索ctags就能找到ctags的插件，安装之。\n4.DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。tags文件，那么这个时候就可以定位函数了。(具体参考&lt;a href=&quot;https://github.com/SublimeText/CTags#additional-setup-steps&quot; target=&quot;_blank&quot;&gt;官方API&lt;/a&gt;)\n</code></pre><h4 id=\"应用场景一般规则\"><a href=\"#应用场景一般规则\" class=\"headerlink\" title=\"应用场景一般规则\"></a>应用场景一般规则</h4><pre><code>1.应用程序要使用事务时必须采用InnoDB引擎\n2.应用程序对查询性能要求较高，就要使用MYISAM了。MYISAM索引和数据是分开的，而且其索引是压缩的，可以更好地利用内存。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"MYSQL两种最常用的存储引擎\"><a href=\"#MYSQL两种最常用的存储引擎\" class=\"headerlink\" title=\"MYSQL两种最常用的存储引擎\"></a>MYSQL两种最常用的存储引擎</h3><p>InnoDB和MyISAM是许多人在使用MySQL时最常用的两个表类型，这两个表类型各有优劣，视具体应用而定。基本的差别为：MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持已经外部键等高级数据库功能。</p>\n<h4 id=\"主要区别\"><a href=\"#主要区别\" class=\"headerlink\" title=\"主要区别\"></a>主要区别</h4><pre><code>1.InnoDB不支持FULLTEXT类型的索引。\n2.InnoDB 中不保存表的具体行数，也就是说，执行select count(*) from table时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(*)语句包含 where条件时，两种表的操作是一样的。\n3.对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。package，搜索ctags就能找到ctags的插件，安装之。\n4.DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。tags文件，那么这个时候就可以定位函数了。(具体参考&lt;a href=&quot;https://github.com/SublimeText/CTags#additional-setup-steps&quot; target=&quot;_blank&quot;&gt;官方API&lt;/a&gt;)\n</code></pre><h4 id=\"应用场景一般规则\"><a href=\"#应用场景一般规则\" class=\"headerlink\" title=\"应用场景一般规则\"></a>应用场景一般规则</h4><pre><code>1.应用程序要使用事务时必须采用InnoDB引擎\n2.应用程序对查询性能要求较高，就要使用MYISAM了。MYISAM索引和数据是分开的，而且其索引是压缩的，可以更好地利用内存。\n</code></pre>"},{"title":"PHP实现多线程抓取网页","date":"2014-06-23T00:00:00.000Z","_content":"\n### PHP实现多线程抓取网页\n\n使用PHP的cURL库可以简单和有效地去抓网页。你只需要运行一个脚本，然后分析一下你所抓取的网页，然后就可以以程序的方式得到你想要的数据了。无论是你想从从一个链接上取部分数据，或是取一个XML文件并把其导入数据库，那怕就是简单的获取网页内容，cURL 是一个功能强大的PHP库。本文主要讲述如果使用这个PHP库抓取网页。\n\n<!-- more -->            \n\n#### 开启curl库\n\n首先要确定我们的PHP是否开启了这个库，如果你是在Windows平台下，需要改一改你的php.ini文件的设置，找到php_curl.dll，取消前面的分号就行：\n\n    extension=php_curl.dll\n\n##### 利用curl抓取网页代码\n\n    <?php\n    $urls = array(    \n        'http://www.baidu.com/',\n        'http://www.caijinlin.com/',\n        'http://caijinlin.github.io'\n    );   \n    $save_to='./res.txt';   // 把抓取的代码写入该文件       \n    $st = fopen($save_to,\"a\");      \n    $mh = curl_multi_init(); //创建多个curl句柄\n    foreach ($urls as $i => $url) \n    {   \n    $conn[$i] = curl_init($url);   //创建一个curl句柄\n    curl_setopt($conn[$i], CURLOPT_USERAGENT, \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\");   \n    curl_setopt($conn[$i], CURLOPT_HEADER ,0);  // 这里不要header，加块效率\n    curl_setopt($conn[$i], CURLOPT_CONNECTTIMEOUT,60);   //设置超时时间\n    curl_setopt($conn[$i],CURLOPT_RETURNTRANSFER,true);  // 设置不将爬取代码写到浏览器，而是转化为字符串  \n    curl_multi_add_handle ($mh,$conn[$i]);   //向curl批处理会话中添加单独的curl句柄\n    }   \n    do \n    {   \n        curl_multi_exec($mh,$active);//循环执行   \n    } while ($active);   \n    foreach ($urls as $i => $url) \n    {   \n        $data = curl_multi_getcontent($conn[$i]); // 获得爬取的代码字符串   \n        fwrite($st,$data);  // 将字符串写入文件。当然，也可以不写入文件，比如存入数据库   \n    } // 获得数据变量，并写入文件   \n    foreach ($urls as $i => $url) \n    {   \n      curl_multi_remove_handle($mh,$conn[$i]); // 移除curl批处理句柄资源中的某个句柄资源  \n      curl_close($conn[$i]);   \n    }    \n    curl_multi_close($mh); //关闭多个cURL 多个句柄\n    fclose($st);  //关闭文件\n    ?>\n\n#### 效果预览\n\n抓取3个网页，通过curl可以达到多线程，进行同时抓取，而不必等到第一个网页抓取完毕，再抓取第二个。\nres.txt文件中，存放了3个网页的代码，分别复制出来，存放在html文件中，就可以看到他们的效果如下。\n\n百度页面\n\n![邻接表](/assets/images/baidu.png)\n\n我的基于jekyllbootstrap的博客\n\n![邻接表](/assets/images/jekyllblog.png)\n\n我的wordpress博客\n\n![邻接表](/assets/images/wordpress.png)","source":"_posts/PHP实现多线程抓取网页.md","raw":"---\ntitle: PHP实现多线程抓取网页\ntags: []\ndate: 2014-06-23 08:00:00\n---\n\n### PHP实现多线程抓取网页\n\n使用PHP的cURL库可以简单和有效地去抓网页。你只需要运行一个脚本，然后分析一下你所抓取的网页，然后就可以以程序的方式得到你想要的数据了。无论是你想从从一个链接上取部分数据，或是取一个XML文件并把其导入数据库，那怕就是简单的获取网页内容，cURL 是一个功能强大的PHP库。本文主要讲述如果使用这个PHP库抓取网页。\n\n<!-- more -->            \n\n#### 开启curl库\n\n首先要确定我们的PHP是否开启了这个库，如果你是在Windows平台下，需要改一改你的php.ini文件的设置，找到php_curl.dll，取消前面的分号就行：\n\n    extension=php_curl.dll\n\n##### 利用curl抓取网页代码\n\n    <?php\n    $urls = array(    \n        'http://www.baidu.com/',\n        'http://www.caijinlin.com/',\n        'http://caijinlin.github.io'\n    );   \n    $save_to='./res.txt';   // 把抓取的代码写入该文件       \n    $st = fopen($save_to,\"a\");      \n    $mh = curl_multi_init(); //创建多个curl句柄\n    foreach ($urls as $i => $url) \n    {   \n    $conn[$i] = curl_init($url);   //创建一个curl句柄\n    curl_setopt($conn[$i], CURLOPT_USERAGENT, \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\");   \n    curl_setopt($conn[$i], CURLOPT_HEADER ,0);  // 这里不要header，加块效率\n    curl_setopt($conn[$i], CURLOPT_CONNECTTIMEOUT,60);   //设置超时时间\n    curl_setopt($conn[$i],CURLOPT_RETURNTRANSFER,true);  // 设置不将爬取代码写到浏览器，而是转化为字符串  \n    curl_multi_add_handle ($mh,$conn[$i]);   //向curl批处理会话中添加单独的curl句柄\n    }   \n    do \n    {   \n        curl_multi_exec($mh,$active);//循环执行   \n    } while ($active);   \n    foreach ($urls as $i => $url) \n    {   \n        $data = curl_multi_getcontent($conn[$i]); // 获得爬取的代码字符串   \n        fwrite($st,$data);  // 将字符串写入文件。当然，也可以不写入文件，比如存入数据库   \n    } // 获得数据变量，并写入文件   \n    foreach ($urls as $i => $url) \n    {   \n      curl_multi_remove_handle($mh,$conn[$i]); // 移除curl批处理句柄资源中的某个句柄资源  \n      curl_close($conn[$i]);   \n    }    \n    curl_multi_close($mh); //关闭多个cURL 多个句柄\n    fclose($st);  //关闭文件\n    ?>\n\n#### 效果预览\n\n抓取3个网页，通过curl可以达到多线程，进行同时抓取，而不必等到第一个网页抓取完毕，再抓取第二个。\nres.txt文件中，存放了3个网页的代码，分别复制出来，存放在html文件中，就可以看到他们的效果如下。\n\n百度页面\n\n![邻接表](/assets/images/baidu.png)\n\n我的基于jekyllbootstrap的博客\n\n![邻接表](/assets/images/jekyllblog.png)\n\n我的wordpress博客\n\n![邻接表](/assets/images/wordpress.png)","slug":"PHP实现多线程抓取网页","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwr000032o5prvrzlpzd","content":"<h3 id=\"PHP实现多线程抓取网页\"><a href=\"#PHP实现多线程抓取网页\" class=\"headerlink\" title=\"PHP实现多线程抓取网页\"></a>PHP实现多线程抓取网页</h3><p>使用PHP的cURL库可以简单和有效地去抓网页。你只需要运行一个脚本，然后分析一下你所抓取的网页，然后就可以以程序的方式得到你想要的数据了。无论是你想从从一个链接上取部分数据，或是取一个XML文件并把其导入数据库，那怕就是简单的获取网页内容，cURL 是一个功能强大的PHP库。本文主要讲述如果使用这个PHP库抓取网页。</p>\n<a id=\"more\"></a>            \n<h4 id=\"开启curl库\"><a href=\"#开启curl库\" class=\"headerlink\" title=\"开启curl库\"></a>开启curl库</h4><p>首先要确定我们的PHP是否开启了这个库，如果你是在Windows平台下，需要改一改你的php.ini文件的设置，找到php_curl.dll，取消前面的分号就行：</p>\n<pre><code>extension=php_curl.dll\n</code></pre><h5 id=\"利用curl抓取网页代码\"><a href=\"#利用curl抓取网页代码\" class=\"headerlink\" title=\"利用curl抓取网页代码\"></a>利用curl抓取网页代码</h5><pre><code>&lt;?php\n$urls = array(    \n    &apos;http://www.baidu.com/&apos;,\n    &apos;http://www.caijinlin.com/&apos;,\n    &apos;http://caijinlin.github.io&apos;\n);   \n$save_to=&apos;./res.txt&apos;;   // 把抓取的代码写入该文件       \n$st = fopen($save_to,&quot;a&quot;);      \n$mh = curl_multi_init(); //创建多个curl句柄\nforeach ($urls as $i =&gt; $url) \n{   \n$conn[$i] = curl_init($url);   //创建一个curl句柄\ncurl_setopt($conn[$i], CURLOPT_USERAGENT, &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&quot;);   \ncurl_setopt($conn[$i], CURLOPT_HEADER ,0);  // 这里不要header，加块效率\ncurl_setopt($conn[$i], CURLOPT_CONNECTTIMEOUT,60);   //设置超时时间\ncurl_setopt($conn[$i],CURLOPT_RETURNTRANSFER,true);  // 设置不将爬取代码写到浏览器，而是转化为字符串  \ncurl_multi_add_handle ($mh,$conn[$i]);   //向curl批处理会话中添加单独的curl句柄\n}   \ndo \n{   \n    curl_multi_exec($mh,$active);//循环执行   \n} while ($active);   \nforeach ($urls as $i =&gt; $url) \n{   \n    $data = curl_multi_getcontent($conn[$i]); // 获得爬取的代码字符串   \n    fwrite($st,$data);  // 将字符串写入文件。当然，也可以不写入文件，比如存入数据库   \n} // 获得数据变量，并写入文件   \nforeach ($urls as $i =&gt; $url) \n{   \n  curl_multi_remove_handle($mh,$conn[$i]); // 移除curl批处理句柄资源中的某个句柄资源  \n  curl_close($conn[$i]);   \n}    \ncurl_multi_close($mh); //关闭多个cURL 多个句柄\nfclose($st);  //关闭文件\n?&gt;\n</code></pre><h4 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h4><p>抓取3个网页，通过curl可以达到多线程，进行同时抓取，而不必等到第一个网页抓取完毕，再抓取第二个。<br>res.txt文件中，存放了3个网页的代码，分别复制出来，存放在html文件中，就可以看到他们的效果如下。</p>\n<p>百度页面</p>\n<p><img src=\"/assets/images/baidu.png\" alt=\"邻接表\"></p>\n<p>我的基于jekyllbootstrap的博客</p>\n<p><img src=\"/assets/images/jekyllblog.png\" alt=\"邻接表\"></p>\n<p>我的wordpress博客</p>\n<p><img src=\"/assets/images/wordpress.png\" alt=\"邻接表\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"PHP实现多线程抓取网页\"><a href=\"#PHP实现多线程抓取网页\" class=\"headerlink\" title=\"PHP实现多线程抓取网页\"></a>PHP实现多线程抓取网页</h3><p>使用PHP的cURL库可以简单和有效地去抓网页。你只需要运行一个脚本，然后分析一下你所抓取的网页，然后就可以以程序的方式得到你想要的数据了。无论是你想从从一个链接上取部分数据，或是取一个XML文件并把其导入数据库，那怕就是简单的获取网页内容，cURL 是一个功能强大的PHP库。本文主要讲述如果使用这个PHP库抓取网页。</p>","more":"<h4 id=\"开启curl库\"><a href=\"#开启curl库\" class=\"headerlink\" title=\"开启curl库\"></a>开启curl库</h4><p>首先要确定我们的PHP是否开启了这个库，如果你是在Windows平台下，需要改一改你的php.ini文件的设置，找到php_curl.dll，取消前面的分号就行：</p>\n<pre><code>extension=php_curl.dll\n</code></pre><h5 id=\"利用curl抓取网页代码\"><a href=\"#利用curl抓取网页代码\" class=\"headerlink\" title=\"利用curl抓取网页代码\"></a>利用curl抓取网页代码</h5><pre><code>&lt;?php\n$urls = array(    \n    &apos;http://www.baidu.com/&apos;,\n    &apos;http://www.caijinlin.com/&apos;,\n    &apos;http://caijinlin.github.io&apos;\n);   \n$save_to=&apos;./res.txt&apos;;   // 把抓取的代码写入该文件       \n$st = fopen($save_to,&quot;a&quot;);      \n$mh = curl_multi_init(); //创建多个curl句柄\nforeach ($urls as $i =&gt; $url) \n{   \n$conn[$i] = curl_init($url);   //创建一个curl句柄\ncurl_setopt($conn[$i], CURLOPT_USERAGENT, &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&quot;);   \ncurl_setopt($conn[$i], CURLOPT_HEADER ,0);  // 这里不要header，加块效率\ncurl_setopt($conn[$i], CURLOPT_CONNECTTIMEOUT,60);   //设置超时时间\ncurl_setopt($conn[$i],CURLOPT_RETURNTRANSFER,true);  // 设置不将爬取代码写到浏览器，而是转化为字符串  \ncurl_multi_add_handle ($mh,$conn[$i]);   //向curl批处理会话中添加单独的curl句柄\n}   \ndo \n{   \n    curl_multi_exec($mh,$active);//循环执行   \n} while ($active);   \nforeach ($urls as $i =&gt; $url) \n{   \n    $data = curl_multi_getcontent($conn[$i]); // 获得爬取的代码字符串   \n    fwrite($st,$data);  // 将字符串写入文件。当然，也可以不写入文件，比如存入数据库   \n} // 获得数据变量，并写入文件   \nforeach ($urls as $i =&gt; $url) \n{   \n  curl_multi_remove_handle($mh,$conn[$i]); // 移除curl批处理句柄资源中的某个句柄资源  \n  curl_close($conn[$i]);   \n}    \ncurl_multi_close($mh); //关闭多个cURL 多个句柄\nfclose($st);  //关闭文件\n?&gt;\n</code></pre><h4 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h4><p>抓取3个网页，通过curl可以达到多线程，进行同时抓取，而不必等到第一个网页抓取完毕，再抓取第二个。<br>res.txt文件中，存放了3个网页的代码，分别复制出来，存放在html文件中，就可以看到他们的效果如下。</p>\n<p>百度页面</p>\n<p><img src=\"/assets/images/baidu.png\" alt=\"邻接表\"></p>\n<p>我的基于jekyllbootstrap的博客</p>\n<p><img src=\"/assets/images/jekyllblog.png\" alt=\"邻接表\"></p>\n<p>我的wordpress博客</p>\n<p><img src=\"/assets/images/wordpress.png\" alt=\"邻接表\"></p>"},{"title":"Sublime JsFormat插件安装及使用","date":"2014-12-18T00:00:00.000Z","_content":"\n### 安装及使用Sublime插件JsFormat\n\n涉及到JSON格式数据的开发过程中，常常会为一长串未格式化的JSON数据而看的眼花，如下图所示，脑袋是不是大了Sublime JSON格式化。因此寻找一款格式化工具就来的非常必要。\n\n#### 安装步骤\n\n菜单栏Peferences -&gt; Package Control -&gt; install  -&gt; jsFormat，回车安装\n\n#### 使用\n\n打开需要格式化的js文件，快捷键CTRL + ALT + f， 即可格式化。\n\n![jsFormat插件格式化js代码](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/JsFormat.png)","source":"_posts/Sublime-JsFormat插件安装及使用.md","raw":"---\ntitle: Sublime JsFormat插件安装及使用\ntags: []\ndate: 2014-12-18 08:00:00\n---\n\n### 安装及使用Sublime插件JsFormat\n\n涉及到JSON格式数据的开发过程中，常常会为一长串未格式化的JSON数据而看的眼花，如下图所示，脑袋是不是大了Sublime JSON格式化。因此寻找一款格式化工具就来的非常必要。\n\n#### 安装步骤\n\n菜单栏Peferences -&gt; Package Control -&gt; install  -&gt; jsFormat，回车安装\n\n#### 使用\n\n打开需要格式化的js文件，快捷键CTRL + ALT + f， 即可格式化。\n\n![jsFormat插件格式化js代码](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/JsFormat.png)","slug":"Sublime-JsFormat插件安装及使用","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwr100042o5p6z12x79c","content":"<h3 id=\"安装及使用Sublime插件JsFormat\"><a href=\"#安装及使用Sublime插件JsFormat\" class=\"headerlink\" title=\"安装及使用Sublime插件JsFormat\"></a>安装及使用Sublime插件JsFormat</h3><p>涉及到JSON格式数据的开发过程中，常常会为一长串未格式化的JSON数据而看的眼花，如下图所示，脑袋是不是大了Sublime JSON格式化。因此寻找一款格式化工具就来的非常必要。</p>\n<h4 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h4><p>菜单栏Peferences -&gt; Package Control -&gt; install  -&gt; jsFormat，回车安装</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>打开需要格式化的js文件，快捷键CTRL + ALT + f， 即可格式化。</p>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/JsFormat.png\" alt=\"jsFormat插件格式化js代码\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装及使用Sublime插件JsFormat\"><a href=\"#安装及使用Sublime插件JsFormat\" class=\"headerlink\" title=\"安装及使用Sublime插件JsFormat\"></a>安装及使用Sublime插件JsFormat</h3><p>涉及到JSON格式数据的开发过程中，常常会为一长串未格式化的JSON数据而看的眼花，如下图所示，脑袋是不是大了Sublime JSON格式化。因此寻找一款格式化工具就来的非常必要。</p>\n<h4 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h4><p>菜单栏Peferences -&gt; Package Control -&gt; install  -&gt; jsFormat，回车安装</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>打开需要格式化的js文件，快捷键CTRL + ALT + f， 即可格式化。</p>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/JsFormat.png\" alt=\"jsFormat插件格式化js代码\"></p>\n"},{"title":"Sublime下XDebug安装及使用","date":"2015-01-03T00:00:00.000Z","_content":"\n#### Windows下安装及使用Sublime Text2/3 插件XDebug Client\n\nsublime下配置xdebug,可以调试php程序，能够提高开发速度。今天花两个小时配置了xdebug，发现效率提升不少，更快地定位错误，提高解决问题的能力。以下是安装及使用步骤。\n\n#### 安装步骤\n\nstep1.sublime 安装xdebug client\n\n        ctrl+shift+p\n        install pacakage\n        xdebug client回车\n\nstep2.配置php xdebug：找到标签[XDebug],添加如下内容\n\n        xdebug.remote_enable = on\n        xdebug.remote_handler = \"dbgp\"\n        xdebug.remote_host = \"127.0.0.1\"\n        xdebug.remote_port = 9000 \n        zend_extension=\"D:\\Program Files\\phpStudy\\php53\\ext\\xdebug.dll\" //找到xdebug.dll的位置\n\nstep3.配置sublime xdebug\n\n点击sublime菜单栏的project->save project as,保存后会当前工程生成一个.sublime-project的文件，修改为如下：\n\n    {\n    \"folders\":\n    [\n        {\n            \"path\": \"/D/WWW\"\n        }\n    ],\n    \"settings\": \n    {\n        \"xdebug\": \n        {\n            \"path_mapping\": {   }, \n            \"url\": \"http://127.0.0.1/topic/uploadpic.php\", \n            \"super_globals\": true,  \n            \"close_on_stop\": true,  \n            \"port\": 9000 \n        }   \n     }\n   }\n\n 其中url为你当前要调试的页面，你调试什么页面就改成该页面的地址\n\n\n#### 使用步骤\n\nstep1.设置断点\n\n    在当前行代码标记：CTRL + F8\n\nstep2.打开调试面板\n\n    ctrl+shift+p，然后输入Xdebug, 选择下拉的Xdebug:Start Debugging(Launch Browser),就会在浏览器中打开刚才的url.\n\n![sublime](/assets/images/sublime.png)\n\nstep3.开始调试(可以在调试的过程中监控某些值)\n\n    Ctrl+F8: 切换断点；\n    Ctrl+Shift+F5: 运行到下一个断点；\n    Ctrl+Shift+F6: 单步；\n    Ctrl+Shift+F7: 步入；\n    Ctrl+Shift+F8: 步出 \n    Ctrl+Shift+F9: 开始调试 \n    Ctrl+Shift+F10: 关闭调试\n\n![sublime](/assets/images/setwatch.png)\n\n","source":"_posts/Sublime下XDebug安装及使用.md","raw":"---\ntitle: Sublime下XDebug安装及使用\ntags: []\ndate: 2015-01-03 08:00:00\n---\n\n#### Windows下安装及使用Sublime Text2/3 插件XDebug Client\n\nsublime下配置xdebug,可以调试php程序，能够提高开发速度。今天花两个小时配置了xdebug，发现效率提升不少，更快地定位错误，提高解决问题的能力。以下是安装及使用步骤。\n\n#### 安装步骤\n\nstep1.sublime 安装xdebug client\n\n        ctrl+shift+p\n        install pacakage\n        xdebug client回车\n\nstep2.配置php xdebug：找到标签[XDebug],添加如下内容\n\n        xdebug.remote_enable = on\n        xdebug.remote_handler = \"dbgp\"\n        xdebug.remote_host = \"127.0.0.1\"\n        xdebug.remote_port = 9000 \n        zend_extension=\"D:\\Program Files\\phpStudy\\php53\\ext\\xdebug.dll\" //找到xdebug.dll的位置\n\nstep3.配置sublime xdebug\n\n点击sublime菜单栏的project->save project as,保存后会当前工程生成一个.sublime-project的文件，修改为如下：\n\n    {\n    \"folders\":\n    [\n        {\n            \"path\": \"/D/WWW\"\n        }\n    ],\n    \"settings\": \n    {\n        \"xdebug\": \n        {\n            \"path_mapping\": {   }, \n            \"url\": \"http://127.0.0.1/topic/uploadpic.php\", \n            \"super_globals\": true,  \n            \"close_on_stop\": true,  \n            \"port\": 9000 \n        }   \n     }\n   }\n\n 其中url为你当前要调试的页面，你调试什么页面就改成该页面的地址\n\n\n#### 使用步骤\n\nstep1.设置断点\n\n    在当前行代码标记：CTRL + F8\n\nstep2.打开调试面板\n\n    ctrl+shift+p，然后输入Xdebug, 选择下拉的Xdebug:Start Debugging(Launch Browser),就会在浏览器中打开刚才的url.\n\n![sublime](/assets/images/sublime.png)\n\nstep3.开始调试(可以在调试的过程中监控某些值)\n\n    Ctrl+F8: 切换断点；\n    Ctrl+Shift+F5: 运行到下一个断点；\n    Ctrl+Shift+F6: 单步；\n    Ctrl+Shift+F7: 步入；\n    Ctrl+Shift+F8: 步出 \n    Ctrl+Shift+F9: 开始调试 \n    Ctrl+Shift+F10: 关闭调试\n\n![sublime](/assets/images/setwatch.png)\n\n","slug":"Sublime下XDebug安装及使用","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwr300052o5pmqkw982b","content":"<h4 id=\"Windows下安装及使用Sublime-Text2-3-插件XDebug-Client\"><a href=\"#Windows下安装及使用Sublime-Text2-3-插件XDebug-Client\" class=\"headerlink\" title=\"Windows下安装及使用Sublime Text2/3 插件XDebug Client\"></a>Windows下安装及使用Sublime Text2/3 插件XDebug Client</h4><p>sublime下配置xdebug,可以调试php程序，能够提高开发速度。今天花两个小时配置了xdebug，发现效率提升不少，更快地定位错误，提高解决问题的能力。以下是安装及使用步骤。</p>\n<h4 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h4><p>step1.sublime 安装xdebug client</p>\n<pre><code>ctrl+shift+p\ninstall pacakage\nxdebug client回车\n</code></pre><p>step2.配置php xdebug：找到标签[XDebug],添加如下内容</p>\n<pre><code>xdebug.remote_enable = on\nxdebug.remote_handler = &quot;dbgp&quot;\nxdebug.remote_host = &quot;127.0.0.1&quot;\nxdebug.remote_port = 9000 \nzend_extension=&quot;D:\\Program Files\\phpStudy\\php53\\ext\\xdebug.dll&quot; //找到xdebug.dll的位置\n</code></pre><p>step3.配置sublime xdebug</p>\n<p>点击sublime菜单栏的project-&gt;save project as,保存后会当前工程生成一个.sublime-project的文件，修改为如下：</p>\n<pre><code>{\n&quot;folders&quot;:\n[\n    {\n        &quot;path&quot;: &quot;/D/WWW&quot;\n    }\n],\n&quot;settings&quot;: \n{\n    &quot;xdebug&quot;: \n    {\n        &quot;path_mapping&quot;: {   }, \n        &quot;url&quot;: &quot;http://127.0.0.1/topic/uploadpic.php&quot;, \n        &quot;super_globals&quot;: true,  \n        &quot;close_on_stop&quot;: true,  \n        &quot;port&quot;: 9000 \n    }   \n }\n</code></pre><p>   }</p>\n<p> 其中url为你当前要调试的页面，你调试什么页面就改成该页面的地址</p>\n<h4 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h4><p>step1.设置断点</p>\n<pre><code>在当前行代码标记：CTRL + F8\n</code></pre><p>step2.打开调试面板</p>\n<pre><code>ctrl+shift+p，然后输入Xdebug, 选择下拉的Xdebug:Start Debugging(Launch Browser),就会在浏览器中打开刚才的url.\n</code></pre><p><img src=\"/assets/images/sublime.png\" alt=\"sublime\"></p>\n<p>step3.开始调试(可以在调试的过程中监控某些值)</p>\n<pre><code>Ctrl+F8: 切换断点；\nCtrl+Shift+F5: 运行到下一个断点；\nCtrl+Shift+F6: 单步；\nCtrl+Shift+F7: 步入；\nCtrl+Shift+F8: 步出 \nCtrl+Shift+F9: 开始调试 \nCtrl+Shift+F10: 关闭调试\n</code></pre><p><img src=\"/assets/images/setwatch.png\" alt=\"sublime\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Windows下安装及使用Sublime-Text2-3-插件XDebug-Client\"><a href=\"#Windows下安装及使用Sublime-Text2-3-插件XDebug-Client\" class=\"headerlink\" title=\"Windows下安装及使用Sublime Text2/3 插件XDebug Client\"></a>Windows下安装及使用Sublime Text2/3 插件XDebug Client</h4><p>sublime下配置xdebug,可以调试php程序，能够提高开发速度。今天花两个小时配置了xdebug，发现效率提升不少，更快地定位错误，提高解决问题的能力。以下是安装及使用步骤。</p>\n<h4 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h4><p>step1.sublime 安装xdebug client</p>\n<pre><code>ctrl+shift+p\ninstall pacakage\nxdebug client回车\n</code></pre><p>step2.配置php xdebug：找到标签[XDebug],添加如下内容</p>\n<pre><code>xdebug.remote_enable = on\nxdebug.remote_handler = &quot;dbgp&quot;\nxdebug.remote_host = &quot;127.0.0.1&quot;\nxdebug.remote_port = 9000 \nzend_extension=&quot;D:\\Program Files\\phpStudy\\php53\\ext\\xdebug.dll&quot; //找到xdebug.dll的位置\n</code></pre><p>step3.配置sublime xdebug</p>\n<p>点击sublime菜单栏的project-&gt;save project as,保存后会当前工程生成一个.sublime-project的文件，修改为如下：</p>\n<pre><code>{\n&quot;folders&quot;:\n[\n    {\n        &quot;path&quot;: &quot;/D/WWW&quot;\n    }\n],\n&quot;settings&quot;: \n{\n    &quot;xdebug&quot;: \n    {\n        &quot;path_mapping&quot;: {   }, \n        &quot;url&quot;: &quot;http://127.0.0.1/topic/uploadpic.php&quot;, \n        &quot;super_globals&quot;: true,  \n        &quot;close_on_stop&quot;: true,  \n        &quot;port&quot;: 9000 \n    }   \n }\n</code></pre><p>   }</p>\n<p> 其中url为你当前要调试的页面，你调试什么页面就改成该页面的地址</p>\n<h4 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h4><p>step1.设置断点</p>\n<pre><code>在当前行代码标记：CTRL + F8\n</code></pre><p>step2.打开调试面板</p>\n<pre><code>ctrl+shift+p，然后输入Xdebug, 选择下拉的Xdebug:Start Debugging(Launch Browser),就会在浏览器中打开刚才的url.\n</code></pre><p><img src=\"/assets/images/sublime.png\" alt=\"sublime\"></p>\n<p>step3.开始调试(可以在调试的过程中监控某些值)</p>\n<pre><code>Ctrl+F8: 切换断点；\nCtrl+Shift+F5: 运行到下一个断点；\nCtrl+Shift+F6: 单步；\nCtrl+Shift+F7: 步入；\nCtrl+Shift+F8: 步出 \nCtrl+Shift+F9: 开始调试 \nCtrl+Shift+F10: 关闭调试\n</code></pre><p><img src=\"/assets/images/setwatch.png\" alt=\"sublime\"></p>\n"},{"title":"TargetInvocationException异常","date":"2014-10-31T00:00:00.000Z","_content":"\n### 未处理TargetInvocationException，调用的目标发生了异常\n\n今天在使用数据库表实体类映射的时候，出现TargetInvocationException错误，单步调试也没能找出问题来源。\n\n后面才知道因为版本的原因，类名发生冲突，导致实例化的类并没用调用到相应的构造函数，导致接收数据失败。\n<!-- more -->\n\n写在博客上，以防后面再出这样的错误：\n\n![蔡金林的博客](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/voteresult.png)\n\n重命名类名后，可以发现实例化后的对象，具有与数据库字段相匹配的属性：\n\n![蔡金林的博客](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/votebug.png)","source":"_posts/TargetInvocationException异常.md","raw":"---\ntitle: TargetInvocationException异常\ntags: []\ndate: 2014-10-31 08:00:00\n---\n\n### 未处理TargetInvocationException，调用的目标发生了异常\n\n今天在使用数据库表实体类映射的时候，出现TargetInvocationException错误，单步调试也没能找出问题来源。\n\n后面才知道因为版本的原因，类名发生冲突，导致实例化的类并没用调用到相应的构造函数，导致接收数据失败。\n<!-- more -->\n\n写在博客上，以防后面再出这样的错误：\n\n![蔡金林的博客](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/voteresult.png)\n\n重命名类名后，可以发现实例化后的对象，具有与数据库字段相匹配的属性：\n\n![蔡金林的博客](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/votebug.png)","slug":"TargetInvocationException异常","published":1,"updated":"2017-03-08T15:19:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwr500062o5pn97mde68","content":"<h3 id=\"未处理TargetInvocationException，调用的目标发生了异常\"><a href=\"#未处理TargetInvocationException，调用的目标发生了异常\" class=\"headerlink\" title=\"未处理TargetInvocationException，调用的目标发生了异常\"></a>未处理TargetInvocationException，调用的目标发生了异常</h3><p>今天在使用数据库表实体类映射的时候，出现TargetInvocationException错误，单步调试也没能找出问题来源。</p>\n<p>后面才知道因为版本的原因，类名发生冲突，导致实例化的类并没用调用到相应的构造函数，导致接收数据失败。<br><a id=\"more\"></a></p>\n<p>写在博客上，以防后面再出这样的错误：</p>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/voteresult.png\" alt=\"蔡金林的博客\"></p>\n<p>重命名类名后，可以发现实例化后的对象，具有与数据库字段相匹配的属性：</p>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/votebug.png\" alt=\"蔡金林的博客\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"未处理TargetInvocationException，调用的目标发生了异常\"><a href=\"#未处理TargetInvocationException，调用的目标发生了异常\" class=\"headerlink\" title=\"未处理TargetInvocationException，调用的目标发生了异常\"></a>未处理TargetInvocationException，调用的目标发生了异常</h3><p>今天在使用数据库表实体类映射的时候，出现TargetInvocationException错误，单步调试也没能找出问题来源。</p>\n<p>后面才知道因为版本的原因，类名发生冲突，导致实例化的类并没用调用到相应的构造函数，导致接收数据失败。<br>","more":"</p>\n<p>写在博客上，以防后面再出这样的错误：</p>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/voteresult.png\" alt=\"蔡金林的博客\"></p>\n<p>重命名类名后，可以发现实例化后的对象，具有与数据库字段相匹配的属性：</p>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/votebug.png\" alt=\"蔡金林的博客\"></p>"},{"title":"Sublime函数跳转插件Ctags安装及使用","date":"2014-12-11T00:00:00.000Z","_content":"\n### Windows下安装及使用Sublime Text2/3 插件Ctags\n\nsublime确实是一款非常不错的开发软件，用起来很爽，里面集成了很多插件，只要安装即可，\n介绍下sublime中ctags插件的安装，安装这个插件之后就可以快速定位某函数了，非常方便。\n\n#### 安装步骤\n\n\t1.下载并解压(http://pan.baidu.com/s/1o6umSjg)ctags包</a>中的ctags.exe到系统环境路径（默认压缩在c:\\windows\\system32就好了） \n\t2.若没安装package control在这个插件的话，先安装它。\n\t3.现在安装开始ctags的插件了，在package control中选择install package，搜索ctags就能找到ctags的插件，安装之。\n\t4.然后在项目目录下右键选择“Ctags:Rebuild Tags” ，就生成了.tags文件，那么这个时候就可以定位函数了。(具体参考https://github.com/SublimeText/CTags#additional-setup-steps)官方API</a>\n\n#### 使用步骤\n\n\t1.跳转进入：ctrl+t, ctrl+t\n\t2.退出返回：ctrl+t, ctrl+b","source":"_posts/Sublime函数跳转插件Ctags安装及使用.md","raw":"---\ntitle: Sublime函数跳转插件Ctags安装及使用\ntags: []\ndate: 2014-12-11 08:00:00\n---\n\n### Windows下安装及使用Sublime Text2/3 插件Ctags\n\nsublime确实是一款非常不错的开发软件，用起来很爽，里面集成了很多插件，只要安装即可，\n介绍下sublime中ctags插件的安装，安装这个插件之后就可以快速定位某函数了，非常方便。\n\n#### 安装步骤\n\n\t1.下载并解压(http://pan.baidu.com/s/1o6umSjg)ctags包</a>中的ctags.exe到系统环境路径（默认压缩在c:\\windows\\system32就好了） \n\t2.若没安装package control在这个插件的话，先安装它。\n\t3.现在安装开始ctags的插件了，在package control中选择install package，搜索ctags就能找到ctags的插件，安装之。\n\t4.然后在项目目录下右键选择“Ctags:Rebuild Tags” ，就生成了.tags文件，那么这个时候就可以定位函数了。(具体参考https://github.com/SublimeText/CTags#additional-setup-steps)官方API</a>\n\n#### 使用步骤\n\n\t1.跳转进入：ctrl+t, ctrl+t\n\t2.退出返回：ctrl+t, ctrl+b","slug":"Sublime函数跳转插件Ctags安装及使用","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwr700072o5p293dvnnv","content":"<h3 id=\"Windows下安装及使用Sublime-Text2-3-插件Ctags\"><a href=\"#Windows下安装及使用Sublime-Text2-3-插件Ctags\" class=\"headerlink\" title=\"Windows下安装及使用Sublime Text2/3 插件Ctags\"></a>Windows下安装及使用Sublime Text2/3 插件Ctags</h3><p>sublime确实是一款非常不错的开发软件，用起来很爽，里面集成了很多插件，只要安装即可，<br>介绍下sublime中ctags插件的安装，安装这个插件之后就可以快速定位某函数了，非常方便。</p>\n<h4 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h4><pre><code>1.下载并解压(http://pan.baidu.com/s/1o6umSjg)ctags包&lt;/a&gt;中的ctags.exe到系统环境路径（默认压缩在c:\\windows\\system32就好了） \n2.若没安装package control在这个插件的话，先安装它。\n3.现在安装开始ctags的插件了，在package control中选择install package，搜索ctags就能找到ctags的插件，安装之。\n4.然后在项目目录下右键选择“Ctags:Rebuild Tags” ，就生成了.tags文件，那么这个时候就可以定位函数了。(具体参考https://github.com/SublimeText/CTags#additional-setup-steps)官方API&lt;/a&gt;\n</code></pre><h4 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h4><pre><code>1.跳转进入：ctrl+t, ctrl+t\n2.退出返回：ctrl+t, ctrl+b\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Windows下安装及使用Sublime-Text2-3-插件Ctags\"><a href=\"#Windows下安装及使用Sublime-Text2-3-插件Ctags\" class=\"headerlink\" title=\"Windows下安装及使用Sublime Text2/3 插件Ctags\"></a>Windows下安装及使用Sublime Text2/3 插件Ctags</h3><p>sublime确实是一款非常不错的开发软件，用起来很爽，里面集成了很多插件，只要安装即可，<br>介绍下sublime中ctags插件的安装，安装这个插件之后就可以快速定位某函数了，非常方便。</p>\n<h4 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h4><pre><code>1.下载并解压(http://pan.baidu.com/s/1o6umSjg)ctags包&lt;/a&gt;中的ctags.exe到系统环境路径（默认压缩在c:\\windows\\system32就好了） \n2.若没安装package control在这个插件的话，先安装它。\n3.现在安装开始ctags的插件了，在package control中选择install package，搜索ctags就能找到ctags的插件，安装之。\n4.然后在项目目录下右键选择“Ctags:Rebuild Tags” ，就生成了.tags文件，那么这个时候就可以定位函数了。(具体参考https://github.com/SublimeText/CTags#additional-setup-steps)官方API&lt;/a&gt;\n</code></pre><h4 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h4><pre><code>1.跳转进入：ctrl+t, ctrl+t\n2.退出返回：ctrl+t, ctrl+b\n</code></pre>"},{"title":"ajax同步和异步问题","date":"2014-11-04T00:00:00.000Z","_content":"\najax同步和异步问题\n\n今天在写写js代码的时候遇到AJAX加载数据都需要考虑代码运行顺序问题。最近的项目用了到AJAX同步。这个同步的意思是当JS代码加载到当前AJAX的时候会把页面里所有的代码停止加载，当这个AJAX执行完毕后才会继续运行ajax后面的其他代码（相当于单线程，代码顺序执行），页面假死状态解除。 \n\n\t\n而异步则这个AJAX代码运行中的时候，ajax后面其他代码一样可以同时运行，相当于多线程（线程之间同步执行，线程内部顺序执行）。 \n\njquery的async:false,这个属性 默认是true：异步，false：同步。\n\n    $.ajax({ \n          type: \"post\", \n          url: \"path\", \n          cache:false, \n          async:false, \n          dataType: \"json\", \n          success: function(data){ } \n    });\n\n\n在这里，async默认的设置值为true，这种情况为异步方式，就是说当ajax发送请求后，在等待server端返回的这个过程中，前台会继续 执行ajax块后面的脚本，直到server端返回正确的结果才会去执行success，也就是说这时候执行的是两个线程，ajax块发出请求后一个线程 和ajax块后面的脚本（另一个线程）例：\n\n    $.ajax({  \n      type:\"POST\", \n      url:\"del.aspx\", \n      dataType:\"html\", \n      success:function(result){   //function1()\n      f1(); \n      f2(); \n      }\n      failure:function (result) { \n        alert('Failed');  \n      },\n    } \n    function2(); \n\n在上例中，当ajax块发出请求后，他将停留function1()等待server端的返回，但同时（在这个等待过程中），前台会去执行function2(),也就是说，在这个时候出现两个线程，我们这里暂且说为function1() 和function2()。\n\n当把asyn设为false时，这时ajax的请求时同步的，也就是说，这个时候ajax块发出请求后，他会等待在function1（）这个地方，不会去执行function2()，知道function1()部分执行完毕        \n\n#### 总结:如果ajax块请求对后面代码无影响时，可用异步；如果ajax块请求对后面代码有影响，或者存在数据交换，可用同步\n\n\n","source":"_posts/ajax同步和异步问题.md","raw":"---\ntitle: ajax同步和异步问题\ntags: []\ndate: 2014-11-04 08:00:00\n---\n\najax同步和异步问题\n\n今天在写写js代码的时候遇到AJAX加载数据都需要考虑代码运行顺序问题。最近的项目用了到AJAX同步。这个同步的意思是当JS代码加载到当前AJAX的时候会把页面里所有的代码停止加载，当这个AJAX执行完毕后才会继续运行ajax后面的其他代码（相当于单线程，代码顺序执行），页面假死状态解除。 \n\n\t\n而异步则这个AJAX代码运行中的时候，ajax后面其他代码一样可以同时运行，相当于多线程（线程之间同步执行，线程内部顺序执行）。 \n\njquery的async:false,这个属性 默认是true：异步，false：同步。\n\n    $.ajax({ \n          type: \"post\", \n          url: \"path\", \n          cache:false, \n          async:false, \n          dataType: \"json\", \n          success: function(data){ } \n    });\n\n\n在这里，async默认的设置值为true，这种情况为异步方式，就是说当ajax发送请求后，在等待server端返回的这个过程中，前台会继续 执行ajax块后面的脚本，直到server端返回正确的结果才会去执行success，也就是说这时候执行的是两个线程，ajax块发出请求后一个线程 和ajax块后面的脚本（另一个线程）例：\n\n    $.ajax({  \n      type:\"POST\", \n      url:\"del.aspx\", \n      dataType:\"html\", \n      success:function(result){   //function1()\n      f1(); \n      f2(); \n      }\n      failure:function (result) { \n        alert('Failed');  \n      },\n    } \n    function2(); \n\n在上例中，当ajax块发出请求后，他将停留function1()等待server端的返回，但同时（在这个等待过程中），前台会去执行function2(),也就是说，在这个时候出现两个线程，我们这里暂且说为function1() 和function2()。\n\n当把asyn设为false时，这时ajax的请求时同步的，也就是说，这个时候ajax块发出请求后，他会等待在function1（）这个地方，不会去执行function2()，知道function1()部分执行完毕        \n\n#### 总结:如果ajax块请求对后面代码无影响时，可用异步；如果ajax块请求对后面代码有影响，或者存在数据交换，可用同步\n\n\n","slug":"ajax同步和异步问题","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwrc00082o5pvolvflzj","content":"<p>ajax同步和异步问题</p>\n<p>今天在写写js代码的时候遇到AJAX加载数据都需要考虑代码运行顺序问题。最近的项目用了到AJAX同步。这个同步的意思是当JS代码加载到当前AJAX的时候会把页面里所有的代码停止加载，当这个AJAX执行完毕后才会继续运行ajax后面的其他代码（相当于单线程，代码顺序执行），页面假死状态解除。 </p>\n<p>而异步则这个AJAX代码运行中的时候，ajax后面其他代码一样可以同时运行，相当于多线程（线程之间同步执行，线程内部顺序执行）。 </p>\n<p>jquery的async:false,这个属性 默认是true：异步，false：同步。</p>\n<pre><code>$.ajax({ \n      type: &quot;post&quot;, \n      url: &quot;path&quot;, \n      cache:false, \n      async:false, \n      dataType: &quot;json&quot;, \n      success: function(data){ } \n});\n</code></pre><p>在这里，async默认的设置值为true，这种情况为异步方式，就是说当ajax发送请求后，在等待server端返回的这个过程中，前台会继续 执行ajax块后面的脚本，直到server端返回正确的结果才会去执行success，也就是说这时候执行的是两个线程，ajax块发出请求后一个线程 和ajax块后面的脚本（另一个线程）例：</p>\n<pre><code>$.ajax({  \n  type:&quot;POST&quot;, \n  url:&quot;del.aspx&quot;, \n  dataType:&quot;html&quot;, \n  success:function(result){   //function1()\n  f1(); \n  f2(); \n  }\n  failure:function (result) { \n    alert(&apos;Failed&apos;);  \n  },\n} \nfunction2(); \n</code></pre><p>在上例中，当ajax块发出请求后，他将停留function1()等待server端的返回，但同时（在这个等待过程中），前台会去执行function2(),也就是说，在这个时候出现两个线程，我们这里暂且说为function1() 和function2()。</p>\n<p>当把asyn设为false时，这时ajax的请求时同步的，也就是说，这个时候ajax块发出请求后，他会等待在function1（）这个地方，不会去执行function2()，知道function1()部分执行完毕        </p>\n<h4 id=\"总结-如果ajax块请求对后面代码无影响时，可用异步；如果ajax块请求对后面代码有影响，或者存在数据交换，可用同步\"><a href=\"#总结-如果ajax块请求对后面代码无影响时，可用异步；如果ajax块请求对后面代码有影响，或者存在数据交换，可用同步\" class=\"headerlink\" title=\"总结:如果ajax块请求对后面代码无影响时，可用异步；如果ajax块请求对后面代码有影响，或者存在数据交换，可用同步\"></a>总结:如果ajax块请求对后面代码无影响时，可用异步；如果ajax块请求对后面代码有影响，或者存在数据交换，可用同步</h4>","site":{"data":{}},"excerpt":"","more":"<p>ajax同步和异步问题</p>\n<p>今天在写写js代码的时候遇到AJAX加载数据都需要考虑代码运行顺序问题。最近的项目用了到AJAX同步。这个同步的意思是当JS代码加载到当前AJAX的时候会把页面里所有的代码停止加载，当这个AJAX执行完毕后才会继续运行ajax后面的其他代码（相当于单线程，代码顺序执行），页面假死状态解除。 </p>\n<p>而异步则这个AJAX代码运行中的时候，ajax后面其他代码一样可以同时运行，相当于多线程（线程之间同步执行，线程内部顺序执行）。 </p>\n<p>jquery的async:false,这个属性 默认是true：异步，false：同步。</p>\n<pre><code>$.ajax({ \n      type: &quot;post&quot;, \n      url: &quot;path&quot;, \n      cache:false, \n      async:false, \n      dataType: &quot;json&quot;, \n      success: function(data){ } \n});\n</code></pre><p>在这里，async默认的设置值为true，这种情况为异步方式，就是说当ajax发送请求后，在等待server端返回的这个过程中，前台会继续 执行ajax块后面的脚本，直到server端返回正确的结果才会去执行success，也就是说这时候执行的是两个线程，ajax块发出请求后一个线程 和ajax块后面的脚本（另一个线程）例：</p>\n<pre><code>$.ajax({  \n  type:&quot;POST&quot;, \n  url:&quot;del.aspx&quot;, \n  dataType:&quot;html&quot;, \n  success:function(result){   //function1()\n  f1(); \n  f2(); \n  }\n  failure:function (result) { \n    alert(&apos;Failed&apos;);  \n  },\n} \nfunction2(); \n</code></pre><p>在上例中，当ajax块发出请求后，他将停留function1()等待server端的返回，但同时（在这个等待过程中），前台会去执行function2(),也就是说，在这个时候出现两个线程，我们这里暂且说为function1() 和function2()。</p>\n<p>当把asyn设为false时，这时ajax的请求时同步的，也就是说，这个时候ajax块发出请求后，他会等待在function1（）这个地方，不会去执行function2()，知道function1()部分执行完毕        </p>\n<h4 id=\"总结-如果ajax块请求对后面代码无影响时，可用异步；如果ajax块请求对后面代码有影响，或者存在数据交换，可用同步\"><a href=\"#总结-如果ajax块请求对后面代码无影响时，可用异步；如果ajax块请求对后面代码有影响，或者存在数据交换，可用同步\" class=\"headerlink\" title=\"总结:如果ajax块请求对后面代码无影响时，可用异步；如果ajax块请求对后面代码有影响，或者存在数据交换，可用同步\"></a>总结:如果ajax块请求对后面代码无影响时，可用异步；如果ajax块请求对后面代码有影响，或者存在数据交换，可用同步</h4>"},{"title":"贪心算法","date":"2015-03-07T14:01:34.000Z","_content":"\n### 贪心算法（自顶向下，局部最优）\n\n贪心算法（又称贪婪算法）：在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，但对范围相当广泛的许多问题他能产生整体最优解或者是整体最优解的近似解。\n\n#### 贪心算法的基本思想\n\n找出整体当中每个小的局部的最优解，并且将所有的这些局部最优解合起来形成整体上的一个最优解。\n\n#### 贪心选择性质\n\n    1.整体的最优解可以通过局部的最优解来求出；\n    2.一个整体能够被分为多个局部，并且这些局部都能够求出最优解。\n\n使用贪心算法当中的两个典型问题是活动安排问题和背包问题。\n\n#### 贪心算法的基本步骤\n\n    1、从问题的某个初始解出发。\n    2、采用循环语句，当可以向求解目标前进一步时，就根据局部最优策略，得到一个部分解，缩小问题的范围或规模。\n    3、将所有部分解综合起来，得到问题的最终解。\n\n#### 经典案例:活动安排问题,背包等\n\n![背包问题](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/backpack.png-scale600)\n\n#### 案例分析:平衡负载\n\n2013年百度之星区域赛中的第一题”平衡负载”，主要就利用贪心进行分段，在我们理工的acm平台上有这道题，闲着也是闲着，贴出这道题自己的c++版本code。\n\n平衡负载\n\nDu熊正在负责一个大型的项目，目前有K台服务器，有N个任务需要用这K台服务器来完成，所以要把这些任务分成K个部分来完成，在同上台服务器上执行的任务必须是连续的任务，每个任务有各自需要的执行时间。\n例如N=5,K=2，每个任务需要时间分别为5,3,1,4,7分钟，那么我们可以分成(5)(3 1 4 7)两部分，这样第一台服务器所花时间就是5分钟，而第二台机器需要花15分钟，当然，所有任务完成的时间是按最迟完成的那台服务器的时间，即这样划分的话完成所有任务所需要的时间就是15分钟。而另外一种划分方法是(5 3 1)(4 7)，这种划分方案完成所有任务的时间就是11分钟，也是最优的一种划分方案。\n现在你的任务就是根据给定的N,K和每个任务要花费的时间，找出使完成所有任务时间最短的方案。\n\n输入：多组输入。\n\n第一行输入N和K（1<=K<=N<=10000）。\n\n第二行输入N个不大于1000的正整数，表示各个任要花费的时间。N=K=0表示输入结束。\n\n输出：\n\n每行输出一个整数，对应对于每个数据（除了N=K=0不用输出）。\n\n样例输入：\n\n    5 1\n    5 3 1 4 7\n    5 2\n    5 3 1 4 7\n    5 3\n\n#### 算法实现code\n\n    #include<stdio.h>\n    #include<iostream>\n    using namespace std;\n    int a[10005];\n    bool check(int a[], int k,int m, int n) //数组，分k段,用来分段的m值,数组个数（检测m值是否可以将数组分为k段）\n    {\n        int i,sum=0,count=0;\n        for(i=0;i<n;i++)\n        {\n            sum+=a[i];//前i项求和\n            if(sum>m) //若超过m值，则前i-1项分为一段,重新寻求下一段，同时段数加1\n            {\n                sum=a[i];\n                count++;\n            }\n        }\n        count++;//加上最后一段\n        return count<=k;\n    }\n    int main()\n    {\n        int i=0,j=0,n,k,l,r,mid=0;\n        while(cin>>n>>k&&n!=0&&k!=0)\n        {\n           l=0;//最左边\n           r=0;//最右边\n           for(i=0;i<n;i++)\n           {\n               cin>>a[i];\n               r+=a[i];\n           }\n           while(l<r)\n           {\n               mid=(l+r)/2;\n               if(check(a,k,mid,n)) //m值分段数小于k，则要分段的m值应该减少，承受的项的个数更少，段数增加\n               {\n                  r=mid;\n               }\n               else //m值分段数大于k，则要分段的m值应该增加，可承受更多项的和，段数减少\n               {\n                  l=mid+1;\n               }\n           }\n           printf(\"%d\\n\",l);//输出时间\n        }\n        return 0;\n    }\n","source":"_posts/algorithm-greedy.md","raw":"---\ntitle: 贪心算法\ndate: 2015-03-07 22:01:34\ntags: [algorithm]\ncategories: algorithm\n---\n\n### 贪心算法（自顶向下，局部最优）\n\n贪心算法（又称贪婪算法）：在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，但对范围相当广泛的许多问题他能产生整体最优解或者是整体最优解的近似解。\n\n#### 贪心算法的基本思想\n\n找出整体当中每个小的局部的最优解，并且将所有的这些局部最优解合起来形成整体上的一个最优解。\n\n#### 贪心选择性质\n\n    1.整体的最优解可以通过局部的最优解来求出；\n    2.一个整体能够被分为多个局部，并且这些局部都能够求出最优解。\n\n使用贪心算法当中的两个典型问题是活动安排问题和背包问题。\n\n#### 贪心算法的基本步骤\n\n    1、从问题的某个初始解出发。\n    2、采用循环语句，当可以向求解目标前进一步时，就根据局部最优策略，得到一个部分解，缩小问题的范围或规模。\n    3、将所有部分解综合起来，得到问题的最终解。\n\n#### 经典案例:活动安排问题,背包等\n\n![背包问题](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/backpack.png-scale600)\n\n#### 案例分析:平衡负载\n\n2013年百度之星区域赛中的第一题”平衡负载”，主要就利用贪心进行分段，在我们理工的acm平台上有这道题，闲着也是闲着，贴出这道题自己的c++版本code。\n\n平衡负载\n\nDu熊正在负责一个大型的项目，目前有K台服务器，有N个任务需要用这K台服务器来完成，所以要把这些任务分成K个部分来完成，在同上台服务器上执行的任务必须是连续的任务，每个任务有各自需要的执行时间。\n例如N=5,K=2，每个任务需要时间分别为5,3,1,4,7分钟，那么我们可以分成(5)(3 1 4 7)两部分，这样第一台服务器所花时间就是5分钟，而第二台机器需要花15分钟，当然，所有任务完成的时间是按最迟完成的那台服务器的时间，即这样划分的话完成所有任务所需要的时间就是15分钟。而另外一种划分方法是(5 3 1)(4 7)，这种划分方案完成所有任务的时间就是11分钟，也是最优的一种划分方案。\n现在你的任务就是根据给定的N,K和每个任务要花费的时间，找出使完成所有任务时间最短的方案。\n\n输入：多组输入。\n\n第一行输入N和K（1<=K<=N<=10000）。\n\n第二行输入N个不大于1000的正整数，表示各个任要花费的时间。N=K=0表示输入结束。\n\n输出：\n\n每行输出一个整数，对应对于每个数据（除了N=K=0不用输出）。\n\n样例输入：\n\n    5 1\n    5 3 1 4 7\n    5 2\n    5 3 1 4 7\n    5 3\n\n#### 算法实现code\n\n    #include<stdio.h>\n    #include<iostream>\n    using namespace std;\n    int a[10005];\n    bool check(int a[], int k,int m, int n) //数组，分k段,用来分段的m值,数组个数（检测m值是否可以将数组分为k段）\n    {\n        int i,sum=0,count=0;\n        for(i=0;i<n;i++)\n        {\n            sum+=a[i];//前i项求和\n            if(sum>m) //若超过m值，则前i-1项分为一段,重新寻求下一段，同时段数加1\n            {\n                sum=a[i];\n                count++;\n            }\n        }\n        count++;//加上最后一段\n        return count<=k;\n    }\n    int main()\n    {\n        int i=0,j=0,n,k,l,r,mid=0;\n        while(cin>>n>>k&&n!=0&&k!=0)\n        {\n           l=0;//最左边\n           r=0;//最右边\n           for(i=0;i<n;i++)\n           {\n               cin>>a[i];\n               r+=a[i];\n           }\n           while(l<r)\n           {\n               mid=(l+r)/2;\n               if(check(a,k,mid,n)) //m值分段数小于k，则要分段的m值应该减少，承受的项的个数更少，段数增加\n               {\n                  r=mid;\n               }\n               else //m值分段数大于k，则要分段的m值应该增加，可承受更多项的和，段数减少\n               {\n                  l=mid+1;\n               }\n           }\n           printf(\"%d\\n\",l);//输出时间\n        }\n        return 0;\n    }\n","slug":"algorithm-greedy","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwrd00092o5p8bwgmxzu","content":"<h3 id=\"贪心算法（自顶向下，局部最优）\"><a href=\"#贪心算法（自顶向下，局部最优）\" class=\"headerlink\" title=\"贪心算法（自顶向下，局部最优）\"></a>贪心算法（自顶向下，局部最优）</h3><p>贪心算法（又称贪婪算法）：在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，但对范围相当广泛的许多问题他能产生整体最优解或者是整体最优解的近似解。</p>\n<h4 id=\"贪心算法的基本思想\"><a href=\"#贪心算法的基本思想\" class=\"headerlink\" title=\"贪心算法的基本思想\"></a>贪心算法的基本思想</h4><p>找出整体当中每个小的局部的最优解，并且将所有的这些局部最优解合起来形成整体上的一个最优解。</p>\n<h4 id=\"贪心选择性质\"><a href=\"#贪心选择性质\" class=\"headerlink\" title=\"贪心选择性质\"></a>贪心选择性质</h4><pre><code>1.整体的最优解可以通过局部的最优解来求出；\n2.一个整体能够被分为多个局部，并且这些局部都能够求出最优解。\n</code></pre><p>使用贪心算法当中的两个典型问题是活动安排问题和背包问题。</p>\n<h4 id=\"贪心算法的基本步骤\"><a href=\"#贪心算法的基本步骤\" class=\"headerlink\" title=\"贪心算法的基本步骤\"></a>贪心算法的基本步骤</h4><pre><code>1、从问题的某个初始解出发。\n2、采用循环语句，当可以向求解目标前进一步时，就根据局部最优策略，得到一个部分解，缩小问题的范围或规模。\n3、将所有部分解综合起来，得到问题的最终解。\n</code></pre><h4 id=\"经典案例-活动安排问题-背包等\"><a href=\"#经典案例-活动安排问题-背包等\" class=\"headerlink\" title=\"经典案例:活动安排问题,背包等\"></a>经典案例:活动安排问题,背包等</h4><p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/backpack.png-scale600\" alt=\"背包问题\"></p>\n<h4 id=\"案例分析-平衡负载\"><a href=\"#案例分析-平衡负载\" class=\"headerlink\" title=\"案例分析:平衡负载\"></a>案例分析:平衡负载</h4><p>2013年百度之星区域赛中的第一题”平衡负载”，主要就利用贪心进行分段，在我们理工的acm平台上有这道题，闲着也是闲着，贴出这道题自己的c++版本code。</p>\n<p>平衡负载</p>\n<p>Du熊正在负责一个大型的项目，目前有K台服务器，有N个任务需要用这K台服务器来完成，所以要把这些任务分成K个部分来完成，在同上台服务器上执行的任务必须是连续的任务，每个任务有各自需要的执行时间。<br>例如N=5,K=2，每个任务需要时间分别为5,3,1,4,7分钟，那么我们可以分成(5)(3 1 4 7)两部分，这样第一台服务器所花时间就是5分钟，而第二台机器需要花15分钟，当然，所有任务完成的时间是按最迟完成的那台服务器的时间，即这样划分的话完成所有任务所需要的时间就是15分钟。而另外一种划分方法是(5 3 1)(4 7)，这种划分方案完成所有任务的时间就是11分钟，也是最优的一种划分方案。<br>现在你的任务就是根据给定的N,K和每个任务要花费的时间，找出使完成所有任务时间最短的方案。</p>\n<p>输入：多组输入。</p>\n<p>第一行输入N和K（1&lt;=K&lt;=N&lt;=10000）。</p>\n<p>第二行输入N个不大于1000的正整数，表示各个任要花费的时间。N=K=0表示输入结束。</p>\n<p>输出：</p>\n<p>每行输出一个整数，对应对于每个数据（除了N=K=0不用输出）。</p>\n<p>样例输入：</p>\n<pre><code>5 1\n5 3 1 4 7\n5 2\n5 3 1 4 7\n5 3\n</code></pre><h4 id=\"算法实现code\"><a href=\"#算法实现code\" class=\"headerlink\" title=\"算法实现code\"></a>算法实现code</h4><pre><code>#include&lt;stdio.h&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nint a[10005];\nbool check(int a[], int k,int m, int n) //数组，分k段,用来分段的m值,数组个数（检测m值是否可以将数组分为k段）\n{\n    int i,sum=0,count=0;\n    for(i=0;i&lt;n;i++)\n    {\n        sum+=a[i];//前i项求和\n        if(sum&gt;m) //若超过m值，则前i-1项分为一段,重新寻求下一段，同时段数加1\n        {\n            sum=a[i];\n            count++;\n        }\n    }\n    count++;//加上最后一段\n    return count&lt;=k;\n}\nint main()\n{\n    int i=0,j=0,n,k,l,r,mid=0;\n    while(cin&gt;&gt;n&gt;&gt;k&amp;&amp;n!=0&amp;&amp;k!=0)\n    {\n       l=0;//最左边\n       r=0;//最右边\n       for(i=0;i&lt;n;i++)\n       {\n           cin&gt;&gt;a[i];\n           r+=a[i];\n       }\n       while(l&lt;r)\n       {\n           mid=(l+r)/2;\n           if(check(a,k,mid,n)) //m值分段数小于k，则要分段的m值应该减少，承受的项的个数更少，段数增加\n           {\n              r=mid;\n           }\n           else //m值分段数大于k，则要分段的m值应该增加，可承受更多项的和，段数减少\n           {\n              l=mid+1;\n           }\n       }\n       printf(&quot;%d\\n&quot;,l);//输出时间\n    }\n    return 0;\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"贪心算法（自顶向下，局部最优）\"><a href=\"#贪心算法（自顶向下，局部最优）\" class=\"headerlink\" title=\"贪心算法（自顶向下，局部最优）\"></a>贪心算法（自顶向下，局部最优）</h3><p>贪心算法（又称贪婪算法）：在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，但对范围相当广泛的许多问题他能产生整体最优解或者是整体最优解的近似解。</p>\n<h4 id=\"贪心算法的基本思想\"><a href=\"#贪心算法的基本思想\" class=\"headerlink\" title=\"贪心算法的基本思想\"></a>贪心算法的基本思想</h4><p>找出整体当中每个小的局部的最优解，并且将所有的这些局部最优解合起来形成整体上的一个最优解。</p>\n<h4 id=\"贪心选择性质\"><a href=\"#贪心选择性质\" class=\"headerlink\" title=\"贪心选择性质\"></a>贪心选择性质</h4><pre><code>1.整体的最优解可以通过局部的最优解来求出；\n2.一个整体能够被分为多个局部，并且这些局部都能够求出最优解。\n</code></pre><p>使用贪心算法当中的两个典型问题是活动安排问题和背包问题。</p>\n<h4 id=\"贪心算法的基本步骤\"><a href=\"#贪心算法的基本步骤\" class=\"headerlink\" title=\"贪心算法的基本步骤\"></a>贪心算法的基本步骤</h4><pre><code>1、从问题的某个初始解出发。\n2、采用循环语句，当可以向求解目标前进一步时，就根据局部最优策略，得到一个部分解，缩小问题的范围或规模。\n3、将所有部分解综合起来，得到问题的最终解。\n</code></pre><h4 id=\"经典案例-活动安排问题-背包等\"><a href=\"#经典案例-活动安排问题-背包等\" class=\"headerlink\" title=\"经典案例:活动安排问题,背包等\"></a>经典案例:活动安排问题,背包等</h4><p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/backpack.png-scale600\" alt=\"背包问题\"></p>\n<h4 id=\"案例分析-平衡负载\"><a href=\"#案例分析-平衡负载\" class=\"headerlink\" title=\"案例分析:平衡负载\"></a>案例分析:平衡负载</h4><p>2013年百度之星区域赛中的第一题”平衡负载”，主要就利用贪心进行分段，在我们理工的acm平台上有这道题，闲着也是闲着，贴出这道题自己的c++版本code。</p>\n<p>平衡负载</p>\n<p>Du熊正在负责一个大型的项目，目前有K台服务器，有N个任务需要用这K台服务器来完成，所以要把这些任务分成K个部分来完成，在同上台服务器上执行的任务必须是连续的任务，每个任务有各自需要的执行时间。<br>例如N=5,K=2，每个任务需要时间分别为5,3,1,4,7分钟，那么我们可以分成(5)(3 1 4 7)两部分，这样第一台服务器所花时间就是5分钟，而第二台机器需要花15分钟，当然，所有任务完成的时间是按最迟完成的那台服务器的时间，即这样划分的话完成所有任务所需要的时间就是15分钟。而另外一种划分方法是(5 3 1)(4 7)，这种划分方案完成所有任务的时间就是11分钟，也是最优的一种划分方案。<br>现在你的任务就是根据给定的N,K和每个任务要花费的时间，找出使完成所有任务时间最短的方案。</p>\n<p>输入：多组输入。</p>\n<p>第一行输入N和K（1&lt;=K&lt;=N&lt;=10000）。</p>\n<p>第二行输入N个不大于1000的正整数，表示各个任要花费的时间。N=K=0表示输入结束。</p>\n<p>输出：</p>\n<p>每行输出一个整数，对应对于每个数据（除了N=K=0不用输出）。</p>\n<p>样例输入：</p>\n<pre><code>5 1\n5 3 1 4 7\n5 2\n5 3 1 4 7\n5 3\n</code></pre><h4 id=\"算法实现code\"><a href=\"#算法实现code\" class=\"headerlink\" title=\"算法实现code\"></a>算法实现code</h4><pre><code>#include&lt;stdio.h&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nint a[10005];\nbool check(int a[], int k,int m, int n) //数组，分k段,用来分段的m值,数组个数（检测m值是否可以将数组分为k段）\n{\n    int i,sum=0,count=0;\n    for(i=0;i&lt;n;i++)\n    {\n        sum+=a[i];//前i项求和\n        if(sum&gt;m) //若超过m值，则前i-1项分为一段,重新寻求下一段，同时段数加1\n        {\n            sum=a[i];\n            count++;\n        }\n    }\n    count++;//加上最后一段\n    return count&lt;=k;\n}\nint main()\n{\n    int i=0,j=0,n,k,l,r,mid=0;\n    while(cin&gt;&gt;n&gt;&gt;k&amp;&amp;n!=0&amp;&amp;k!=0)\n    {\n       l=0;//最左边\n       r=0;//最右边\n       for(i=0;i&lt;n;i++)\n       {\n           cin&gt;&gt;a[i];\n           r+=a[i];\n       }\n       while(l&lt;r)\n       {\n           mid=(l+r)/2;\n           if(check(a,k,mid,n)) //m值分段数小于k，则要分段的m值应该减少，承受的项的个数更少，段数增加\n           {\n              r=mid;\n           }\n           else //m值分段数大于k，则要分段的m值应该增加，可承受更多项的和，段数减少\n           {\n              l=mid+1;\n           }\n       }\n       printf(&quot;%d\\n&quot;,l);//输出时间\n    }\n    return 0;\n}\n</code></pre>"},{"title":"centos搭建reviewboard","date":"2015-02-15T00:00:00.000Z","_content":"\n### centos下搭建reviewboard\n\n<!-- more -->\n\n#### 安装apache,php,mysql,phpmyadmin,memcache\n\n  yum install httpd\n  yum install php\n  yum -y install mysql-server\n  yum  -y install memcached\n  yum  -y install phpmyadmin\n  service memcached restart\n  /etc/init.d/mysqld restart\n  /etc/init.d/httpd restart\n  cp -R /usr/share/phpMyAdmin/ /var/www/html/\n  #find deny from all and comment it in the entire file\n  vim /etc/init.d/httpd/phpmyadmin.conf\n\n\n#### 安装sendmail\n\n    yum -y install sendmail\n\n#### 安装EPEL软件包\n\n   wget http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\n   sudo rpm -ivh epel-release-6-8.noarch.rpm\n\n#### 安装reviewboard\n\n    yum -y install ReviewBoard\n\n#### 数据库\n\n  mysql -uroot -p123456;\n  create database reviewboard default charset utf8 collate utf8_general_ci;\n\n#### 创建站点\n  rb-site install /var/www/reviewboard\n  #更改文件拥有者为apache（web服务器）（在site创建完成时，会提示做如下更改）\n  chown -R apache /var/www/reviewboard/htdocs/media/uploaded\n  chown -R apache /var/www/reviewboard/htdocs/media/ext/\n  chown -R apache /var/www/reviewboard/data/\n  #将reviewboard的配置文件拷贝到apache配置文件下\n  # cp /var/www/reviewboard/conf/apache-wsgi.conf /etc/httpd/conf.d\n\n\n#### 重启apache\n\n  /etc/init.d/httpd restart\n\n#### reviewboard使用\n\n  如果添加repo的时候出现错误permission denied accessing the local Git repository, 可能原因是git仓库地址的权限问题，改下权限就行，以便apache用户组也能访问\n\n\n","source":"_posts/centos搭建reviewboard.md","raw":"---\ntitle: centos搭建reviewboard\ntags: []\ndate: 2015-02-15 08:00:00\n---\n\n### centos下搭建reviewboard\n\n<!-- more -->\n\n#### 安装apache,php,mysql,phpmyadmin,memcache\n\n  yum install httpd\n  yum install php\n  yum -y install mysql-server\n  yum  -y install memcached\n  yum  -y install phpmyadmin\n  service memcached restart\n  /etc/init.d/mysqld restart\n  /etc/init.d/httpd restart\n  cp -R /usr/share/phpMyAdmin/ /var/www/html/\n  #find deny from all and comment it in the entire file\n  vim /etc/init.d/httpd/phpmyadmin.conf\n\n\n#### 安装sendmail\n\n    yum -y install sendmail\n\n#### 安装EPEL软件包\n\n   wget http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\n   sudo rpm -ivh epel-release-6-8.noarch.rpm\n\n#### 安装reviewboard\n\n    yum -y install ReviewBoard\n\n#### 数据库\n\n  mysql -uroot -p123456;\n  create database reviewboard default charset utf8 collate utf8_general_ci;\n\n#### 创建站点\n  rb-site install /var/www/reviewboard\n  #更改文件拥有者为apache（web服务器）（在site创建完成时，会提示做如下更改）\n  chown -R apache /var/www/reviewboard/htdocs/media/uploaded\n  chown -R apache /var/www/reviewboard/htdocs/media/ext/\n  chown -R apache /var/www/reviewboard/data/\n  #将reviewboard的配置文件拷贝到apache配置文件下\n  # cp /var/www/reviewboard/conf/apache-wsgi.conf /etc/httpd/conf.d\n\n\n#### 重启apache\n\n  /etc/init.d/httpd restart\n\n#### reviewboard使用\n\n  如果添加repo的时候出现错误permission denied accessing the local Git repository, 可能原因是git仓库地址的权限问题，改下权限就行，以便apache用户组也能访问\n\n\n","slug":"centos搭建reviewboard","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwre000a2o5ph2uon8u7","content":"<h3 id=\"centos下搭建reviewboard\"><a href=\"#centos下搭建reviewboard\" class=\"headerlink\" title=\"centos下搭建reviewboard\"></a>centos下搭建reviewboard</h3><a id=\"more\"></a>\n<h4 id=\"安装apache-php-mysql-phpmyadmin-memcache\"><a href=\"#安装apache-php-mysql-phpmyadmin-memcache\" class=\"headerlink\" title=\"安装apache,php,mysql,phpmyadmin,memcache\"></a>安装apache,php,mysql,phpmyadmin,memcache</h4><p>  yum install httpd<br>  yum install php<br>  yum -y install mysql-server<br>  yum  -y install memcached<br>  yum  -y install phpmyadmin<br>  service memcached restart<br>  /etc/init.d/mysqld restart<br>  /etc/init.d/httpd restart<br>  cp -R /usr/share/phpMyAdmin/ /var/www/html/</p>\n<p>  #find deny from all and comment it in the entire file<br>  vim /etc/init.d/httpd/phpmyadmin.conf</p>\n<h4 id=\"安装sendmail\"><a href=\"#安装sendmail\" class=\"headerlink\" title=\"安装sendmail\"></a>安装sendmail</h4><pre><code>yum -y install sendmail\n</code></pre><h4 id=\"安装EPEL软件包\"><a href=\"#安装EPEL软件包\" class=\"headerlink\" title=\"安装EPEL软件包\"></a>安装EPEL软件包</h4><p>   wget <a href=\"http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\" target=\"_blank\" rel=\"external\">http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm</a><br>   sudo rpm -ivh epel-release-6-8.noarch.rpm</p>\n<h4 id=\"安装reviewboard\"><a href=\"#安装reviewboard\" class=\"headerlink\" title=\"安装reviewboard\"></a>安装reviewboard</h4><pre><code>yum -y install ReviewBoard\n</code></pre><h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>  mysql -uroot -p123456;<br>  create database reviewboard default charset utf8 collate utf8_general_ci;</p>\n<h4 id=\"创建站点\"><a href=\"#创建站点\" class=\"headerlink\" title=\"创建站点\"></a>创建站点</h4><p>  rb-site install /var/www/reviewboard</p>\n<p>  #更改文件拥有者为apache（web服务器）（在site创建完成时，会提示做如下更改）<br>  chown -R apache /var/www/reviewboard/htdocs/media/uploaded<br>  chown -R apache /var/www/reviewboard/htdocs/media/ext/<br>  chown -R apache /var/www/reviewboard/data/</p>\n<p>  #将reviewboard的配置文件拷贝到apache配置文件下</p>\n<h1 id=\"cp-var-www-reviewboard-conf-apache-wsgi-conf-etc-httpd-conf-d\"><a href=\"#cp-var-www-reviewboard-conf-apache-wsgi-conf-etc-httpd-conf-d\" class=\"headerlink\" title=\"cp /var/www/reviewboard/conf/apache-wsgi.conf /etc/httpd/conf.d\"></a>cp /var/www/reviewboard/conf/apache-wsgi.conf /etc/httpd/conf.d</h1><h4 id=\"重启apache\"><a href=\"#重启apache\" class=\"headerlink\" title=\"重启apache\"></a>重启apache</h4><p>  /etc/init.d/httpd restart</p>\n<h4 id=\"reviewboard使用\"><a href=\"#reviewboard使用\" class=\"headerlink\" title=\"reviewboard使用\"></a>reviewboard使用</h4><p>  如果添加repo的时候出现错误permission denied accessing the local Git repository, 可能原因是git仓库地址的权限问题，改下权限就行，以便apache用户组也能访问</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"centos下搭建reviewboard\"><a href=\"#centos下搭建reviewboard\" class=\"headerlink\" title=\"centos下搭建reviewboard\"></a>centos下搭建reviewboard</h3>","more":"<h4 id=\"安装apache-php-mysql-phpmyadmin-memcache\"><a href=\"#安装apache-php-mysql-phpmyadmin-memcache\" class=\"headerlink\" title=\"安装apache,php,mysql,phpmyadmin,memcache\"></a>安装apache,php,mysql,phpmyadmin,memcache</h4><p>  yum install httpd<br>  yum install php<br>  yum -y install mysql-server<br>  yum  -y install memcached<br>  yum  -y install phpmyadmin<br>  service memcached restart<br>  /etc/init.d/mysqld restart<br>  /etc/init.d/httpd restart<br>  cp -R /usr/share/phpMyAdmin/ /var/www/html/</p>\n<p>  #find deny from all and comment it in the entire file<br>  vim /etc/init.d/httpd/phpmyadmin.conf</p>\n<h4 id=\"安装sendmail\"><a href=\"#安装sendmail\" class=\"headerlink\" title=\"安装sendmail\"></a>安装sendmail</h4><pre><code>yum -y install sendmail\n</code></pre><h4 id=\"安装EPEL软件包\"><a href=\"#安装EPEL软件包\" class=\"headerlink\" title=\"安装EPEL软件包\"></a>安装EPEL软件包</h4><p>   wget <a href=\"http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm\" target=\"_blank\" rel=\"external\">http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm</a><br>   sudo rpm -ivh epel-release-6-8.noarch.rpm</p>\n<h4 id=\"安装reviewboard\"><a href=\"#安装reviewboard\" class=\"headerlink\" title=\"安装reviewboard\"></a>安装reviewboard</h4><pre><code>yum -y install ReviewBoard\n</code></pre><h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>  mysql -uroot -p123456;<br>  create database reviewboard default charset utf8 collate utf8_general_ci;</p>\n<h4 id=\"创建站点\"><a href=\"#创建站点\" class=\"headerlink\" title=\"创建站点\"></a>创建站点</h4><p>  rb-site install /var/www/reviewboard</p>\n<p>  #更改文件拥有者为apache（web服务器）（在site创建完成时，会提示做如下更改）<br>  chown -R apache /var/www/reviewboard/htdocs/media/uploaded<br>  chown -R apache /var/www/reviewboard/htdocs/media/ext/<br>  chown -R apache /var/www/reviewboard/data/</p>\n<p>  #将reviewboard的配置文件拷贝到apache配置文件下</p>\n<h1 id=\"cp-var-www-reviewboard-conf-apache-wsgi-conf-etc-httpd-conf-d\"><a href=\"#cp-var-www-reviewboard-conf-apache-wsgi-conf-etc-httpd-conf-d\" class=\"headerlink\" title=\"cp /var/www/reviewboard/conf/apache-wsgi.conf /etc/httpd/conf.d\"></a>cp /var/www/reviewboard/conf/apache-wsgi.conf /etc/httpd/conf.d</h1><h4 id=\"重启apache\"><a href=\"#重启apache\" class=\"headerlink\" title=\"重启apache\"></a>重启apache</h4><p>  /etc/init.d/httpd restart</p>\n<h4 id=\"reviewboard使用\"><a href=\"#reviewboard使用\" class=\"headerlink\" title=\"reviewboard使用\"></a>reviewboard使用</h4><p>  如果添加repo的时候出现错误permission denied accessing the local Git repository, 可能原因是git仓库地址的权限问题，改下权限就行，以便apache用户组也能访问</p>"},{"title":"laravel-eloquent-query-use-index","date":"2017-05-31T13:12:38.000Z","_content":"\n#### 为什么需要强制索引？\n\n`数据库没有使用我们设想的索引进行sql查询，导致查询特别慢。`\n\n#### mysql强制索引查询语句\n\n```sql\nselect * from test where tt = 1 force index(idx_tt); // 强制索引\nselect * from test where tt = 1 use index(idx_tt); // 优先按照这种索引查找\n```\n\n#### laravel中实现强制索引查询\n\n```php\n$this->model\n->setTable(DB::connection('test_db')->raw('test' . ' FORCE INDEX(tt)'))\n->where('tt', 1)\n->get();\n```\n","source":"_posts/laravel-eloquent-query-use-index.md","raw":"---\ntitle: laravel-eloquent-query-use-index\ndate: 2017-05-31 21:12:38\ntags: [laravel,mysql]\ncategories: 技术\n---\n\n#### 为什么需要强制索引？\n\n`数据库没有使用我们设想的索引进行sql查询，导致查询特别慢。`\n\n#### mysql强制索引查询语句\n\n```sql\nselect * from test where tt = 1 force index(idx_tt); // 强制索引\nselect * from test where tt = 1 use index(idx_tt); // 优先按照这种索引查找\n```\n\n#### laravel中实现强制索引查询\n\n```php\n$this->model\n->setTable(DB::connection('test_db')->raw('test' . ' FORCE INDEX(tt)'))\n->where('tt', 1)\n->get();\n```\n","slug":"laravel-eloquent-query-use-index","published":1,"updated":"2017-05-31T13:47:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwro000d2o5p5bxlxmhs","content":"<h4 id=\"为什么需要强制索引？\"><a href=\"#为什么需要强制索引？\" class=\"headerlink\" title=\"为什么需要强制索引？\"></a>为什么需要强制索引？</h4><p><code>数据库没有使用我们设想的索引进行sql查询，导致查询特别慢。</code></p>\n<h4 id=\"mysql强制索引查询语句\"><a href=\"#mysql强制索引查询语句\" class=\"headerlink\" title=\"mysql强制索引查询语句\"></a>mysql强制索引查询语句</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">test</span> <span class=\"keyword\">where</span> tt = <span class=\"number\">1</span> <span class=\"keyword\">force</span> <span class=\"keyword\">index</span>(idx_tt); // 强制索引</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">test</span> <span class=\"keyword\">where</span> tt = <span class=\"number\">1</span> <span class=\"keyword\">use</span> <span class=\"keyword\">index</span>(idx_tt); // 优先按照这种索引查找</div></pre></td></tr></table></figure>\n<h4 id=\"laravel中实现强制索引查询\"><a href=\"#laravel中实现强制索引查询\" class=\"headerlink\" title=\"laravel中实现强制索引查询\"></a>laravel中实现强制索引查询</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">$this</span>-&gt;model</div><div class=\"line\">-&gt;setTable(DB::connection(<span class=\"string\">'test_db'</span>)-&gt;raw(<span class=\"string\">'test'</span> . <span class=\"string\">' FORCE INDEX(tt)'</span>))</div><div class=\"line\">-&gt;where(<span class=\"string\">'tt'</span>, <span class=\"number\">1</span>)</div><div class=\"line\">-&gt;get();</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"为什么需要强制索引？\"><a href=\"#为什么需要强制索引？\" class=\"headerlink\" title=\"为什么需要强制索引？\"></a>为什么需要强制索引？</h4><p><code>数据库没有使用我们设想的索引进行sql查询，导致查询特别慢。</code></p>\n<h4 id=\"mysql强制索引查询语句\"><a href=\"#mysql强制索引查询语句\" class=\"headerlink\" title=\"mysql强制索引查询语句\"></a>mysql强制索引查询语句</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">test</span> <span class=\"keyword\">where</span> tt = <span class=\"number\">1</span> <span class=\"keyword\">force</span> <span class=\"keyword\">index</span>(idx_tt); // 强制索引</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">test</span> <span class=\"keyword\">where</span> tt = <span class=\"number\">1</span> <span class=\"keyword\">use</span> <span class=\"keyword\">index</span>(idx_tt); // 优先按照这种索引查找</div></pre></td></tr></table></figure>\n<h4 id=\"laravel中实现强制索引查询\"><a href=\"#laravel中实现强制索引查询\" class=\"headerlink\" title=\"laravel中实现强制索引查询\"></a>laravel中实现强制索引查询</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">$this</span>-&gt;model</div><div class=\"line\">-&gt;setTable(DB::connection(<span class=\"string\">'test_db'</span>)-&gt;raw(<span class=\"string\">'test'</span> . <span class=\"string\">' FORCE INDEX(tt)'</span>))</div><div class=\"line\">-&gt;where(<span class=\"string\">'tt'</span>, <span class=\"number\">1</span>)</div><div class=\"line\">-&gt;get();</div></pre></td></tr></table></figure>\n"},{"title":"hexo常用命令","date":"2015-03-07T00:02:28.000Z","_content":"\n## Quick Start\n\n### 标签\n\n``` bash\n[tag1, tag2, tag3]\n```\n\n### 分类\n\n```bash\ncategory1\n```\n\n### 新增页面\n```bash\nhexo new page 'about'\n```\n接着把链接加上，themes/yourthemeName/_config.yml里面的menu一项，添加一行About: /about。\n\n\n### 新增rss\n\n```bash\nnpm install hexo-generator-feed --save\nhexo clean\nhexo server\n```\n\n### 从xss迁移文章\n\n获取原博客的文章rss，放在博客根目录下，通过hexo-migrator-rss导入进来，十分高效，时间自动转化了。\n\n```bash\nnpm install hexo-migrator-rss --save\nhexo migrate rss old.xml\n```\n\n如图：\n\n![](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/hexo-migrate-xml.jpg)","source":"_posts/hexo-command.md","raw":"---\ntitle: hexo常用命令\ndate: 2015-03-07 08:02:28\ntags:\n---\n\n## Quick Start\n\n### 标签\n\n``` bash\n[tag1, tag2, tag3]\n```\n\n### 分类\n\n```bash\ncategory1\n```\n\n### 新增页面\n```bash\nhexo new page 'about'\n```\n接着把链接加上，themes/yourthemeName/_config.yml里面的menu一项，添加一行About: /about。\n\n\n### 新增rss\n\n```bash\nnpm install hexo-generator-feed --save\nhexo clean\nhexo server\n```\n\n### 从xss迁移文章\n\n获取原博客的文章rss，放在博客根目录下，通过hexo-migrator-rss导入进来，十分高效，时间自动转化了。\n\n```bash\nnpm install hexo-migrator-rss --save\nhexo migrate rss old.xml\n```\n\n如图：\n\n![](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/hexo-migrate-xml.jpg)","slug":"hexo-command","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwrq000e2o5p52vlax3z","content":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[tag1, tag2, tag3]</div></pre></td></tr></table></figure>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">category1</div></pre></td></tr></table></figure>\n<h3 id=\"新增页面\"><a href=\"#新增页面\" class=\"headerlink\" title=\"新增页面\"></a>新增页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new page <span class=\"string\">'about'</span></div></pre></td></tr></table></figure>\n<p>接着把链接加上，themes/yourthemeName/_config.yml里面的menu一项，添加一行About: /about。</p>\n<h3 id=\"新增rss\"><a href=\"#新增rss\" class=\"headerlink\" title=\"新增rss\"></a>新增rss</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-feed --save</div><div class=\"line\">hexo clean</div><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<h3 id=\"从xss迁移文章\"><a href=\"#从xss迁移文章\" class=\"headerlink\" title=\"从xss迁移文章\"></a>从xss迁移文章</h3><p>获取原博客的文章rss，放在博客根目录下，通过hexo-migrator-rss导入进来，十分高效，时间自动转化了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-migrator-rss --save</div><div class=\"line\">hexo migrate rss old.xml</div></pre></td></tr></table></figure>\n<p>如图：</p>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/hexo-migrate-xml.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[tag1, tag2, tag3]</div></pre></td></tr></table></figure>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">category1</div></pre></td></tr></table></figure>\n<h3 id=\"新增页面\"><a href=\"#新增页面\" class=\"headerlink\" title=\"新增页面\"></a>新增页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new page <span class=\"string\">'about'</span></div></pre></td></tr></table></figure>\n<p>接着把链接加上，themes/yourthemeName/_config.yml里面的menu一项，添加一行About: /about。</p>\n<h3 id=\"新增rss\"><a href=\"#新增rss\" class=\"headerlink\" title=\"新增rss\"></a>新增rss</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-feed --save</div><div class=\"line\">hexo clean</div><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<h3 id=\"从xss迁移文章\"><a href=\"#从xss迁移文章\" class=\"headerlink\" title=\"从xss迁移文章\"></a>从xss迁移文章</h3><p>获取原博客的文章rss，放在博客根目录下，通过hexo-migrator-rss导入进来，十分高效，时间自动转化了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-migrator-rss --save</div><div class=\"line\">hexo migrate rss old.xml</div></pre></td></tr></table></figure>\n<p>如图：</p>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/hexo-migrate-xml.jpg\" alt=\"\"></p>\n"},{"title":"基于laravel构建npm,gulp,composer,bower","date":"2015-10-25T00:00:00.000Z","_content":"\n最近基于laravel框架，使用gulp构建前端自动化工作流, 提高开发效率， 记录一下， go !以下基于mac进行，其它环境使用相应的包管理工具安装。\n\n#### node,npm安装\n\nbrew是mac下不错的包管理工具\n\n    brew install node . 该命令执行后，自动装好node和npm\n\n下面的bower,gulp需要依赖node\n\n\n#### gulp安装\n\n    全局安装 npm isntall gulp -g\n    cd 项目目录\n    npm install --save-dev gulp\n    package.json包含了我们所需要的npm包， 建立package.json\n    npm install(生成文件在node_modules中)\n    配置文件:gulpfile.js， 完成前端打包等工作\n\n#### bower安装\n\n    全局安装 npm install bower -g\n    cd 项目目录\n    npm install --save-dev bower\n    配置文件:bower.json包含了我们所需要的库文件, 建立bower.json\n    bower install(生成文件在bower_components中)\n\n#### composer安装\n\n    brew install composer\n    配置文件:composer.json, 建立composer.json\n    composer install(生成文件在vendor中)\n\n\n#### package.json\n\n所需要依赖的node包\n\n    {\n      \"repository\": {},\n      \"devDependencies\": {\n        \"del\": \"^0.1.2\",\n        \"gulp\": \"^3.9.0\",\n        \"gulp-autoprefixer\": \"0.0.10\",\n        \"gulp-concat\": \"^2.3.4\",\n        \"gulp-less\": \"^3.0.3\",\n        \"gulp-minify-css\": \"^0.3.7\",\n        \"gulp-rename\": \"^1.2.2\",\n        \"gulp-rev\": \"^1.1.0\",\n        \"gulp-uglify\": \"^1.0.0\",\n        \"laravel-elixir\": \"*\"\n      }\n    }\n\n#### gulpfile.js\n\nfor example: 完成css,js压缩打包，加版本号等\n\n    var elixir = require('laravel-elixir');\n    var gulp = require('gulp');\n    var less = require('gulp-less');\n    var autoprefixer = require('gulp-autoprefixer');\n    var uglify = require('gulp-uglify');\n    var concat = require('gulp-concat');\n    var rev = require('gulp-rev');\n    var del = require('del');\n    var minifycss = require('gulp-minify-css');\n    var rename = require('gulp-rename');\n\n\n    /*\n     |--------------------------------------------------------------------------\n     | Elixir Asset Management\n     |--------------------------------------------------------------------------\n     |\n     | Elixir provides a clean, fluent API for defining some basic Gulp tasks\n     | for your Laravel application. By default, we are compiling the Less\n     | file for our application, as well as publishing vendor resources.\n     |\n     */\n\n    elixir(function(mix) {\n        mix.task(['build', 'watch']);\n    });\n\n\n    // CSS task\n    gulp.task('css', function() {\n\n        // Cleanup old assets\n        del(['public/build/css/*.css'], function (err) {});\n\n        // Convert scss first\n        gulp.src('resources/assets/less/*.less')\n            .pipe(less())\n            .pipe(autoprefixer('last 10 version'))\n            .pipe(concat('app.css'))\n            .pipe(minifycss())\n            .pipe(rename(function (path) {\n                path.basename += \".min\"\n            }))\n            .pipe(rev())\n            .pipe(gulp.dest('public/build/css'));\n    });\n\n    // JavaScript task\n    gulp.task('js', function() {\n        // Cleanup old assets\n        del(['public/build/js/*.js'], function (err) {});\n\n        // Concat and uglify the JavaScript assets\n        // Afterwards add the MD5 hash to the filename\n        gulp.src('resources/assets/js/*.js')\n            .pipe(concat('app.js'))\n            .pipe(uglify())\n            .pipe(rename(function (path) {\n                path.basename += \".min\"\n            }))\n            .pipe(rev())\n            .pipe(gulp.dest('public/build/js'));\n    });\n\n    //image task\n    gulp.task('copy:image', function () {\n      gulp.src('resources/images/**/*')\n        .pipe(gulp.dest('public/build/images'));\n    });\n\n\n    gulp.task('build', ['css', 'js', 'copy:image']);\n\n    gulp.task('watch', function(){\n        gulp.watch('resources/assets/css/**/*.css', ['css']);\n        gulp.watch('resources/assets/js/**/*.js', ['js']);\n    });\n\n    // The default task (called when you run `gulp` from cli)\n    // gulp.task('default', ['build', 'watch']);\n\n#### bower.json\n\nfor example: 安装项目所需要的组件\n\n    {\n      \"name\": \"laravel\",\n      \"version\": \"1.0.0\",\n      \"authors\": [\n        \"caijinlin <caijinlin2012@gmail.com>\"\n      ],\n      \"license\": \"MIT\",\n      \"ignore\": [\n        \"**/.*\",\n        \"node_modules\",\n        \"bower_components\",\n        \"test\",\n        \"tests\"\n      ],\n      \"dependencies\": {\n        \"bootstrap\": \"3.1.1\",\n        \"jquery\": \"1.11.3\",\n        \"remarkable-bootstrap-notify\": \"3.1.3\",\n        \"jquery_lazyload\": \"~1.9.1\"\n      }\n    }\n\n\n#### composer.json\n\nfor example: 依赖laravel框架\n\n    {\n        \"name\": \"laravel/laravel\",\n        \"description\": \"The Laravel Framework.\",\n        \"keywords\": [\"framework\", \"laravel\"],\n        \"license\": \"MIT\",\n        \"type\": \"project\",\n        \"require\": {\n            \"laravel/framework\": \"5.0.*\"\n        },\n        \"require-dev\": {\n            \"phpunit/phpunit\": \"~4.0\",\n            \"phpspec/phpspec\": \"~2.1\",\n            \"barryvdh/laravel-debugbar\": \"~2.0\"\n        },\n        \"autoload\": {\n            \"classmap\": [\n                \"database\"\n            ],\n            \"psr-4\": {\n                \"App\\\\\": \"app/\"\n            }\n        },\n        \"autoload-dev\": {\n            \"classmap\": [\n                \"tests/TestCase.php\"\n            ]\n        },\n        \"scripts\": {\n            \"post-install-cmd\": [\n                \"php artisan clear-compiled\",\n                \"php artisan optimize\"\n            ],\n            \"post-update-cmd\": [\n                \"php artisan clear-compiled\",\n                \"php artisan optimize\"\n            ],\n            \"post-create-project-cmd\": [\n                \"php -r \\\"copy('.env.example', '.env');\\\"\",\n                \"php artisan key:generate\"\n            ]\n        },\n        \"config\": {\n            \"preferred-install\": \"dist\"\n        }\n    }","source":"_posts/laravel-npm-gulp-composer-bower.md","raw":"---\ntitle: '基于laravel构建npm,gulp,composer,bower'\ntags: []\ndate: 2015-10-25 08:00:00\n---\n\n最近基于laravel框架，使用gulp构建前端自动化工作流, 提高开发效率， 记录一下， go !以下基于mac进行，其它环境使用相应的包管理工具安装。\n\n#### node,npm安装\n\nbrew是mac下不错的包管理工具\n\n    brew install node . 该命令执行后，自动装好node和npm\n\n下面的bower,gulp需要依赖node\n\n\n#### gulp安装\n\n    全局安装 npm isntall gulp -g\n    cd 项目目录\n    npm install --save-dev gulp\n    package.json包含了我们所需要的npm包， 建立package.json\n    npm install(生成文件在node_modules中)\n    配置文件:gulpfile.js， 完成前端打包等工作\n\n#### bower安装\n\n    全局安装 npm install bower -g\n    cd 项目目录\n    npm install --save-dev bower\n    配置文件:bower.json包含了我们所需要的库文件, 建立bower.json\n    bower install(生成文件在bower_components中)\n\n#### composer安装\n\n    brew install composer\n    配置文件:composer.json, 建立composer.json\n    composer install(生成文件在vendor中)\n\n\n#### package.json\n\n所需要依赖的node包\n\n    {\n      \"repository\": {},\n      \"devDependencies\": {\n        \"del\": \"^0.1.2\",\n        \"gulp\": \"^3.9.0\",\n        \"gulp-autoprefixer\": \"0.0.10\",\n        \"gulp-concat\": \"^2.3.4\",\n        \"gulp-less\": \"^3.0.3\",\n        \"gulp-minify-css\": \"^0.3.7\",\n        \"gulp-rename\": \"^1.2.2\",\n        \"gulp-rev\": \"^1.1.0\",\n        \"gulp-uglify\": \"^1.0.0\",\n        \"laravel-elixir\": \"*\"\n      }\n    }\n\n#### gulpfile.js\n\nfor example: 完成css,js压缩打包，加版本号等\n\n    var elixir = require('laravel-elixir');\n    var gulp = require('gulp');\n    var less = require('gulp-less');\n    var autoprefixer = require('gulp-autoprefixer');\n    var uglify = require('gulp-uglify');\n    var concat = require('gulp-concat');\n    var rev = require('gulp-rev');\n    var del = require('del');\n    var minifycss = require('gulp-minify-css');\n    var rename = require('gulp-rename');\n\n\n    /*\n     |--------------------------------------------------------------------------\n     | Elixir Asset Management\n     |--------------------------------------------------------------------------\n     |\n     | Elixir provides a clean, fluent API for defining some basic Gulp tasks\n     | for your Laravel application. By default, we are compiling the Less\n     | file for our application, as well as publishing vendor resources.\n     |\n     */\n\n    elixir(function(mix) {\n        mix.task(['build', 'watch']);\n    });\n\n\n    // CSS task\n    gulp.task('css', function() {\n\n        // Cleanup old assets\n        del(['public/build/css/*.css'], function (err) {});\n\n        // Convert scss first\n        gulp.src('resources/assets/less/*.less')\n            .pipe(less())\n            .pipe(autoprefixer('last 10 version'))\n            .pipe(concat('app.css'))\n            .pipe(minifycss())\n            .pipe(rename(function (path) {\n                path.basename += \".min\"\n            }))\n            .pipe(rev())\n            .pipe(gulp.dest('public/build/css'));\n    });\n\n    // JavaScript task\n    gulp.task('js', function() {\n        // Cleanup old assets\n        del(['public/build/js/*.js'], function (err) {});\n\n        // Concat and uglify the JavaScript assets\n        // Afterwards add the MD5 hash to the filename\n        gulp.src('resources/assets/js/*.js')\n            .pipe(concat('app.js'))\n            .pipe(uglify())\n            .pipe(rename(function (path) {\n                path.basename += \".min\"\n            }))\n            .pipe(rev())\n            .pipe(gulp.dest('public/build/js'));\n    });\n\n    //image task\n    gulp.task('copy:image', function () {\n      gulp.src('resources/images/**/*')\n        .pipe(gulp.dest('public/build/images'));\n    });\n\n\n    gulp.task('build', ['css', 'js', 'copy:image']);\n\n    gulp.task('watch', function(){\n        gulp.watch('resources/assets/css/**/*.css', ['css']);\n        gulp.watch('resources/assets/js/**/*.js', ['js']);\n    });\n\n    // The default task (called when you run `gulp` from cli)\n    // gulp.task('default', ['build', 'watch']);\n\n#### bower.json\n\nfor example: 安装项目所需要的组件\n\n    {\n      \"name\": \"laravel\",\n      \"version\": \"1.0.0\",\n      \"authors\": [\n        \"caijinlin <caijinlin2012@gmail.com>\"\n      ],\n      \"license\": \"MIT\",\n      \"ignore\": [\n        \"**/.*\",\n        \"node_modules\",\n        \"bower_components\",\n        \"test\",\n        \"tests\"\n      ],\n      \"dependencies\": {\n        \"bootstrap\": \"3.1.1\",\n        \"jquery\": \"1.11.3\",\n        \"remarkable-bootstrap-notify\": \"3.1.3\",\n        \"jquery_lazyload\": \"~1.9.1\"\n      }\n    }\n\n\n#### composer.json\n\nfor example: 依赖laravel框架\n\n    {\n        \"name\": \"laravel/laravel\",\n        \"description\": \"The Laravel Framework.\",\n        \"keywords\": [\"framework\", \"laravel\"],\n        \"license\": \"MIT\",\n        \"type\": \"project\",\n        \"require\": {\n            \"laravel/framework\": \"5.0.*\"\n        },\n        \"require-dev\": {\n            \"phpunit/phpunit\": \"~4.0\",\n            \"phpspec/phpspec\": \"~2.1\",\n            \"barryvdh/laravel-debugbar\": \"~2.0\"\n        },\n        \"autoload\": {\n            \"classmap\": [\n                \"database\"\n            ],\n            \"psr-4\": {\n                \"App\\\\\": \"app/\"\n            }\n        },\n        \"autoload-dev\": {\n            \"classmap\": [\n                \"tests/TestCase.php\"\n            ]\n        },\n        \"scripts\": {\n            \"post-install-cmd\": [\n                \"php artisan clear-compiled\",\n                \"php artisan optimize\"\n            ],\n            \"post-update-cmd\": [\n                \"php artisan clear-compiled\",\n                \"php artisan optimize\"\n            ],\n            \"post-create-project-cmd\": [\n                \"php -r \\\"copy('.env.example', '.env');\\\"\",\n                \"php artisan key:generate\"\n            ]\n        },\n        \"config\": {\n            \"preferred-install\": \"dist\"\n        }\n    }","slug":"laravel-npm-gulp-composer-bower","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwrr000f2o5pq8t36s3h","content":"<p>最近基于laravel框架，使用gulp构建前端自动化工作流, 提高开发效率， 记录一下， go !以下基于mac进行，其它环境使用相应的包管理工具安装。</p>\n<h4 id=\"node-npm安装\"><a href=\"#node-npm安装\" class=\"headerlink\" title=\"node,npm安装\"></a>node,npm安装</h4><p>brew是mac下不错的包管理工具</p>\n<pre><code>brew install node . 该命令执行后，自动装好node和npm\n</code></pre><p>下面的bower,gulp需要依赖node</p>\n<h4 id=\"gulp安装\"><a href=\"#gulp安装\" class=\"headerlink\" title=\"gulp安装\"></a>gulp安装</h4><pre><code>全局安装 npm isntall gulp -g\ncd 项目目录\nnpm install --save-dev gulp\npackage.json包含了我们所需要的npm包， 建立package.json\nnpm install(生成文件在node_modules中)\n配置文件:gulpfile.js， 完成前端打包等工作\n</code></pre><h4 id=\"bower安装\"><a href=\"#bower安装\" class=\"headerlink\" title=\"bower安装\"></a>bower安装</h4><pre><code>全局安装 npm install bower -g\ncd 项目目录\nnpm install --save-dev bower\n配置文件:bower.json包含了我们所需要的库文件, 建立bower.json\nbower install(生成文件在bower_components中)\n</code></pre><h4 id=\"composer安装\"><a href=\"#composer安装\" class=\"headerlink\" title=\"composer安装\"></a>composer安装</h4><pre><code>brew install composer\n配置文件:composer.json, 建立composer.json\ncomposer install(生成文件在vendor中)\n</code></pre><h4 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h4><p>所需要依赖的node包</p>\n<pre><code>{\n  &quot;repository&quot;: {},\n  &quot;devDependencies&quot;: {\n    &quot;del&quot;: &quot;^0.1.2&quot;,\n    &quot;gulp&quot;: &quot;^3.9.0&quot;,\n    &quot;gulp-autoprefixer&quot;: &quot;0.0.10&quot;,\n    &quot;gulp-concat&quot;: &quot;^2.3.4&quot;,\n    &quot;gulp-less&quot;: &quot;^3.0.3&quot;,\n    &quot;gulp-minify-css&quot;: &quot;^0.3.7&quot;,\n    &quot;gulp-rename&quot;: &quot;^1.2.2&quot;,\n    &quot;gulp-rev&quot;: &quot;^1.1.0&quot;,\n    &quot;gulp-uglify&quot;: &quot;^1.0.0&quot;,\n    &quot;laravel-elixir&quot;: &quot;*&quot;\n  }\n}\n</code></pre><h4 id=\"gulpfile-js\"><a href=\"#gulpfile-js\" class=\"headerlink\" title=\"gulpfile.js\"></a>gulpfile.js</h4><p>for example: 完成css,js压缩打包，加版本号等</p>\n<pre><code>var elixir = require(&apos;laravel-elixir&apos;);\nvar gulp = require(&apos;gulp&apos;);\nvar less = require(&apos;gulp-less&apos;);\nvar autoprefixer = require(&apos;gulp-autoprefixer&apos;);\nvar uglify = require(&apos;gulp-uglify&apos;);\nvar concat = require(&apos;gulp-concat&apos;);\nvar rev = require(&apos;gulp-rev&apos;);\nvar del = require(&apos;del&apos;);\nvar minifycss = require(&apos;gulp-minify-css&apos;);\nvar rename = require(&apos;gulp-rename&apos;);\n\n\n/*\n |--------------------------------------------------------------------------\n | Elixir Asset Management\n |--------------------------------------------------------------------------\n |\n | Elixir provides a clean, fluent API for defining some basic Gulp tasks\n | for your Laravel application. By default, we are compiling the Less\n | file for our application, as well as publishing vendor resources.\n |\n */\n\nelixir(function(mix) {\n    mix.task([&apos;build&apos;, &apos;watch&apos;]);\n});\n\n\n// CSS task\ngulp.task(&apos;css&apos;, function() {\n\n    // Cleanup old assets\n    del([&apos;public/build/css/*.css&apos;], function (err) {});\n\n    // Convert scss first\n    gulp.src(&apos;resources/assets/less/*.less&apos;)\n        .pipe(less())\n        .pipe(autoprefixer(&apos;last 10 version&apos;))\n        .pipe(concat(&apos;app.css&apos;))\n        .pipe(minifycss())\n        .pipe(rename(function (path) {\n            path.basename += &quot;.min&quot;\n        }))\n        .pipe(rev())\n        .pipe(gulp.dest(&apos;public/build/css&apos;));\n});\n\n// JavaScript task\ngulp.task(&apos;js&apos;, function() {\n    // Cleanup old assets\n    del([&apos;public/build/js/*.js&apos;], function (err) {});\n\n    // Concat and uglify the JavaScript assets\n    // Afterwards add the MD5 hash to the filename\n    gulp.src(&apos;resources/assets/js/*.js&apos;)\n        .pipe(concat(&apos;app.js&apos;))\n        .pipe(uglify())\n        .pipe(rename(function (path) {\n            path.basename += &quot;.min&quot;\n        }))\n        .pipe(rev())\n        .pipe(gulp.dest(&apos;public/build/js&apos;));\n});\n\n//image task\ngulp.task(&apos;copy:image&apos;, function () {\n  gulp.src(&apos;resources/images/**/*&apos;)\n    .pipe(gulp.dest(&apos;public/build/images&apos;));\n});\n\n\ngulp.task(&apos;build&apos;, [&apos;css&apos;, &apos;js&apos;, &apos;copy:image&apos;]);\n\ngulp.task(&apos;watch&apos;, function(){\n    gulp.watch(&apos;resources/assets/css/**/*.css&apos;, [&apos;css&apos;]);\n    gulp.watch(&apos;resources/assets/js/**/*.js&apos;, [&apos;js&apos;]);\n});\n\n// The default task (called when you run `gulp` from cli)\n// gulp.task(&apos;default&apos;, [&apos;build&apos;, &apos;watch&apos;]);\n</code></pre><h4 id=\"bower-json\"><a href=\"#bower-json\" class=\"headerlink\" title=\"bower.json\"></a>bower.json</h4><p>for example: 安装项目所需要的组件</p>\n<pre><code>{\n  &quot;name&quot;: &quot;laravel&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;authors&quot;: [\n    &quot;caijinlin &lt;caijinlin2012@gmail.com&gt;&quot;\n  ],\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;ignore&quot;: [\n    &quot;**/.*&quot;,\n    &quot;node_modules&quot;,\n    &quot;bower_components&quot;,\n    &quot;test&quot;,\n    &quot;tests&quot;\n  ],\n  &quot;dependencies&quot;: {\n    &quot;bootstrap&quot;: &quot;3.1.1&quot;,\n    &quot;jquery&quot;: &quot;1.11.3&quot;,\n    &quot;remarkable-bootstrap-notify&quot;: &quot;3.1.3&quot;,\n    &quot;jquery_lazyload&quot;: &quot;~1.9.1&quot;\n  }\n}\n</code></pre><h4 id=\"composer-json\"><a href=\"#composer-json\" class=\"headerlink\" title=\"composer.json\"></a>composer.json</h4><p>for example: 依赖laravel框架</p>\n<pre><code>{\n    &quot;name&quot;: &quot;laravel/laravel&quot;,\n    &quot;description&quot;: &quot;The Laravel Framework.&quot;,\n    &quot;keywords&quot;: [&quot;framework&quot;, &quot;laravel&quot;],\n    &quot;license&quot;: &quot;MIT&quot;,\n    &quot;type&quot;: &quot;project&quot;,\n    &quot;require&quot;: {\n        &quot;laravel/framework&quot;: &quot;5.0.*&quot;\n    },\n    &quot;require-dev&quot;: {\n        &quot;phpunit/phpunit&quot;: &quot;~4.0&quot;,\n        &quot;phpspec/phpspec&quot;: &quot;~2.1&quot;,\n        &quot;barryvdh/laravel-debugbar&quot;: &quot;~2.0&quot;\n    },\n    &quot;autoload&quot;: {\n        &quot;classmap&quot;: [\n            &quot;database&quot;\n        ],\n        &quot;psr-4&quot;: {\n            &quot;App\\\\&quot;: &quot;app/&quot;\n        }\n    },\n    &quot;autoload-dev&quot;: {\n        &quot;classmap&quot;: [\n            &quot;tests/TestCase.php&quot;\n        ]\n    },\n    &quot;scripts&quot;: {\n        &quot;post-install-cmd&quot;: [\n            &quot;php artisan clear-compiled&quot;,\n            &quot;php artisan optimize&quot;\n        ],\n        &quot;post-update-cmd&quot;: [\n            &quot;php artisan clear-compiled&quot;,\n            &quot;php artisan optimize&quot;\n        ],\n        &quot;post-create-project-cmd&quot;: [\n            &quot;php -r \\&quot;copy(&apos;.env.example&apos;, &apos;.env&apos;);\\&quot;&quot;,\n            &quot;php artisan key:generate&quot;\n        ]\n    },\n    &quot;config&quot;: {\n        &quot;preferred-install&quot;: &quot;dist&quot;\n    }\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>最近基于laravel框架，使用gulp构建前端自动化工作流, 提高开发效率， 记录一下， go !以下基于mac进行，其它环境使用相应的包管理工具安装。</p>\n<h4 id=\"node-npm安装\"><a href=\"#node-npm安装\" class=\"headerlink\" title=\"node,npm安装\"></a>node,npm安装</h4><p>brew是mac下不错的包管理工具</p>\n<pre><code>brew install node . 该命令执行后，自动装好node和npm\n</code></pre><p>下面的bower,gulp需要依赖node</p>\n<h4 id=\"gulp安装\"><a href=\"#gulp安装\" class=\"headerlink\" title=\"gulp安装\"></a>gulp安装</h4><pre><code>全局安装 npm isntall gulp -g\ncd 项目目录\nnpm install --save-dev gulp\npackage.json包含了我们所需要的npm包， 建立package.json\nnpm install(生成文件在node_modules中)\n配置文件:gulpfile.js， 完成前端打包等工作\n</code></pre><h4 id=\"bower安装\"><a href=\"#bower安装\" class=\"headerlink\" title=\"bower安装\"></a>bower安装</h4><pre><code>全局安装 npm install bower -g\ncd 项目目录\nnpm install --save-dev bower\n配置文件:bower.json包含了我们所需要的库文件, 建立bower.json\nbower install(生成文件在bower_components中)\n</code></pre><h4 id=\"composer安装\"><a href=\"#composer安装\" class=\"headerlink\" title=\"composer安装\"></a>composer安装</h4><pre><code>brew install composer\n配置文件:composer.json, 建立composer.json\ncomposer install(生成文件在vendor中)\n</code></pre><h4 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h4><p>所需要依赖的node包</p>\n<pre><code>{\n  &quot;repository&quot;: {},\n  &quot;devDependencies&quot;: {\n    &quot;del&quot;: &quot;^0.1.2&quot;,\n    &quot;gulp&quot;: &quot;^3.9.0&quot;,\n    &quot;gulp-autoprefixer&quot;: &quot;0.0.10&quot;,\n    &quot;gulp-concat&quot;: &quot;^2.3.4&quot;,\n    &quot;gulp-less&quot;: &quot;^3.0.3&quot;,\n    &quot;gulp-minify-css&quot;: &quot;^0.3.7&quot;,\n    &quot;gulp-rename&quot;: &quot;^1.2.2&quot;,\n    &quot;gulp-rev&quot;: &quot;^1.1.0&quot;,\n    &quot;gulp-uglify&quot;: &quot;^1.0.0&quot;,\n    &quot;laravel-elixir&quot;: &quot;*&quot;\n  }\n}\n</code></pre><h4 id=\"gulpfile-js\"><a href=\"#gulpfile-js\" class=\"headerlink\" title=\"gulpfile.js\"></a>gulpfile.js</h4><p>for example: 完成css,js压缩打包，加版本号等</p>\n<pre><code>var elixir = require(&apos;laravel-elixir&apos;);\nvar gulp = require(&apos;gulp&apos;);\nvar less = require(&apos;gulp-less&apos;);\nvar autoprefixer = require(&apos;gulp-autoprefixer&apos;);\nvar uglify = require(&apos;gulp-uglify&apos;);\nvar concat = require(&apos;gulp-concat&apos;);\nvar rev = require(&apos;gulp-rev&apos;);\nvar del = require(&apos;del&apos;);\nvar minifycss = require(&apos;gulp-minify-css&apos;);\nvar rename = require(&apos;gulp-rename&apos;);\n\n\n/*\n |--------------------------------------------------------------------------\n | Elixir Asset Management\n |--------------------------------------------------------------------------\n |\n | Elixir provides a clean, fluent API for defining some basic Gulp tasks\n | for your Laravel application. By default, we are compiling the Less\n | file for our application, as well as publishing vendor resources.\n |\n */\n\nelixir(function(mix) {\n    mix.task([&apos;build&apos;, &apos;watch&apos;]);\n});\n\n\n// CSS task\ngulp.task(&apos;css&apos;, function() {\n\n    // Cleanup old assets\n    del([&apos;public/build/css/*.css&apos;], function (err) {});\n\n    // Convert scss first\n    gulp.src(&apos;resources/assets/less/*.less&apos;)\n        .pipe(less())\n        .pipe(autoprefixer(&apos;last 10 version&apos;))\n        .pipe(concat(&apos;app.css&apos;))\n        .pipe(minifycss())\n        .pipe(rename(function (path) {\n            path.basename += &quot;.min&quot;\n        }))\n        .pipe(rev())\n        .pipe(gulp.dest(&apos;public/build/css&apos;));\n});\n\n// JavaScript task\ngulp.task(&apos;js&apos;, function() {\n    // Cleanup old assets\n    del([&apos;public/build/js/*.js&apos;], function (err) {});\n\n    // Concat and uglify the JavaScript assets\n    // Afterwards add the MD5 hash to the filename\n    gulp.src(&apos;resources/assets/js/*.js&apos;)\n        .pipe(concat(&apos;app.js&apos;))\n        .pipe(uglify())\n        .pipe(rename(function (path) {\n            path.basename += &quot;.min&quot;\n        }))\n        .pipe(rev())\n        .pipe(gulp.dest(&apos;public/build/js&apos;));\n});\n\n//image task\ngulp.task(&apos;copy:image&apos;, function () {\n  gulp.src(&apos;resources/images/**/*&apos;)\n    .pipe(gulp.dest(&apos;public/build/images&apos;));\n});\n\n\ngulp.task(&apos;build&apos;, [&apos;css&apos;, &apos;js&apos;, &apos;copy:image&apos;]);\n\ngulp.task(&apos;watch&apos;, function(){\n    gulp.watch(&apos;resources/assets/css/**/*.css&apos;, [&apos;css&apos;]);\n    gulp.watch(&apos;resources/assets/js/**/*.js&apos;, [&apos;js&apos;]);\n});\n\n// The default task (called when you run `gulp` from cli)\n// gulp.task(&apos;default&apos;, [&apos;build&apos;, &apos;watch&apos;]);\n</code></pre><h4 id=\"bower-json\"><a href=\"#bower-json\" class=\"headerlink\" title=\"bower.json\"></a>bower.json</h4><p>for example: 安装项目所需要的组件</p>\n<pre><code>{\n  &quot;name&quot;: &quot;laravel&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;authors&quot;: [\n    &quot;caijinlin &lt;caijinlin2012@gmail.com&gt;&quot;\n  ],\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;ignore&quot;: [\n    &quot;**/.*&quot;,\n    &quot;node_modules&quot;,\n    &quot;bower_components&quot;,\n    &quot;test&quot;,\n    &quot;tests&quot;\n  ],\n  &quot;dependencies&quot;: {\n    &quot;bootstrap&quot;: &quot;3.1.1&quot;,\n    &quot;jquery&quot;: &quot;1.11.3&quot;,\n    &quot;remarkable-bootstrap-notify&quot;: &quot;3.1.3&quot;,\n    &quot;jquery_lazyload&quot;: &quot;~1.9.1&quot;\n  }\n}\n</code></pre><h4 id=\"composer-json\"><a href=\"#composer-json\" class=\"headerlink\" title=\"composer.json\"></a>composer.json</h4><p>for example: 依赖laravel框架</p>\n<pre><code>{\n    &quot;name&quot;: &quot;laravel/laravel&quot;,\n    &quot;description&quot;: &quot;The Laravel Framework.&quot;,\n    &quot;keywords&quot;: [&quot;framework&quot;, &quot;laravel&quot;],\n    &quot;license&quot;: &quot;MIT&quot;,\n    &quot;type&quot;: &quot;project&quot;,\n    &quot;require&quot;: {\n        &quot;laravel/framework&quot;: &quot;5.0.*&quot;\n    },\n    &quot;require-dev&quot;: {\n        &quot;phpunit/phpunit&quot;: &quot;~4.0&quot;,\n        &quot;phpspec/phpspec&quot;: &quot;~2.1&quot;,\n        &quot;barryvdh/laravel-debugbar&quot;: &quot;~2.0&quot;\n    },\n    &quot;autoload&quot;: {\n        &quot;classmap&quot;: [\n            &quot;database&quot;\n        ],\n        &quot;psr-4&quot;: {\n            &quot;App\\\\&quot;: &quot;app/&quot;\n        }\n    },\n    &quot;autoload-dev&quot;: {\n        &quot;classmap&quot;: [\n            &quot;tests/TestCase.php&quot;\n        ]\n    },\n    &quot;scripts&quot;: {\n        &quot;post-install-cmd&quot;: [\n            &quot;php artisan clear-compiled&quot;,\n            &quot;php artisan optimize&quot;\n        ],\n        &quot;post-update-cmd&quot;: [\n            &quot;php artisan clear-compiled&quot;,\n            &quot;php artisan optimize&quot;\n        ],\n        &quot;post-create-project-cmd&quot;: [\n            &quot;php -r \\&quot;copy(&apos;.env.example&apos;, &apos;.env&apos;);\\&quot;&quot;,\n            &quot;php artisan key:generate&quot;\n        ]\n    },\n    &quot;config&quot;: {\n        &quot;preferred-install&quot;: &quot;dist&quot;\n    }\n}\n</code></pre>"},{"title":"lnmp环境及navicat配置安装","date":"2014-12-16T00:00:00.000Z","_content":"\n### lnmp环境安装及解决遇到的问题\n\n今天搭建了2台linux服务器lnmp环境，安装的过程中也是遇到一些问题。总结一下：如果nginx，mysql，php安装了多次，即使卸载，但是进程仍然在运行，所以每次重新安装的时候，最好kill掉原进程。在解决问题的过程中，还学了一些平时没怎么用的linux命令，算是另外的收获吧，折腾一天也值了。\n\n#### shell命令一键安装lnmp：\n\nCentOS系统下执行：wget -c http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz && tar zxf lnmp1.1-full.tar.gz && cd lnmp1.1-full && ./centos.sh\n\nDebian系统下执行：wget -c http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz && tar zxf lnmp1.1-full.tar.gz && cd lnmp1.1-full && ./debian.sh\n\nUbuntu系统下执行：wget -c http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz && tar zxf lnmp1.1-full.tar.gz && cd lnmp1.1-full && ./ubuntu.sh\n\n更多了解访问<a href=\"http://lnmp.org/install.html\" target=\"_blank\">lnmp官网</a>\n\n测试lnmp安装是否成功：\n\n    service nginx status;\n    service mysql status;\n\n#### navicat软件下载(数据库管理软件,可以连接远程数据库)\n\n<a href=\"http://pan.baidu.com/s/1qW6uj5y\" target=\"\">点击下载</a>\n    \n#### 遇到的问题\n\n#### 1.mysql: Unknown OS character set 'GB18030'. \n     mysql: Switching to the default character set 'latin1'.\n\n问题所在：操作系统编码问题\n\n解决方案：\n\n    step1.更改操作系统字符集(shell命令)\n\n        vim /etc/sysconfig/i18n   将LANG=\"zh_CN.GB18030\"改成LANG=\"zh_CN.UTF-8\"\n\n    step2.设置环境变量(shell命令)\n\n        exoport LANG = \"zh_CN.UTF-8\"\n\n    step3.立刻生效环境更改\n\n        source /etc/profile\n\n#### 2.mysql登录\n\n    mysql -u root p123456   <!-- 假设root为数据库用户名，123456为数据库密码-->\n\n#### 3.使用数据库管理工具navicat连接远程数据库出现无法连接的问题\n\n![远程连接错误](/assets/images/Linkerror.png)\n\n排查错误：\n    \n1.远程服务器端口3306是否打开\n    \n    step1:客户机上 telnet ipAddress 3306，看服务器的3306端口是否被打开\n\n![mysql port](/assets/images/mysqlport.png)\n\n2.远程服务器是否不允许从远程登陆\n\n    运行shell命令：netstat -an | grep 3306\n\n    如果上图红色部分为127.0.0.1，则说明只能本机访问，不被允许远程访问\n\n解决方案：登录服务器mysql，设置允许客户机192.168.30.105以用户root,密码root登陆\n\n    GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.30.105' IDENTIFIED BY 'root' WITH GRANT OPTION;\n\n\n\n","source":"_posts/lnmp环境及navicat配置安装.md","raw":"---\ntitle: lnmp环境及navicat配置安装\ntags: []\ndate: 2014-12-16 08:00:00\n---\n\n### lnmp环境安装及解决遇到的问题\n\n今天搭建了2台linux服务器lnmp环境，安装的过程中也是遇到一些问题。总结一下：如果nginx，mysql，php安装了多次，即使卸载，但是进程仍然在运行，所以每次重新安装的时候，最好kill掉原进程。在解决问题的过程中，还学了一些平时没怎么用的linux命令，算是另外的收获吧，折腾一天也值了。\n\n#### shell命令一键安装lnmp：\n\nCentOS系统下执行：wget -c http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz && tar zxf lnmp1.1-full.tar.gz && cd lnmp1.1-full && ./centos.sh\n\nDebian系统下执行：wget -c http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz && tar zxf lnmp1.1-full.tar.gz && cd lnmp1.1-full && ./debian.sh\n\nUbuntu系统下执行：wget -c http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz && tar zxf lnmp1.1-full.tar.gz && cd lnmp1.1-full && ./ubuntu.sh\n\n更多了解访问<a href=\"http://lnmp.org/install.html\" target=\"_blank\">lnmp官网</a>\n\n测试lnmp安装是否成功：\n\n    service nginx status;\n    service mysql status;\n\n#### navicat软件下载(数据库管理软件,可以连接远程数据库)\n\n<a href=\"http://pan.baidu.com/s/1qW6uj5y\" target=\"\">点击下载</a>\n    \n#### 遇到的问题\n\n#### 1.mysql: Unknown OS character set 'GB18030'. \n     mysql: Switching to the default character set 'latin1'.\n\n问题所在：操作系统编码问题\n\n解决方案：\n\n    step1.更改操作系统字符集(shell命令)\n\n        vim /etc/sysconfig/i18n   将LANG=\"zh_CN.GB18030\"改成LANG=\"zh_CN.UTF-8\"\n\n    step2.设置环境变量(shell命令)\n\n        exoport LANG = \"zh_CN.UTF-8\"\n\n    step3.立刻生效环境更改\n\n        source /etc/profile\n\n#### 2.mysql登录\n\n    mysql -u root p123456   <!-- 假设root为数据库用户名，123456为数据库密码-->\n\n#### 3.使用数据库管理工具navicat连接远程数据库出现无法连接的问题\n\n![远程连接错误](/assets/images/Linkerror.png)\n\n排查错误：\n    \n1.远程服务器端口3306是否打开\n    \n    step1:客户机上 telnet ipAddress 3306，看服务器的3306端口是否被打开\n\n![mysql port](/assets/images/mysqlport.png)\n\n2.远程服务器是否不允许从远程登陆\n\n    运行shell命令：netstat -an | grep 3306\n\n    如果上图红色部分为127.0.0.1，则说明只能本机访问，不被允许远程访问\n\n解决方案：登录服务器mysql，设置允许客户机192.168.30.105以用户root,密码root登陆\n\n    GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.30.105' IDENTIFIED BY 'root' WITH GRANT OPTION;\n\n\n\n","slug":"lnmp环境及navicat配置安装","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwrt000j2o5pvjw4h6ca","content":"<h3 id=\"lnmp环境安装及解决遇到的问题\"><a href=\"#lnmp环境安装及解决遇到的问题\" class=\"headerlink\" title=\"lnmp环境安装及解决遇到的问题\"></a>lnmp环境安装及解决遇到的问题</h3><p>今天搭建了2台linux服务器lnmp环境，安装的过程中也是遇到一些问题。总结一下：如果nginx，mysql，php安装了多次，即使卸载，但是进程仍然在运行，所以每次重新安装的时候，最好kill掉原进程。在解决问题的过程中，还学了一些平时没怎么用的linux命令，算是另外的收获吧，折腾一天也值了。</p>\n<h4 id=\"shell命令一键安装lnmp：\"><a href=\"#shell命令一键安装lnmp：\" class=\"headerlink\" title=\"shell命令一键安装lnmp：\"></a>shell命令一键安装lnmp：</h4><p>CentOS系统下执行：wget -c <a href=\"http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz\" target=\"_blank\" rel=\"external\">http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz</a> &amp;&amp; tar zxf lnmp1.1-full.tar.gz &amp;&amp; cd lnmp1.1-full &amp;&amp; ./centos.sh</p>\n<p>Debian系统下执行：wget -c <a href=\"http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz\" target=\"_blank\" rel=\"external\">http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz</a> &amp;&amp; tar zxf lnmp1.1-full.tar.gz &amp;&amp; cd lnmp1.1-full &amp;&amp; ./debian.sh</p>\n<p>Ubuntu系统下执行：wget -c <a href=\"http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz\" target=\"_blank\" rel=\"external\">http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz</a> &amp;&amp; tar zxf lnmp1.1-full.tar.gz &amp;&amp; cd lnmp1.1-full &amp;&amp; ./ubuntu.sh</p>\n<p>更多了解访问<a href=\"http://lnmp.org/install.html\" target=\"_blank\">lnmp官网</a></p>\n<p>测试lnmp安装是否成功：</p>\n<pre><code>service nginx status;\nservice mysql status;\n</code></pre><h4 id=\"navicat软件下载-数据库管理软件-可以连接远程数据库\"><a href=\"#navicat软件下载-数据库管理软件-可以连接远程数据库\" class=\"headerlink\" title=\"navicat软件下载(数据库管理软件,可以连接远程数据库)\"></a>navicat软件下载(数据库管理软件,可以连接远程数据库)</h4><p><a href=\"http://pan.baidu.com/s/1qW6uj5y\" target=\"_blank\" rel=\"external\">点击下载</a></p>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><h4 id=\"1-mysql-Unknown-OS-character-set-‘GB18030’\"><a href=\"#1-mysql-Unknown-OS-character-set-‘GB18030’\" class=\"headerlink\" title=\"1.mysql: Unknown OS character set ‘GB18030’.\"></a>1.mysql: Unknown OS character set ‘GB18030’.</h4><pre><code>mysql: Switching to the default character set &apos;latin1&apos;.\n</code></pre><p>问题所在：操作系统编码问题</p>\n<p>解决方案：</p>\n<pre><code>step1.更改操作系统字符集(shell命令)\n\n    vim /etc/sysconfig/i18n   将LANG=&quot;zh_CN.GB18030&quot;改成LANG=&quot;zh_CN.UTF-8&quot;\n\nstep2.设置环境变量(shell命令)\n\n    exoport LANG = &quot;zh_CN.UTF-8&quot;\n\nstep3.立刻生效环境更改\n\n    source /etc/profile\n</code></pre><h4 id=\"2-mysql登录\"><a href=\"#2-mysql登录\" class=\"headerlink\" title=\"2.mysql登录\"></a>2.mysql登录</h4><pre><code>mysql -u root p123456   &lt;!-- 假设root为数据库用户名，123456为数据库密码--&gt;\n</code></pre><h4 id=\"3-使用数据库管理工具navicat连接远程数据库出现无法连接的问题\"><a href=\"#3-使用数据库管理工具navicat连接远程数据库出现无法连接的问题\" class=\"headerlink\" title=\"3.使用数据库管理工具navicat连接远程数据库出现无法连接的问题\"></a>3.使用数据库管理工具navicat连接远程数据库出现无法连接的问题</h4><p><img src=\"/assets/images/Linkerror.png\" alt=\"远程连接错误\"></p>\n<p>排查错误：</p>\n<p>1.远程服务器端口3306是否打开</p>\n<pre><code>step1:客户机上 telnet ipAddress 3306，看服务器的3306端口是否被打开\n</code></pre><p><img src=\"/assets/images/mysqlport.png\" alt=\"mysql port\"></p>\n<p>2.远程服务器是否不允许从远程登陆</p>\n<pre><code>运行shell命令：netstat -an | grep 3306\n\n如果上图红色部分为127.0.0.1，则说明只能本机访问，不被允许远程访问\n</code></pre><p>解决方案：登录服务器mysql，设置允许客户机192.168.30.105以用户root,密码root登陆</p>\n<pre><code>GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;192.168.30.105&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"lnmp环境安装及解决遇到的问题\"><a href=\"#lnmp环境安装及解决遇到的问题\" class=\"headerlink\" title=\"lnmp环境安装及解决遇到的问题\"></a>lnmp环境安装及解决遇到的问题</h3><p>今天搭建了2台linux服务器lnmp环境，安装的过程中也是遇到一些问题。总结一下：如果nginx，mysql，php安装了多次，即使卸载，但是进程仍然在运行，所以每次重新安装的时候，最好kill掉原进程。在解决问题的过程中，还学了一些平时没怎么用的linux命令，算是另外的收获吧，折腾一天也值了。</p>\n<h4 id=\"shell命令一键安装lnmp：\"><a href=\"#shell命令一键安装lnmp：\" class=\"headerlink\" title=\"shell命令一键安装lnmp：\"></a>shell命令一键安装lnmp：</h4><p>CentOS系统下执行：wget -c <a href=\"http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz\" target=\"_blank\" rel=\"external\">http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz</a> &amp;&amp; tar zxf lnmp1.1-full.tar.gz &amp;&amp; cd lnmp1.1-full &amp;&amp; ./centos.sh</p>\n<p>Debian系统下执行：wget -c <a href=\"http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz\" target=\"_blank\" rel=\"external\">http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz</a> &amp;&amp; tar zxf lnmp1.1-full.tar.gz &amp;&amp; cd lnmp1.1-full &amp;&amp; ./debian.sh</p>\n<p>Ubuntu系统下执行：wget -c <a href=\"http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz\" target=\"_blank\" rel=\"external\">http://soft.vpser.net/lnmp/lnmp1.1-full.tar.gz</a> &amp;&amp; tar zxf lnmp1.1-full.tar.gz &amp;&amp; cd lnmp1.1-full &amp;&amp; ./ubuntu.sh</p>\n<p>更多了解访问<a href=\"http://lnmp.org/install.html\" target=\"_blank\">lnmp官网</a></p>\n<p>测试lnmp安装是否成功：</p>\n<pre><code>service nginx status;\nservice mysql status;\n</code></pre><h4 id=\"navicat软件下载-数据库管理软件-可以连接远程数据库\"><a href=\"#navicat软件下载-数据库管理软件-可以连接远程数据库\" class=\"headerlink\" title=\"navicat软件下载(数据库管理软件,可以连接远程数据库)\"></a>navicat软件下载(数据库管理软件,可以连接远程数据库)</h4><p><a href=\"http://pan.baidu.com/s/1qW6uj5y\" target=\"_blank\" rel=\"external\">点击下载</a></p>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><h4 id=\"1-mysql-Unknown-OS-character-set-‘GB18030’\"><a href=\"#1-mysql-Unknown-OS-character-set-‘GB18030’\" class=\"headerlink\" title=\"1.mysql: Unknown OS character set ‘GB18030’.\"></a>1.mysql: Unknown OS character set ‘GB18030’.</h4><pre><code>mysql: Switching to the default character set &apos;latin1&apos;.\n</code></pre><p>问题所在：操作系统编码问题</p>\n<p>解决方案：</p>\n<pre><code>step1.更改操作系统字符集(shell命令)\n\n    vim /etc/sysconfig/i18n   将LANG=&quot;zh_CN.GB18030&quot;改成LANG=&quot;zh_CN.UTF-8&quot;\n\nstep2.设置环境变量(shell命令)\n\n    exoport LANG = &quot;zh_CN.UTF-8&quot;\n\nstep3.立刻生效环境更改\n\n    source /etc/profile\n</code></pre><h4 id=\"2-mysql登录\"><a href=\"#2-mysql登录\" class=\"headerlink\" title=\"2.mysql登录\"></a>2.mysql登录</h4><pre><code>mysql -u root p123456   &lt;!-- 假设root为数据库用户名，123456为数据库密码--&gt;\n</code></pre><h4 id=\"3-使用数据库管理工具navicat连接远程数据库出现无法连接的问题\"><a href=\"#3-使用数据库管理工具navicat连接远程数据库出现无法连接的问题\" class=\"headerlink\" title=\"3.使用数据库管理工具navicat连接远程数据库出现无法连接的问题\"></a>3.使用数据库管理工具navicat连接远程数据库出现无法连接的问题</h4><p><img src=\"/assets/images/Linkerror.png\" alt=\"远程连接错误\"></p>\n<p>排查错误：</p>\n<p>1.远程服务器端口3306是否打开</p>\n<pre><code>step1:客户机上 telnet ipAddress 3306，看服务器的3306端口是否被打开\n</code></pre><p><img src=\"/assets/images/mysqlport.png\" alt=\"mysql port\"></p>\n<p>2.远程服务器是否不允许从远程登陆</p>\n<pre><code>运行shell命令：netstat -an | grep 3306\n\n如果上图红色部分为127.0.0.1，则说明只能本机访问，不被允许远程访问\n</code></pre><p>解决方案：登录服务器mysql，设置允许客户机192.168.30.105以用户root,密码root登陆</p>\n<pre><code>GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;192.168.30.105&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;\n</code></pre>"},{"title":"linux下使用g++编译，gdb调试c++程序","date":"2014-07-01T00:00:00.000Z","_content":"\n### linux下编译调试c++程序\n\n都说不会调试的程序员不是好程序员，今天终于通过看相关博客，进社区，动手实践三大步骤，把linux下编译和调试c++程序过了一遍。\n本文主要写linux下使用Vim编辑器写c++程序，然后通过g++编译器对程序进行编译，最后用gdb调试工具进行调速，命令行式的调试，有助于学习并熟知linux环境下c++/c编程操作。\n\n一般来说，GCC主要帮忙你完成一下四方面的功能：\n\n    1.预处理\n    2.编译\n    3.汇编\n    4.连接\n\n特点：支持多语言，多系统\n\n一般来说，GDB主要帮忙你完成下面四个方面的功能：\n\n    1、启动你的程序，可以按照你的自定义的要求随心所欲的运行程序。\n    2、可让被调试的程序在你所指定的调置的断点处停住。（断点可以是条件表达式）\n    3、当程序被停住时，可以检查此时你的程序中所发生的事。\n    4、动态的改变你程序的执行环境。\n\n特点:命令行式的调试工具，非图形化操作\n\n编译c/c++程序命令:\n\n    gcc -o demo demo.c\n    g++ -g -o demo demo.cpp\n\ngdb基本命令列表：\n\n![蔡金林的博客之GDB命令](/assets/images/gdb.png)\n\n以我在leetcode(https://oj.leetcode.com/)上面AC的一道题目\"Reverse Words in a String\"来分析：\n\n1.使用vim编辑器编写c++程序\n\n![蔡金林的博客之反转字符串并去掉多余空格类](/assets/images/Reverseclass.png)\n\n主函数main:\n\n    #include<iostream>\n    #include<algorithm>\n    #include<string>\n    int main()\n    {\n         string inputstr;\n         getline(cin,inputstr);\n         Solution *s =  new Solution();\n         s->reverseWords(inputstr);\n         delete s;\n         cout<<inputstr<<endl;\n    }\n\n2.gcc编译,生成可执行文件,注意必须使用-g参数，编译会加入调试信息否则无法执行文件\n\n    g++ -g -o demo demo.cpp\n\n3.gdb调试\n\n![蔡金林的博客](/assets/images/gdbstart.png)\n\n3.1查看源文件 list 1,回车，直到显示完整程序\n\n![蔡金林的博客](/assets/images/gdblist.png)\n\n3.2设置断点 break 8,在第8行设置断点，info break查看断点信息\n\n![蔡金林的博客](/assets/images/gdbbreak.png)\n\n3.3调试运行 输入run 或者r \n\n进行程序的输入\n\n       the sky is   blue \n\n![蔡金林的博客](/assets/images/gdbrun.png)\n\n3.4单步调试，输入step 或者 s进入函数内部\n\n![蔡金林的博客](/assets/images/gdbstep.png)\n\n3.5查看变量 输入print 变量 或者 p 变量\n\n![蔡金林的博客](/assets/images/gdbprint.png)\n\n3.6继续运行直到下一个断点或主函数结束 输入continue或者 c\n\n程序结果\n\n    blue is sky the\n\n![蔡金林的博客](/assets/images/gdbcontinue.png)\n\n\n3.7 退出调试 输入q\n","source":"_posts/linux下使用g-编译，gdb调试c-程序.md","raw":"---\ntitle: linux下使用g++编译，gdb调试c++程序\ntags: []\ndate: 2014-07-01 08:00:00\n---\n\n### linux下编译调试c++程序\n\n都说不会调试的程序员不是好程序员，今天终于通过看相关博客，进社区，动手实践三大步骤，把linux下编译和调试c++程序过了一遍。\n本文主要写linux下使用Vim编辑器写c++程序，然后通过g++编译器对程序进行编译，最后用gdb调试工具进行调速，命令行式的调试，有助于学习并熟知linux环境下c++/c编程操作。\n\n一般来说，GCC主要帮忙你完成一下四方面的功能：\n\n    1.预处理\n    2.编译\n    3.汇编\n    4.连接\n\n特点：支持多语言，多系统\n\n一般来说，GDB主要帮忙你完成下面四个方面的功能：\n\n    1、启动你的程序，可以按照你的自定义的要求随心所欲的运行程序。\n    2、可让被调试的程序在你所指定的调置的断点处停住。（断点可以是条件表达式）\n    3、当程序被停住时，可以检查此时你的程序中所发生的事。\n    4、动态的改变你程序的执行环境。\n\n特点:命令行式的调试工具，非图形化操作\n\n编译c/c++程序命令:\n\n    gcc -o demo demo.c\n    g++ -g -o demo demo.cpp\n\ngdb基本命令列表：\n\n![蔡金林的博客之GDB命令](/assets/images/gdb.png)\n\n以我在leetcode(https://oj.leetcode.com/)上面AC的一道题目\"Reverse Words in a String\"来分析：\n\n1.使用vim编辑器编写c++程序\n\n![蔡金林的博客之反转字符串并去掉多余空格类](/assets/images/Reverseclass.png)\n\n主函数main:\n\n    #include<iostream>\n    #include<algorithm>\n    #include<string>\n    int main()\n    {\n         string inputstr;\n         getline(cin,inputstr);\n         Solution *s =  new Solution();\n         s->reverseWords(inputstr);\n         delete s;\n         cout<<inputstr<<endl;\n    }\n\n2.gcc编译,生成可执行文件,注意必须使用-g参数，编译会加入调试信息否则无法执行文件\n\n    g++ -g -o demo demo.cpp\n\n3.gdb调试\n\n![蔡金林的博客](/assets/images/gdbstart.png)\n\n3.1查看源文件 list 1,回车，直到显示完整程序\n\n![蔡金林的博客](/assets/images/gdblist.png)\n\n3.2设置断点 break 8,在第8行设置断点，info break查看断点信息\n\n![蔡金林的博客](/assets/images/gdbbreak.png)\n\n3.3调试运行 输入run 或者r \n\n进行程序的输入\n\n       the sky is   blue \n\n![蔡金林的博客](/assets/images/gdbrun.png)\n\n3.4单步调试，输入step 或者 s进入函数内部\n\n![蔡金林的博客](/assets/images/gdbstep.png)\n\n3.5查看变量 输入print 变量 或者 p 变量\n\n![蔡金林的博客](/assets/images/gdbprint.png)\n\n3.6继续运行直到下一个断点或主函数结束 输入continue或者 c\n\n程序结果\n\n    blue is sky the\n\n![蔡金林的博客](/assets/images/gdbcontinue.png)\n\n\n3.7 退出调试 输入q\n","slug":"linux下使用g-编译，gdb调试c-程序","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwrv000l2o5pdn8laewp","content":"<h3 id=\"linux下编译调试c-程序\"><a href=\"#linux下编译调试c-程序\" class=\"headerlink\" title=\"linux下编译调试c++程序\"></a>linux下编译调试c++程序</h3><p>都说不会调试的程序员不是好程序员，今天终于通过看相关博客，进社区，动手实践三大步骤，把linux下编译和调试c++程序过了一遍。<br>本文主要写linux下使用Vim编辑器写c++程序，然后通过g++编译器对程序进行编译，最后用gdb调试工具进行调速，命令行式的调试，有助于学习并熟知linux环境下c++/c编程操作。</p>\n<p>一般来说，GCC主要帮忙你完成一下四方面的功能：</p>\n<pre><code>1.预处理\n2.编译\n3.汇编\n4.连接\n</code></pre><p>特点：支持多语言，多系统</p>\n<p>一般来说，GDB主要帮忙你完成下面四个方面的功能：</p>\n<pre><code>1、启动你的程序，可以按照你的自定义的要求随心所欲的运行程序。\n2、可让被调试的程序在你所指定的调置的断点处停住。（断点可以是条件表达式）\n3、当程序被停住时，可以检查此时你的程序中所发生的事。\n4、动态的改变你程序的执行环境。\n</code></pre><p>特点:命令行式的调试工具，非图形化操作</p>\n<p>编译c/c++程序命令:</p>\n<pre><code>gcc -o demo demo.c\ng++ -g -o demo demo.cpp\n</code></pre><p>gdb基本命令列表：</p>\n<p><img src=\"/assets/images/gdb.png\" alt=\"蔡金林的博客之GDB命令\"></p>\n<p>以我在leetcode(<a href=\"https://oj.leetcode.com/)上面AC的一道题目&quot;Reverse\" target=\"_blank\" rel=\"external\">https://oj.leetcode.com/)上面AC的一道题目&quot;Reverse</a> Words in a String”来分析：</p>\n<p>1.使用vim编辑器编写c++程序</p>\n<p><img src=\"/assets/images/Reverseclass.png\" alt=\"蔡金林的博客之反转字符串并去掉多余空格类\"></p>\n<p>主函数main:</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;string&gt;\nint main()\n{\n     string inputstr;\n     getline(cin,inputstr);\n     Solution *s =  new Solution();\n     s-&gt;reverseWords(inputstr);\n     delete s;\n     cout&lt;&lt;inputstr&lt;&lt;endl;\n}\n</code></pre><p>2.gcc编译,生成可执行文件,注意必须使用-g参数，编译会加入调试信息否则无法执行文件</p>\n<pre><code>g++ -g -o demo demo.cpp\n</code></pre><p>3.gdb调试</p>\n<p><img src=\"/assets/images/gdbstart.png\" alt=\"蔡金林的博客\"></p>\n<p>3.1查看源文件 list 1,回车，直到显示完整程序</p>\n<p><img src=\"/assets/images/gdblist.png\" alt=\"蔡金林的博客\"></p>\n<p>3.2设置断点 break 8,在第8行设置断点，info break查看断点信息</p>\n<p><img src=\"/assets/images/gdbbreak.png\" alt=\"蔡金林的博客\"></p>\n<p>3.3调试运行 输入run 或者r </p>\n<p>进行程序的输入</p>\n<pre><code>the sky is   blue \n</code></pre><p><img src=\"/assets/images/gdbrun.png\" alt=\"蔡金林的博客\"></p>\n<p>3.4单步调试，输入step 或者 s进入函数内部</p>\n<p><img src=\"/assets/images/gdbstep.png\" alt=\"蔡金林的博客\"></p>\n<p>3.5查看变量 输入print 变量 或者 p 变量</p>\n<p><img src=\"/assets/images/gdbprint.png\" alt=\"蔡金林的博客\"></p>\n<p>3.6继续运行直到下一个断点或主函数结束 输入continue或者 c</p>\n<p>程序结果</p>\n<pre><code>blue is sky the\n</code></pre><p><img src=\"/assets/images/gdbcontinue.png\" alt=\"蔡金林的博客\"></p>\n<p>3.7 退出调试 输入q</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"linux下编译调试c-程序\"><a href=\"#linux下编译调试c-程序\" class=\"headerlink\" title=\"linux下编译调试c++程序\"></a>linux下编译调试c++程序</h3><p>都说不会调试的程序员不是好程序员，今天终于通过看相关博客，进社区，动手实践三大步骤，把linux下编译和调试c++程序过了一遍。<br>本文主要写linux下使用Vim编辑器写c++程序，然后通过g++编译器对程序进行编译，最后用gdb调试工具进行调速，命令行式的调试，有助于学习并熟知linux环境下c++/c编程操作。</p>\n<p>一般来说，GCC主要帮忙你完成一下四方面的功能：</p>\n<pre><code>1.预处理\n2.编译\n3.汇编\n4.连接\n</code></pre><p>特点：支持多语言，多系统</p>\n<p>一般来说，GDB主要帮忙你完成下面四个方面的功能：</p>\n<pre><code>1、启动你的程序，可以按照你的自定义的要求随心所欲的运行程序。\n2、可让被调试的程序在你所指定的调置的断点处停住。（断点可以是条件表达式）\n3、当程序被停住时，可以检查此时你的程序中所发生的事。\n4、动态的改变你程序的执行环境。\n</code></pre><p>特点:命令行式的调试工具，非图形化操作</p>\n<p>编译c/c++程序命令:</p>\n<pre><code>gcc -o demo demo.c\ng++ -g -o demo demo.cpp\n</code></pre><p>gdb基本命令列表：</p>\n<p><img src=\"/assets/images/gdb.png\" alt=\"蔡金林的博客之GDB命令\"></p>\n<p>以我在leetcode(<a href=\"https://oj.leetcode.com/)上面AC的一道题目&quot;Reverse\" target=\"_blank\" rel=\"external\">https://oj.leetcode.com/)上面AC的一道题目&quot;Reverse</a> Words in a String”来分析：</p>\n<p>1.使用vim编辑器编写c++程序</p>\n<p><img src=\"/assets/images/Reverseclass.png\" alt=\"蔡金林的博客之反转字符串并去掉多余空格类\"></p>\n<p>主函数main:</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;string&gt;\nint main()\n{\n     string inputstr;\n     getline(cin,inputstr);\n     Solution *s =  new Solution();\n     s-&gt;reverseWords(inputstr);\n     delete s;\n     cout&lt;&lt;inputstr&lt;&lt;endl;\n}\n</code></pre><p>2.gcc编译,生成可执行文件,注意必须使用-g参数，编译会加入调试信息否则无法执行文件</p>\n<pre><code>g++ -g -o demo demo.cpp\n</code></pre><p>3.gdb调试</p>\n<p><img src=\"/assets/images/gdbstart.png\" alt=\"蔡金林的博客\"></p>\n<p>3.1查看源文件 list 1,回车，直到显示完整程序</p>\n<p><img src=\"/assets/images/gdblist.png\" alt=\"蔡金林的博客\"></p>\n<p>3.2设置断点 break 8,在第8行设置断点，info break查看断点信息</p>\n<p><img src=\"/assets/images/gdbbreak.png\" alt=\"蔡金林的博客\"></p>\n<p>3.3调试运行 输入run 或者r </p>\n<p>进行程序的输入</p>\n<pre><code>the sky is   blue \n</code></pre><p><img src=\"/assets/images/gdbrun.png\" alt=\"蔡金林的博客\"></p>\n<p>3.4单步调试，输入step 或者 s进入函数内部</p>\n<p><img src=\"/assets/images/gdbstep.png\" alt=\"蔡金林的博客\"></p>\n<p>3.5查看变量 输入print 变量 或者 p 变量</p>\n<p><img src=\"/assets/images/gdbprint.png\" alt=\"蔡金林的博客\"></p>\n<p>3.6继续运行直到下一个断点或主函数结束 输入continue或者 c</p>\n<p>程序结果</p>\n<pre><code>blue is sky the\n</code></pre><p><img src=\"/assets/images/gdbcontinue.png\" alt=\"蔡金林的博客\"></p>\n<p>3.7 退出调试 输入q</p>\n"},{"title":"mac高效工具配置","date":"2016-04-12T00:00:00.000Z","_content":"\n### vim语法高亮\n\n在vim中输入命令:syntax on激活语法高亮，若需要Vim启动时自动激活，在~/.vimrc中添加一行syntax on即可。\n\n### iterm2 + zsh\n\nstep1.安装iterm2\n    \n[https://www.iterm2.com/](https://www.iterm2.com/)\n\nstep2.安装zsh, oh-my-zsh\n\n[http://macshuo.com/?p=676](http://macshuo.com/?p=676)\n\nstep3.设置默认shell为zsh\n\n    chsh -s /bin/zsh\n\n### chrome lastpass插件\n\n    记住网站密码，不用重复输入密码\n    \n### ssh免密码登录 [参考](http://dhq.me/use-ssh-config-manage-ssh-session)\n\n\nstep1.生成密钥 \n\n    ssh-keygen -t rsa -C \"caijinlin2012@gmail.com\"\n    这里使用 rsa 的加密方式（另外一种加密方式是 dsa），中间会询问密钥生成的位置，这里只输入 cjb，在当前位置生成名为 cjb 的密钥，接着会询问是否要设置一个密码(passphrase)，这里留空，直接按回车就行（本来就不想登陆输入密码了...），最后，会在当前目录路径下生成一个名为 cjb 的私钥，一个名为cjb.pub 的公钥。\n\nstep2.上传公钥到服务器 (如果方法一不行采用第二种)\n    \n    方法1.使用ssh-copy-id \n        安装ssh-copy-id: curl -L https://raw.githubusercontent.com/beautifulcode/ssh-copy-id-for-OSX/master/install.sh | sh \n        ssh-copy-id i ~/.ssh/cjl.pub root@182.92.5.70\n\n    方法2.\n        把公钥 cjb.pub 上传到远程 cjb 服务器的 ~/.ssh/ 目录下：\n        scp cjl.pub root@182.92.5.70:~/.ssh/\n        上传完后，登录到服务器，把公钥 cjb.pub 的内容复制到 authorized_keys 文件里（不存在则新创建一个）：\n        cat cjb.pub >> authorized_keys\n\nstep3. 加入配置文件\n\n    ~/.ssh下新建配置文件config\n        Host        cjb\n            HostName        216.194.70.6\n            Port            22\n            User            user\n            IdentityFile    ~/.ssh/cjb  \n        Host        cjh\n            HostName    182.92.5.70\n            Port        22\n            User        user\n\nstep4. ssh cjh \n\n        登录成功说明免密码登录成功了\n\n\n###  sublime过滤文件夹搜索\n\n    sublime text => Preferences => Setting - User 加入配置，过滤文件夹和文件类型\n\n    \"folder_exclude_patterns\": [\"Runtime\", \"._d\", \".metadata\", \".settings\"],\n    \"file_exclude_patterns\": [\"*.pyc\", \"*.pyo\", \".project\"]\n\n","source":"_posts/mac-tool.md","raw":"---\ntitle: mac高效工具配置\ntags: []\ndate: 2016-04-12 08:00:00\n---\n\n### vim语法高亮\n\n在vim中输入命令:syntax on激活语法高亮，若需要Vim启动时自动激活，在~/.vimrc中添加一行syntax on即可。\n\n### iterm2 + zsh\n\nstep1.安装iterm2\n    \n[https://www.iterm2.com/](https://www.iterm2.com/)\n\nstep2.安装zsh, oh-my-zsh\n\n[http://macshuo.com/?p=676](http://macshuo.com/?p=676)\n\nstep3.设置默认shell为zsh\n\n    chsh -s /bin/zsh\n\n### chrome lastpass插件\n\n    记住网站密码，不用重复输入密码\n    \n### ssh免密码登录 [参考](http://dhq.me/use-ssh-config-manage-ssh-session)\n\n\nstep1.生成密钥 \n\n    ssh-keygen -t rsa -C \"caijinlin2012@gmail.com\"\n    这里使用 rsa 的加密方式（另外一种加密方式是 dsa），中间会询问密钥生成的位置，这里只输入 cjb，在当前位置生成名为 cjb 的密钥，接着会询问是否要设置一个密码(passphrase)，这里留空，直接按回车就行（本来就不想登陆输入密码了...），最后，会在当前目录路径下生成一个名为 cjb 的私钥，一个名为cjb.pub 的公钥。\n\nstep2.上传公钥到服务器 (如果方法一不行采用第二种)\n    \n    方法1.使用ssh-copy-id \n        安装ssh-copy-id: curl -L https://raw.githubusercontent.com/beautifulcode/ssh-copy-id-for-OSX/master/install.sh | sh \n        ssh-copy-id i ~/.ssh/cjl.pub root@182.92.5.70\n\n    方法2.\n        把公钥 cjb.pub 上传到远程 cjb 服务器的 ~/.ssh/ 目录下：\n        scp cjl.pub root@182.92.5.70:~/.ssh/\n        上传完后，登录到服务器，把公钥 cjb.pub 的内容复制到 authorized_keys 文件里（不存在则新创建一个）：\n        cat cjb.pub >> authorized_keys\n\nstep3. 加入配置文件\n\n    ~/.ssh下新建配置文件config\n        Host        cjb\n            HostName        216.194.70.6\n            Port            22\n            User            user\n            IdentityFile    ~/.ssh/cjb  \n        Host        cjh\n            HostName    182.92.5.70\n            Port        22\n            User        user\n\nstep4. ssh cjh \n\n        登录成功说明免密码登录成功了\n\n\n###  sublime过滤文件夹搜索\n\n    sublime text => Preferences => Setting - User 加入配置，过滤文件夹和文件类型\n\n    \"folder_exclude_patterns\": [\"Runtime\", \"._d\", \".metadata\", \".settings\"],\n    \"file_exclude_patterns\": [\"*.pyc\", \"*.pyo\", \".project\"]\n\n","slug":"mac-tool","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwry000n2o5pv479rcfj","content":"<h3 id=\"vim语法高亮\"><a href=\"#vim语法高亮\" class=\"headerlink\" title=\"vim语法高亮\"></a>vim语法高亮</h3><p>在vim中输入命令:syntax on激活语法高亮，若需要Vim启动时自动激活，在~/.vimrc中添加一行syntax on即可。</p>\n<h3 id=\"iterm2-zsh\"><a href=\"#iterm2-zsh\" class=\"headerlink\" title=\"iterm2 + zsh\"></a>iterm2 + zsh</h3><p>step1.安装iterm2</p>\n<p><a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"external\">https://www.iterm2.com/</a></p>\n<p>step2.安装zsh, oh-my-zsh</p>\n<p><a href=\"http://macshuo.com/?p=676\" target=\"_blank\" rel=\"external\">http://macshuo.com/?p=676</a></p>\n<p>step3.设置默认shell为zsh</p>\n<pre><code>chsh -s /bin/zsh\n</code></pre><h3 id=\"chrome-lastpass插件\"><a href=\"#chrome-lastpass插件\" class=\"headerlink\" title=\"chrome lastpass插件\"></a>chrome lastpass插件</h3><pre><code>记住网站密码，不用重复输入密码\n</code></pre><h3 id=\"ssh免密码登录-参考\"><a href=\"#ssh免密码登录-参考\" class=\"headerlink\" title=\"ssh免密码登录 参考\"></a>ssh免密码登录 <a href=\"http://dhq.me/use-ssh-config-manage-ssh-session\" target=\"_blank\" rel=\"external\">参考</a></h3><p>step1.生成密钥 </p>\n<pre><code>ssh-keygen -t rsa -C &quot;caijinlin2012@gmail.com&quot;\n这里使用 rsa 的加密方式（另外一种加密方式是 dsa），中间会询问密钥生成的位置，这里只输入 cjb，在当前位置生成名为 cjb 的密钥，接着会询问是否要设置一个密码(passphrase)，这里留空，直接按回车就行（本来就不想登陆输入密码了...），最后，会在当前目录路径下生成一个名为 cjb 的私钥，一个名为cjb.pub 的公钥。\n</code></pre><p>step2.上传公钥到服务器 (如果方法一不行采用第二种)</p>\n<pre><code>方法1.使用ssh-copy-id \n    安装ssh-copy-id: curl -L https://raw.githubusercontent.com/beautifulcode/ssh-copy-id-for-OSX/master/install.sh | sh \n    ssh-copy-id i ~/.ssh/cjl.pub root@182.92.5.70\n\n方法2.\n    把公钥 cjb.pub 上传到远程 cjb 服务器的 ~/.ssh/ 目录下：\n    scp cjl.pub root@182.92.5.70:~/.ssh/\n    上传完后，登录到服务器，把公钥 cjb.pub 的内容复制到 authorized_keys 文件里（不存在则新创建一个）：\n    cat cjb.pub &gt;&gt; authorized_keys\n</code></pre><p>step3. 加入配置文件</p>\n<pre><code>~/.ssh下新建配置文件config\n    Host        cjb\n        HostName        216.194.70.6\n        Port            22\n        User            user\n        IdentityFile    ~/.ssh/cjb  \n    Host        cjh\n        HostName    182.92.5.70\n        Port        22\n        User        user\n</code></pre><p>step4. ssh cjh </p>\n<pre><code>登录成功说明免密码登录成功了\n</code></pre><h3 id=\"sublime过滤文件夹搜索\"><a href=\"#sublime过滤文件夹搜索\" class=\"headerlink\" title=\"sublime过滤文件夹搜索\"></a>sublime过滤文件夹搜索</h3><pre><code>sublime text =&gt; Preferences =&gt; Setting - User 加入配置，过滤文件夹和文件类型\n\n&quot;folder_exclude_patterns&quot;: [&quot;Runtime&quot;, &quot;._d&quot;, &quot;.metadata&quot;, &quot;.settings&quot;],\n&quot;file_exclude_patterns&quot;: [&quot;*.pyc&quot;, &quot;*.pyo&quot;, &quot;.project&quot;]\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"vim语法高亮\"><a href=\"#vim语法高亮\" class=\"headerlink\" title=\"vim语法高亮\"></a>vim语法高亮</h3><p>在vim中输入命令:syntax on激活语法高亮，若需要Vim启动时自动激活，在~/.vimrc中添加一行syntax on即可。</p>\n<h3 id=\"iterm2-zsh\"><a href=\"#iterm2-zsh\" class=\"headerlink\" title=\"iterm2 + zsh\"></a>iterm2 + zsh</h3><p>step1.安装iterm2</p>\n<p><a href=\"https://www.iterm2.com/\" target=\"_blank\" rel=\"external\">https://www.iterm2.com/</a></p>\n<p>step2.安装zsh, oh-my-zsh</p>\n<p><a href=\"http://macshuo.com/?p=676\" target=\"_blank\" rel=\"external\">http://macshuo.com/?p=676</a></p>\n<p>step3.设置默认shell为zsh</p>\n<pre><code>chsh -s /bin/zsh\n</code></pre><h3 id=\"chrome-lastpass插件\"><a href=\"#chrome-lastpass插件\" class=\"headerlink\" title=\"chrome lastpass插件\"></a>chrome lastpass插件</h3><pre><code>记住网站密码，不用重复输入密码\n</code></pre><h3 id=\"ssh免密码登录-参考\"><a href=\"#ssh免密码登录-参考\" class=\"headerlink\" title=\"ssh免密码登录 参考\"></a>ssh免密码登录 <a href=\"http://dhq.me/use-ssh-config-manage-ssh-session\" target=\"_blank\" rel=\"external\">参考</a></h3><p>step1.生成密钥 </p>\n<pre><code>ssh-keygen -t rsa -C &quot;caijinlin2012@gmail.com&quot;\n这里使用 rsa 的加密方式（另外一种加密方式是 dsa），中间会询问密钥生成的位置，这里只输入 cjb，在当前位置生成名为 cjb 的密钥，接着会询问是否要设置一个密码(passphrase)，这里留空，直接按回车就行（本来就不想登陆输入密码了...），最后，会在当前目录路径下生成一个名为 cjb 的私钥，一个名为cjb.pub 的公钥。\n</code></pre><p>step2.上传公钥到服务器 (如果方法一不行采用第二种)</p>\n<pre><code>方法1.使用ssh-copy-id \n    安装ssh-copy-id: curl -L https://raw.githubusercontent.com/beautifulcode/ssh-copy-id-for-OSX/master/install.sh | sh \n    ssh-copy-id i ~/.ssh/cjl.pub root@182.92.5.70\n\n方法2.\n    把公钥 cjb.pub 上传到远程 cjb 服务器的 ~/.ssh/ 目录下：\n    scp cjl.pub root@182.92.5.70:~/.ssh/\n    上传完后，登录到服务器，把公钥 cjb.pub 的内容复制到 authorized_keys 文件里（不存在则新创建一个）：\n    cat cjb.pub &gt;&gt; authorized_keys\n</code></pre><p>step3. 加入配置文件</p>\n<pre><code>~/.ssh下新建配置文件config\n    Host        cjb\n        HostName        216.194.70.6\n        Port            22\n        User            user\n        IdentityFile    ~/.ssh/cjb  \n    Host        cjh\n        HostName    182.92.5.70\n        Port        22\n        User        user\n</code></pre><p>step4. ssh cjh </p>\n<pre><code>登录成功说明免密码登录成功了\n</code></pre><h3 id=\"sublime过滤文件夹搜索\"><a href=\"#sublime过滤文件夹搜索\" class=\"headerlink\" title=\"sublime过滤文件夹搜索\"></a>sublime过滤文件夹搜索</h3><pre><code>sublime text =&gt; Preferences =&gt; Setting - User 加入配置，过滤文件夹和文件类型\n\n&quot;folder_exclude_patterns&quot;: [&quot;Runtime&quot;, &quot;._d&quot;, &quot;.metadata&quot;, &quot;.settings&quot;],\n&quot;file_exclude_patterns&quot;: [&quot;*.pyc&quot;, &quot;*.pyo&quot;, &quot;.project&quot;]\n</code></pre>"},{"title":"迁移jekyll到hexo","date":"2017-03-07T00:02:28.000Z","_content":"\n### 一个美好的开始\n\n原先的博客是通过jekyll生成的，现迁移到到hexo，通过原博客的xss文件完成文章的迁移\n\n### 从xss迁移文章\n\n获取原博客的文章rss，放在博客根目录下，通过hexo-migrator-rss导入进来，十分高效，时间自动转化了。\n\n```bash\nnpm install hexo-migrator-rss --save\nhexo migrate rss old.xml\n```\n\n### 迁移过程\n\n![](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/hexo-migrate-xml.jpg)","source":"_posts/migrate-jekyll-to-hexo.md","raw":"---\ntitle: 迁移jekyll到hexo\ndate: 2017-03-07 08:02:28\ntags: [hexo, jekyll]\ncategories: 技术\n---\n\n### 一个美好的开始\n\n原先的博客是通过jekyll生成的，现迁移到到hexo，通过原博客的xss文件完成文章的迁移\n\n### 从xss迁移文章\n\n获取原博客的文章rss，放在博客根目录下，通过hexo-migrator-rss导入进来，十分高效，时间自动转化了。\n\n```bash\nnpm install hexo-migrator-rss --save\nhexo migrate rss old.xml\n```\n\n### 迁移过程\n\n![](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/hexo-migrate-xml.jpg)","slug":"migrate-jekyll-to-hexo","published":1,"updated":"2017-03-11T01:06:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wws1000o2o5p3dwulal6","content":"<h3 id=\"一个美好的开始\"><a href=\"#一个美好的开始\" class=\"headerlink\" title=\"一个美好的开始\"></a>一个美好的开始</h3><p>原先的博客是通过jekyll生成的，现迁移到到hexo，通过原博客的xss文件完成文章的迁移</p>\n<h3 id=\"从xss迁移文章\"><a href=\"#从xss迁移文章\" class=\"headerlink\" title=\"从xss迁移文章\"></a>从xss迁移文章</h3><p>获取原博客的文章rss，放在博客根目录下，通过hexo-migrator-rss导入进来，十分高效，时间自动转化了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-migrator-rss --save</div><div class=\"line\">hexo migrate rss old.xml</div></pre></td></tr></table></figure>\n<h3 id=\"迁移过程\"><a href=\"#迁移过程\" class=\"headerlink\" title=\"迁移过程\"></a>迁移过程</h3><p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/hexo-migrate-xml.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一个美好的开始\"><a href=\"#一个美好的开始\" class=\"headerlink\" title=\"一个美好的开始\"></a>一个美好的开始</h3><p>原先的博客是通过jekyll生成的，现迁移到到hexo，通过原博客的xss文件完成文章的迁移</p>\n<h3 id=\"从xss迁移文章\"><a href=\"#从xss迁移文章\" class=\"headerlink\" title=\"从xss迁移文章\"></a>从xss迁移文章</h3><p>获取原博客的文章rss，放在博客根目录下，通过hexo-migrator-rss导入进来，十分高效，时间自动转化了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-migrator-rss --save</div><div class=\"line\">hexo migrate rss old.xml</div></pre></td></tr></table></figure>\n<h3 id=\"迁移过程\"><a href=\"#迁移过程\" class=\"headerlink\" title=\"迁移过程\"></a>迁移过程</h3><p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/hexo-migrate-xml.jpg\" alt=\"\"></p>\n"},{"title":"mongodb安装及使用(二)","date":"2015-01-12T00:00:00.000Z","_content":"\n### Windows下mongodb安装及使用\n\n对于开发人员来说，安装环境应该是一件很简单的事情，可每次都搞得这么臃肿，关键在于没能理会其精华。如果你的阅历还不够，可能会有很多坑在等着你。今天在安装Mongodb的时候就遇到了用MongoVUE连接远程mongodb的坑。\n\n\n上一篇文章讲述<a href=\"http://caijinlin.github.io/php/2015-01/linux-mongodb.html\" target=\"_blank\">linux下mongodb安装及使用</a>，这一篇讲windows下Mongodb安装以及所遇到的坑。\n\nstep1.Download\n\n<a href=\"http://pan.baidu.com/s/1bnjKMkf\">点击下载</a>\n\nstep2.Install\n\n解压下载文件到D:\\mongodb(比如)\n\nstep3.Start Server(在D:\\mongodb下)\n\n    mkdir data\n    mkdir logs\n    cd bin\n    mongod --dbpath D:\\mongodb\\data  (启动服务器端)\n\nstep4.Start Client(在D:\\mongodb下)\n\n    cd bin\n    mongo\n    show dbs;\n    use admin\n    db.addUser(\"root\",123456)     //添加mongo用户，可以作为登录名\n    db.auth(\"root\",'123456');     //认证是否登录成功\n\nstep5.Install Servicet(在D:\\mongodb下)\n\n每次开机运行都需要在（cmd）下面手动运行Mongodb,所以将Mongo数据库安装成为Windows服务.\n   \n   D:\\mongodb\\bin>mongod --logpath D:\\mongodb\\logs\\MongoDB.log --logappend --dbpath D:\\mongodb\\data --directoryperdb --serviceName MongoDB --install\n\n<font style=\"font:red\">注意：必须为管理员权限， 否则无法创建服务</font>\n\n安装服务成功后：\n   \n    启动MongoDB：net start MongoDB\n    停止MongoDB：net stop MongoDB\n    删除MongoDB：sc delete MongoDB\n\n### 安装MongoVUE\n\n为了使mongodb可视化，安装Mongodb图形化管理工具,<a href=\"http://pan.baidu.com/s/1hqpaxMk\" target=\"_blank\">点击下载Mongodb客户端</a>\n\n注意：连接时几个选项:\n\n    Server：主机名或者ip\n    Port：端口，一般为27017\n    Username:当连本机时，可以不填；远程就填刚才在Mongo中创建的admin用户，不是计算机用户\n    Password:当连本机时，可以不填；远程就填刚才在Mongo中创建的admin密码，不是计算机密码\n","source":"_posts/mongodb安装及使用-二.md","raw":"---\ntitle: mongodb安装及使用(二)\ntags: []\ndate: 2015-01-12 08:00:00\n---\n\n### Windows下mongodb安装及使用\n\n对于开发人员来说，安装环境应该是一件很简单的事情，可每次都搞得这么臃肿，关键在于没能理会其精华。如果你的阅历还不够，可能会有很多坑在等着你。今天在安装Mongodb的时候就遇到了用MongoVUE连接远程mongodb的坑。\n\n\n上一篇文章讲述<a href=\"http://caijinlin.github.io/php/2015-01/linux-mongodb.html\" target=\"_blank\">linux下mongodb安装及使用</a>，这一篇讲windows下Mongodb安装以及所遇到的坑。\n\nstep1.Download\n\n<a href=\"http://pan.baidu.com/s/1bnjKMkf\">点击下载</a>\n\nstep2.Install\n\n解压下载文件到D:\\mongodb(比如)\n\nstep3.Start Server(在D:\\mongodb下)\n\n    mkdir data\n    mkdir logs\n    cd bin\n    mongod --dbpath D:\\mongodb\\data  (启动服务器端)\n\nstep4.Start Client(在D:\\mongodb下)\n\n    cd bin\n    mongo\n    show dbs;\n    use admin\n    db.addUser(\"root\",123456)     //添加mongo用户，可以作为登录名\n    db.auth(\"root\",'123456');     //认证是否登录成功\n\nstep5.Install Servicet(在D:\\mongodb下)\n\n每次开机运行都需要在（cmd）下面手动运行Mongodb,所以将Mongo数据库安装成为Windows服务.\n   \n   D:\\mongodb\\bin>mongod --logpath D:\\mongodb\\logs\\MongoDB.log --logappend --dbpath D:\\mongodb\\data --directoryperdb --serviceName MongoDB --install\n\n<font style=\"font:red\">注意：必须为管理员权限， 否则无法创建服务</font>\n\n安装服务成功后：\n   \n    启动MongoDB：net start MongoDB\n    停止MongoDB：net stop MongoDB\n    删除MongoDB：sc delete MongoDB\n\n### 安装MongoVUE\n\n为了使mongodb可视化，安装Mongodb图形化管理工具,<a href=\"http://pan.baidu.com/s/1hqpaxMk\" target=\"_blank\">点击下载Mongodb客户端</a>\n\n注意：连接时几个选项:\n\n    Server：主机名或者ip\n    Port：端口，一般为27017\n    Username:当连本机时，可以不填；远程就填刚才在Mongo中创建的admin用户，不是计算机用户\n    Password:当连本机时，可以不填；远程就填刚才在Mongo中创建的admin密码，不是计算机密码\n","slug":"mongodb安装及使用-二","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wws3000q2o5pyrfjtnnw","content":"<h3 id=\"Windows下mongodb安装及使用\"><a href=\"#Windows下mongodb安装及使用\" class=\"headerlink\" title=\"Windows下mongodb安装及使用\"></a>Windows下mongodb安装及使用</h3><p>对于开发人员来说，安装环境应该是一件很简单的事情，可每次都搞得这么臃肿，关键在于没能理会其精华。如果你的阅历还不够，可能会有很多坑在等着你。今天在安装Mongodb的时候就遇到了用MongoVUE连接远程mongodb的坑。</p>\n<p>上一篇文章讲述<a href=\"http://caijinlin.github.io/php/2015-01/linux-mongodb.html\" target=\"_blank\">linux下mongodb安装及使用</a>，这一篇讲windows下Mongodb安装以及所遇到的坑。</p>\n<p>step1.Download</p>\n<p><a href=\"http://pan.baidu.com/s/1bnjKMkf\" target=\"_blank\" rel=\"external\">点击下载</a></p>\n<p>step2.Install</p>\n<p>解压下载文件到D:\\mongodb(比如)</p>\n<p>step3.Start Server(在D:\\mongodb下)</p>\n<pre><code>mkdir data\nmkdir logs\ncd bin\nmongod --dbpath D:\\mongodb\\data  (启动服务器端)\n</code></pre><p>step4.Start Client(在D:\\mongodb下)</p>\n<pre><code>cd bin\nmongo\nshow dbs;\nuse admin\ndb.addUser(&quot;root&quot;,123456)     //添加mongo用户，可以作为登录名\ndb.auth(&quot;root&quot;,&apos;123456&apos;);     //认证是否登录成功\n</code></pre><p>step5.Install Servicet(在D:\\mongodb下)</p>\n<p>每次开机运行都需要在（cmd）下面手动运行Mongodb,所以将Mongo数据库安装成为Windows服务.</p>\n<p>   D:\\mongodb\\bin&gt;mongod –logpath D:\\mongodb\\logs\\MongoDB.log –logappend –dbpath D:\\mongodb\\data –directoryperdb –serviceName MongoDB –install</p>\n<font style=\"font:red\">注意：必须为管理员权限， 否则无法创建服务</font>\n\n<p>安装服务成功后：</p>\n<pre><code>启动MongoDB：net start MongoDB\n停止MongoDB：net stop MongoDB\n删除MongoDB：sc delete MongoDB\n</code></pre><h3 id=\"安装MongoVUE\"><a href=\"#安装MongoVUE\" class=\"headerlink\" title=\"安装MongoVUE\"></a>安装MongoVUE</h3><p>为了使mongodb可视化，安装Mongodb图形化管理工具,<a href=\"http://pan.baidu.com/s/1hqpaxMk\" target=\"_blank\">点击下载Mongodb客户端</a></p>\n<p>注意：连接时几个选项:</p>\n<pre><code>Server：主机名或者ip\nPort：端口，一般为27017\nUsername:当连本机时，可以不填；远程就填刚才在Mongo中创建的admin用户，不是计算机用户\nPassword:当连本机时，可以不填；远程就填刚才在Mongo中创建的admin密码，不是计算机密码\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Windows下mongodb安装及使用\"><a href=\"#Windows下mongodb安装及使用\" class=\"headerlink\" title=\"Windows下mongodb安装及使用\"></a>Windows下mongodb安装及使用</h3><p>对于开发人员来说，安装环境应该是一件很简单的事情，可每次都搞得这么臃肿，关键在于没能理会其精华。如果你的阅历还不够，可能会有很多坑在等着你。今天在安装Mongodb的时候就遇到了用MongoVUE连接远程mongodb的坑。</p>\n<p>上一篇文章讲述<a href=\"http://caijinlin.github.io/php/2015-01/linux-mongodb.html\" target=\"_blank\">linux下mongodb安装及使用</a>，这一篇讲windows下Mongodb安装以及所遇到的坑。</p>\n<p>step1.Download</p>\n<p><a href=\"http://pan.baidu.com/s/1bnjKMkf\" target=\"_blank\" rel=\"external\">点击下载</a></p>\n<p>step2.Install</p>\n<p>解压下载文件到D:\\mongodb(比如)</p>\n<p>step3.Start Server(在D:\\mongodb下)</p>\n<pre><code>mkdir data\nmkdir logs\ncd bin\nmongod --dbpath D:\\mongodb\\data  (启动服务器端)\n</code></pre><p>step4.Start Client(在D:\\mongodb下)</p>\n<pre><code>cd bin\nmongo\nshow dbs;\nuse admin\ndb.addUser(&quot;root&quot;,123456)     //添加mongo用户，可以作为登录名\ndb.auth(&quot;root&quot;,&apos;123456&apos;);     //认证是否登录成功\n</code></pre><p>step5.Install Servicet(在D:\\mongodb下)</p>\n<p>每次开机运行都需要在（cmd）下面手动运行Mongodb,所以将Mongo数据库安装成为Windows服务.</p>\n<p>   D:\\mongodb\\bin&gt;mongod –logpath D:\\mongodb\\logs\\MongoDB.log –logappend –dbpath D:\\mongodb\\data –directoryperdb –serviceName MongoDB –install</p>\n<font style=\"font:red\">注意：必须为管理员权限， 否则无法创建服务</font>\n\n<p>安装服务成功后：</p>\n<pre><code>启动MongoDB：net start MongoDB\n停止MongoDB：net stop MongoDB\n删除MongoDB：sc delete MongoDB\n</code></pre><h3 id=\"安装MongoVUE\"><a href=\"#安装MongoVUE\" class=\"headerlink\" title=\"安装MongoVUE\"></a>安装MongoVUE</h3><p>为了使mongodb可视化，安装Mongodb图形化管理工具,<a href=\"http://pan.baidu.com/s/1hqpaxMk\" target=\"_blank\">点击下载Mongodb客户端</a></p>\n<p>注意：连接时几个选项:</p>\n<pre><code>Server：主机名或者ip\nPort：端口，一般为27017\nUsername:当连本机时，可以不填；远程就填刚才在Mongo中创建的admin用户，不是计算机用户\nPassword:当连本机时，可以不填；远程就填刚才在Mongo中创建的admin密码，不是计算机密码\n</code></pre>"},{"title":"mysql-optimization","date":"2017-06-05T13:26:44.000Z","_content":"\n### mysql优化实战攻略\n\n最近对数据库查询进行了一些优化策略，总结如下：\n\n### 加索引\n\n`最简单的方法就是加索引，合适且必要才加，而不是乱加，数据量达到几十万以上效果明显。`\n\n### 使用强制索引\n\n`程序中使用强制索引，解决数据库没有按照我们想要的索引进行查询，百万级数据，效果显著。`\n\n### 使用小表作为主表\n\n`join查询的时候，数据量小的表作为主表，数据量大的表作为join的对象，也是一种不错的方法，减少全表扫描行数。`\n\n### 数据冗余\n\n`针对复杂的sql，需要join其它表且需要排序的情况下，可以挖掘统计数据，冗余表或者冗余字段。`\n\n\n","source":"_posts/mysql-optimization.md","raw":"---\ntitle: mysql-optimization\ndate: 2017-06-05 21:26:44\ntags: [mysql]\ncategories: 技术\n---\n\n### mysql优化实战攻略\n\n最近对数据库查询进行了一些优化策略，总结如下：\n\n### 加索引\n\n`最简单的方法就是加索引，合适且必要才加，而不是乱加，数据量达到几十万以上效果明显。`\n\n### 使用强制索引\n\n`程序中使用强制索引，解决数据库没有按照我们想要的索引进行查询，百万级数据，效果显著。`\n\n### 使用小表作为主表\n\n`join查询的时候，数据量小的表作为主表，数据量大的表作为join的对象，也是一种不错的方法，减少全表扫描行数。`\n\n### 数据冗余\n\n`针对复杂的sql，需要join其它表且需要排序的情况下，可以挖掘统计数据，冗余表或者冗余字段。`\n\n\n","slug":"mysql-optimization","published":1,"updated":"2017-06-05T13:40:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wws7000t2o5pa27m2hvt","content":"<h3 id=\"mysql优化实战攻略\"><a href=\"#mysql优化实战攻略\" class=\"headerlink\" title=\"mysql优化实战攻略\"></a>mysql优化实战攻略</h3><p>最近对数据库查询进行了一些优化策略，总结如下：</p>\n<h3 id=\"加索引\"><a href=\"#加索引\" class=\"headerlink\" title=\"加索引\"></a>加索引</h3><p><code>最简单的方法就是加索引，合适且必要才加，而不是乱加，数据量达到几十万以上效果明显。</code></p>\n<h3 id=\"使用强制索引\"><a href=\"#使用强制索引\" class=\"headerlink\" title=\"使用强制索引\"></a>使用强制索引</h3><p><code>程序中使用强制索引，解决数据库没有按照我们想要的索引进行查询，百万级数据，效果显著。</code></p>\n<h3 id=\"使用小表作为主表\"><a href=\"#使用小表作为主表\" class=\"headerlink\" title=\"使用小表作为主表\"></a>使用小表作为主表</h3><p><code>join查询的时候，数据量小的表作为主表，数据量大的表作为join的对象，也是一种不错的方法，减少全表扫描行数。</code></p>\n<h3 id=\"数据冗余\"><a href=\"#数据冗余\" class=\"headerlink\" title=\"数据冗余\"></a>数据冗余</h3><p><code>针对复杂的sql，需要join其它表且需要排序的情况下，可以挖掘统计数据，冗余表或者冗余字段。</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"mysql优化实战攻略\"><a href=\"#mysql优化实战攻略\" class=\"headerlink\" title=\"mysql优化实战攻略\"></a>mysql优化实战攻略</h3><p>最近对数据库查询进行了一些优化策略，总结如下：</p>\n<h3 id=\"加索引\"><a href=\"#加索引\" class=\"headerlink\" title=\"加索引\"></a>加索引</h3><p><code>最简单的方法就是加索引，合适且必要才加，而不是乱加，数据量达到几十万以上效果明显。</code></p>\n<h3 id=\"使用强制索引\"><a href=\"#使用强制索引\" class=\"headerlink\" title=\"使用强制索引\"></a>使用强制索引</h3><p><code>程序中使用强制索引，解决数据库没有按照我们想要的索引进行查询，百万级数据，效果显著。</code></p>\n<h3 id=\"使用小表作为主表\"><a href=\"#使用小表作为主表\" class=\"headerlink\" title=\"使用小表作为主表\"></a>使用小表作为主表</h3><p><code>join查询的时候，数据量小的表作为主表，数据量大的表作为join的对象，也是一种不错的方法，减少全表扫描行数。</code></p>\n<h3 id=\"数据冗余\"><a href=\"#数据冗余\" class=\"headerlink\" title=\"数据冗余\"></a>数据冗余</h3><p><code>针对复杂的sql，需要join其它表且需要排序的情况下，可以挖掘统计数据，冗余表或者冗余字段。</code></p>\n"},{"title":"mongodb安装及使用","date":"2015-01-03T00:00:00.000Z","_content":"\n### linux下mongodb安装及使用\n\nmongodb作为一种把数据存储在磁盘的非关系型数据库NOSql，具有一些关系数据库的特性，可以完成大部分sql语句的功能。并且MongoDB内置的水平扩展机制提供了从百万到十亿级别的数据量处理能力，存储的每一条记录可以看作是一个Document对象，并支持排序，得到了较好的应用。为了更好的学习，自己在linux下也动手配置mongodb了。\n\n\nstep1.download\n\n     wget http://fastdl.mongodb.org/linux/mongodb-linux-i686-2.4.2.tgz\n\nstep2.decompression \n\n     tar -zxvf mongodb-linux-i686-2.4.2.tgz\n     mkdir /usr/local/mongodb\n     sudo mv -Rf mongodb-linux-i686-2.4.2/* /usr/local/monogodb\n    \nstep3.创建数据库和日志的存储目录：\n\n     mkdir -p /usr/local/mongodb/data\n     mkdir -p /usr/local/mongodb/logs\n\nstep4.修改mongodb的数据库和日志存储位置,并设置mongodb为后台启动\n\n    sudo /usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data/ --logpath=/usr/local/mongodb/logs/mongdb.log --fork\n\nstep5.if the step4 has error like \"error while loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory\"\n\n    yum whatprovides libstdc++.so.6\n     \n    yum install libstdc++-4.4.7-3.el6.i686(对应上一步出现的包名)\n\nstep6.如果执行了step5,j就需要重新执行step4;否则不需要\n\nstep7.进入mongodb命令行模式\n\n    cd /usr/local/mongodb/bin\n    ./mongo\n\nstep8.<a href=\"http://www.111cn.net/sys/linux/58162.htm\" target=\"_blank\">开启php的Mongodb扩展</a> 就可以在php代码中使用Monggodb了\n\n\nstep9.全面学习Mongodb(<a href=\"http://blog.csdn.net/yiqijinbu/article/details/9053467\" target=\"_blank\">http://blog.csdn.net/yiqijinbu/article/details/9053467</a>)\n\n","source":"_posts/mongodb安装及使用.md","raw":"---\ntitle: mongodb安装及使用\ntags: []\ndate: 2015-01-03 08:00:00\n---\n\n### linux下mongodb安装及使用\n\nmongodb作为一种把数据存储在磁盘的非关系型数据库NOSql，具有一些关系数据库的特性，可以完成大部分sql语句的功能。并且MongoDB内置的水平扩展机制提供了从百万到十亿级别的数据量处理能力，存储的每一条记录可以看作是一个Document对象，并支持排序，得到了较好的应用。为了更好的学习，自己在linux下也动手配置mongodb了。\n\n\nstep1.download\n\n     wget http://fastdl.mongodb.org/linux/mongodb-linux-i686-2.4.2.tgz\n\nstep2.decompression \n\n     tar -zxvf mongodb-linux-i686-2.4.2.tgz\n     mkdir /usr/local/mongodb\n     sudo mv -Rf mongodb-linux-i686-2.4.2/* /usr/local/monogodb\n    \nstep3.创建数据库和日志的存储目录：\n\n     mkdir -p /usr/local/mongodb/data\n     mkdir -p /usr/local/mongodb/logs\n\nstep4.修改mongodb的数据库和日志存储位置,并设置mongodb为后台启动\n\n    sudo /usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data/ --logpath=/usr/local/mongodb/logs/mongdb.log --fork\n\nstep5.if the step4 has error like \"error while loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory\"\n\n    yum whatprovides libstdc++.so.6\n     \n    yum install libstdc++-4.4.7-3.el6.i686(对应上一步出现的包名)\n\nstep6.如果执行了step5,j就需要重新执行step4;否则不需要\n\nstep7.进入mongodb命令行模式\n\n    cd /usr/local/mongodb/bin\n    ./mongo\n\nstep8.<a href=\"http://www.111cn.net/sys/linux/58162.htm\" target=\"_blank\">开启php的Mongodb扩展</a> 就可以在php代码中使用Monggodb了\n\n\nstep9.全面学习Mongodb(<a href=\"http://blog.csdn.net/yiqijinbu/article/details/9053467\" target=\"_blank\">http://blog.csdn.net/yiqijinbu/article/details/9053467</a>)\n\n","slug":"mongodb安装及使用","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wws8000w2o5pbi2sev7g","content":"<h3 id=\"linux下mongodb安装及使用\"><a href=\"#linux下mongodb安装及使用\" class=\"headerlink\" title=\"linux下mongodb安装及使用\"></a>linux下mongodb安装及使用</h3><p>mongodb作为一种把数据存储在磁盘的非关系型数据库NOSql，具有一些关系数据库的特性，可以完成大部分sql语句的功能。并且MongoDB内置的水平扩展机制提供了从百万到十亿级别的数据量处理能力，存储的每一条记录可以看作是一个Document对象，并支持排序，得到了较好的应用。为了更好的学习，自己在linux下也动手配置mongodb了。</p>\n<p>step1.download</p>\n<pre><code>wget http://fastdl.mongodb.org/linux/mongodb-linux-i686-2.4.2.tgz\n</code></pre><p>step2.decompression </p>\n<pre><code>tar -zxvf mongodb-linux-i686-2.4.2.tgz\nmkdir /usr/local/mongodb\nsudo mv -Rf mongodb-linux-i686-2.4.2/* /usr/local/monogodb\n</code></pre><p>step3.创建数据库和日志的存储目录：</p>\n<pre><code>mkdir -p /usr/local/mongodb/data\nmkdir -p /usr/local/mongodb/logs\n</code></pre><p>step4.修改mongodb的数据库和日志存储位置,并设置mongodb为后台启动</p>\n<pre><code>sudo /usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data/ --logpath=/usr/local/mongodb/logs/mongdb.log --fork\n</code></pre><p>step5.if the step4 has error like “error while loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory”</p>\n<pre><code>yum whatprovides libstdc++.so.6\n\nyum install libstdc++-4.4.7-3.el6.i686(对应上一步出现的包名)\n</code></pre><p>step6.如果执行了step5,j就需要重新执行step4;否则不需要</p>\n<p>step7.进入mongodb命令行模式</p>\n<pre><code>cd /usr/local/mongodb/bin\n./mongo\n</code></pre><p>step8.<a href=\"http://www.111cn.net/sys/linux/58162.htm\" target=\"_blank\">开启php的Mongodb扩展</a> 就可以在php代码中使用Monggodb了</p>\n<p>step9.全面学习Mongodb(<a href=\"http://blog.csdn.net/yiqijinbu/article/details/9053467\" target=\"_blank\">http://blog.csdn.net/yiqijinbu/article/details/9053467</a>)</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"linux下mongodb安装及使用\"><a href=\"#linux下mongodb安装及使用\" class=\"headerlink\" title=\"linux下mongodb安装及使用\"></a>linux下mongodb安装及使用</h3><p>mongodb作为一种把数据存储在磁盘的非关系型数据库NOSql，具有一些关系数据库的特性，可以完成大部分sql语句的功能。并且MongoDB内置的水平扩展机制提供了从百万到十亿级别的数据量处理能力，存储的每一条记录可以看作是一个Document对象，并支持排序，得到了较好的应用。为了更好的学习，自己在linux下也动手配置mongodb了。</p>\n<p>step1.download</p>\n<pre><code>wget http://fastdl.mongodb.org/linux/mongodb-linux-i686-2.4.2.tgz\n</code></pre><p>step2.decompression </p>\n<pre><code>tar -zxvf mongodb-linux-i686-2.4.2.tgz\nmkdir /usr/local/mongodb\nsudo mv -Rf mongodb-linux-i686-2.4.2/* /usr/local/monogodb\n</code></pre><p>step3.创建数据库和日志的存储目录：</p>\n<pre><code>mkdir -p /usr/local/mongodb/data\nmkdir -p /usr/local/mongodb/logs\n</code></pre><p>step4.修改mongodb的数据库和日志存储位置,并设置mongodb为后台启动</p>\n<pre><code>sudo /usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data/ --logpath=/usr/local/mongodb/logs/mongdb.log --fork\n</code></pre><p>step5.if the step4 has error like “error while loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory”</p>\n<pre><code>yum whatprovides libstdc++.so.6\n\nyum install libstdc++-4.4.7-3.el6.i686(对应上一步出现的包名)\n</code></pre><p>step6.如果执行了step5,j就需要重新执行step4;否则不需要</p>\n<p>step7.进入mongodb命令行模式</p>\n<pre><code>cd /usr/local/mongodb/bin\n./mongo\n</code></pre><p>step8.<a href=\"http://www.111cn.net/sys/linux/58162.htm\" target=\"_blank\">开启php的Mongodb扩展</a> 就可以在php代码中使用Monggodb了</p>\n<p>step9.全面学习Mongodb(<a href=\"http://blog.csdn.net/yiqijinbu/article/details/9053467\" target=\"_blank\">http://blog.csdn.net/yiqijinbu/article/details/9053467</a>)</p>\n"},{"title":"mysql不稳定排序","date":"2015-05-01T00:00:00.000Z","_content":"\n### mysql不稳定排序问题\n\nmysql根据某一个字段排序，如果数据库中这个字段可能存在相同数值，仅仅通过该字段排序是不稳定的，如果加上了limit，可能会造成有一些结果没有显示，有些重复，这时候加上再id排序，才能得到正确地排序结果。","source":"_posts/mysql-sort.md","raw":"---\ntitle: mysql不稳定排序\ntags: []\ndate: 2015-05-01 08:00:00\n---\n\n### mysql不稳定排序问题\n\nmysql根据某一个字段排序，如果数据库中这个字段可能存在相同数值，仅仅通过该字段排序是不稳定的，如果加上了limit，可能会造成有一些结果没有显示，有些重复，这时候加上再id排序，才能得到正确地排序结果。","slug":"mysql-sort","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwsb000y2o5pkf7pkxmo","content":"<h3 id=\"mysql不稳定排序问题\"><a href=\"#mysql不稳定排序问题\" class=\"headerlink\" title=\"mysql不稳定排序问题\"></a>mysql不稳定排序问题</h3><p>mysql根据某一个字段排序，如果数据库中这个字段可能存在相同数值，仅仅通过该字段排序是不稳定的，如果加上了limit，可能会造成有一些结果没有显示，有些重复，这时候加上再id排序，才能得到正确地排序结果。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"mysql不稳定排序问题\"><a href=\"#mysql不稳定排序问题\" class=\"headerlink\" title=\"mysql不稳定排序问题\"></a>mysql不稳定排序问题</h3><p>mysql根据某一个字段排序，如果数据库中这个字段可能存在相同数值，仅仅通过该字段排序是不稳定的，如果加上了limit，可能会造成有一些结果没有显示，有些重复，这时候加上再id排序，才能得到正确地排序结果。</p>\n"},{"title":"mysql开启慢查询日志","date":"2015-12-01T00:00:00.000Z","_content":"\n#### 登陆mysql客户端\n\n    mysql -uroot -p123456\n\n#### 开启检查\n\n    show variables like 'slow_query_log';\n\n#### 相关配置\n\n    show variables like '%log%';\n\n#### 开启\n\n     set global log_queries_not_using_indexes = on;\n\n#### 时间\n\n    show variables like 'long_query_time';\n\n#### 开启慢查询日志\n\n    set global slow_query_log = on;\n\n#### 查找慢查询日志记录位置\n\n    show variables like 'slow%';\n\n#mysqldumpslow -t 3 /usr/local/var/mysql/caijinlindeMBP-slow.log\n\n    log-slow-queries=\"/usr/local/val/log/mysql-slow.log\"\n    long_query_time = 4\n    log-queries-not-using-indexes\n","source":"_posts/mysql开启慢查询日志.md","raw":"---\ntitle: mysql开启慢查询日志\ntags: []\ndate: 2015-12-01 08:00:00\n---\n\n#### 登陆mysql客户端\n\n    mysql -uroot -p123456\n\n#### 开启检查\n\n    show variables like 'slow_query_log';\n\n#### 相关配置\n\n    show variables like '%log%';\n\n#### 开启\n\n     set global log_queries_not_using_indexes = on;\n\n#### 时间\n\n    show variables like 'long_query_time';\n\n#### 开启慢查询日志\n\n    set global slow_query_log = on;\n\n#### 查找慢查询日志记录位置\n\n    show variables like 'slow%';\n\n#mysqldumpslow -t 3 /usr/local/var/mysql/caijinlindeMBP-slow.log\n\n    log-slow-queries=\"/usr/local/val/log/mysql-slow.log\"\n    long_query_time = 4\n    log-queries-not-using-indexes\n","slug":"mysql开启慢查询日志","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwsc00112o5p4olcz4li","content":"<h4 id=\"登陆mysql客户端\"><a href=\"#登陆mysql客户端\" class=\"headerlink\" title=\"登陆mysql客户端\"></a>登陆mysql客户端</h4><pre><code>mysql -uroot -p123456\n</code></pre><h4 id=\"开启检查\"><a href=\"#开启检查\" class=\"headerlink\" title=\"开启检查\"></a>开启检查</h4><pre><code>show variables like &apos;slow_query_log&apos;;\n</code></pre><h4 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h4><pre><code>show variables like &apos;%log%&apos;;\n</code></pre><h4 id=\"开启\"><a href=\"#开启\" class=\"headerlink\" title=\"开启\"></a>开启</h4><pre><code>set global log_queries_not_using_indexes = on;\n</code></pre><h4 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h4><pre><code>show variables like &apos;long_query_time&apos;;\n</code></pre><h4 id=\"开启慢查询日志\"><a href=\"#开启慢查询日志\" class=\"headerlink\" title=\"开启慢查询日志\"></a>开启慢查询日志</h4><pre><code>set global slow_query_log = on;\n</code></pre><h4 id=\"查找慢查询日志记录位置\"><a href=\"#查找慢查询日志记录位置\" class=\"headerlink\" title=\"查找慢查询日志记录位置\"></a>查找慢查询日志记录位置</h4><pre><code>show variables like &apos;slow%&apos;;\n</code></pre><p>#mysqldumpslow -t 3 /usr/local/var/mysql/caijinlindeMBP-slow.log</p>\n<pre><code>log-slow-queries=&quot;/usr/local/val/log/mysql-slow.log&quot;\nlong_query_time = 4\nlog-queries-not-using-indexes\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"登陆mysql客户端\"><a href=\"#登陆mysql客户端\" class=\"headerlink\" title=\"登陆mysql客户端\"></a>登陆mysql客户端</h4><pre><code>mysql -uroot -p123456\n</code></pre><h4 id=\"开启检查\"><a href=\"#开启检查\" class=\"headerlink\" title=\"开启检查\"></a>开启检查</h4><pre><code>show variables like &apos;slow_query_log&apos;;\n</code></pre><h4 id=\"相关配置\"><a href=\"#相关配置\" class=\"headerlink\" title=\"相关配置\"></a>相关配置</h4><pre><code>show variables like &apos;%log%&apos;;\n</code></pre><h4 id=\"开启\"><a href=\"#开启\" class=\"headerlink\" title=\"开启\"></a>开启</h4><pre><code>set global log_queries_not_using_indexes = on;\n</code></pre><h4 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h4><pre><code>show variables like &apos;long_query_time&apos;;\n</code></pre><h4 id=\"开启慢查询日志\"><a href=\"#开启慢查询日志\" class=\"headerlink\" title=\"开启慢查询日志\"></a>开启慢查询日志</h4><pre><code>set global slow_query_log = on;\n</code></pre><h4 id=\"查找慢查询日志记录位置\"><a href=\"#查找慢查询日志记录位置\" class=\"headerlink\" title=\"查找慢查询日志记录位置\"></a>查找慢查询日志记录位置</h4><pre><code>show variables like &apos;slow%&apos;;\n</code></pre><p>#mysqldumpslow -t 3 /usr/local/var/mysql/caijinlindeMBP-slow.log</p>\n<pre><code>log-slow-queries=&quot;/usr/local/val/log/mysql-slow.log&quot;\nlong_query_time = 4\nlog-queries-not-using-indexes\n</code></pre>"},{"title":"php数组合并隐患","date":"2015-11-17T00:00:00.000Z","_content":"\n基于php数组操作，最近遇到两个坑，记录在这里\n\n<!-- more -->\n\n之前做一个搜索功能的时候，有一个需求是希望加一个“-”选项，以便可以取消搜索项\n\n#### 第一次的做法\n``` php\n    $arr = array_merge(array(' ' => \"-\"), $arr);\n```\n[why not recommend array_merge](http://stackoverflow.com/questions/3292044/php-merge-two-arrays-while-keeping-keys-instead-of-reindexing)\n\n隐患： array_merge合并时会重新索引，最后导致搜索的时候匹配失败\n\n#### 第二次的做法\n``` php\n    $arr = array(' ' => \"-\") + $arr;\n```\n\n隐患: 如果$arr不是数组，就会发生意料的隐患\n\n#### 最终做法\n``` php\n    settype($a, 'array');\n    $arr = array(' ' => \"-\") + $arr;\n```\n\n### 总结\n\n小小的一个功能，如果不注意也会引发一些问题。\n","source":"_posts/php-array-merge.md","raw":"---\ntitle: php数组合并隐患\ntags: []\ndate: 2015-11-17 08:00:00\n---\n\n基于php数组操作，最近遇到两个坑，记录在这里\n\n<!-- more -->\n\n之前做一个搜索功能的时候，有一个需求是希望加一个“-”选项，以便可以取消搜索项\n\n#### 第一次的做法\n``` php\n    $arr = array_merge(array(' ' => \"-\"), $arr);\n```\n[why not recommend array_merge](http://stackoverflow.com/questions/3292044/php-merge-two-arrays-while-keeping-keys-instead-of-reindexing)\n\n隐患： array_merge合并时会重新索引，最后导致搜索的时候匹配失败\n\n#### 第二次的做法\n``` php\n    $arr = array(' ' => \"-\") + $arr;\n```\n\n隐患: 如果$arr不是数组，就会发生意料的隐患\n\n#### 最终做法\n``` php\n    settype($a, 'array');\n    $arr = array(' ' => \"-\") + $arr;\n```\n\n### 总结\n\n小小的一个功能，如果不注意也会引发一些问题。\n","slug":"php-array-merge","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwsd00122o5pa1r8f5u1","content":"<p>基于php数组操作，最近遇到两个坑，记录在这里</p>\n<a id=\"more\"></a>\n<p>之前做一个搜索功能的时候，有一个需求是希望加一个“-”选项，以便可以取消搜索项</p>\n<h4 id=\"第一次的做法\"><a href=\"#第一次的做法\" class=\"headerlink\" title=\"第一次的做法\"></a>第一次的做法</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$arr = array_merge(<span class=\"keyword\">array</span>(<span class=\"string\">' '</span> =&gt; <span class=\"string\">\"-\"</span>), $arr);</div></pre></td></tr></table></figure>\n<p><a href=\"http://stackoverflow.com/questions/3292044/php-merge-two-arrays-while-keeping-keys-instead-of-reindexing\" target=\"_blank\" rel=\"external\">why not recommend array_merge</a></p>\n<p>隐患： array_merge合并时会重新索引，最后导致搜索的时候匹配失败</p>\n<h4 id=\"第二次的做法\"><a href=\"#第二次的做法\" class=\"headerlink\" title=\"第二次的做法\"></a>第二次的做法</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">' '</span> =&gt; <span class=\"string\">\"-\"</span>) + $arr;</div></pre></td></tr></table></figure>\n<p>隐患: 如果$arr不是数组，就会发生意料的隐患</p>\n<h4 id=\"最终做法\"><a href=\"#最终做法\" class=\"headerlink\" title=\"最终做法\"></a>最终做法</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">settype($a, <span class=\"string\">'array'</span>);</div><div class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">' '</span> =&gt; <span class=\"string\">\"-\"</span>) + $arr;</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>小小的一个功能，如果不注意也会引发一些问题。</p>\n","site":{"data":{}},"excerpt":"<p>基于php数组操作，最近遇到两个坑，记录在这里</p>","more":"<p>之前做一个搜索功能的时候，有一个需求是希望加一个“-”选项，以便可以取消搜索项</p>\n<h4 id=\"第一次的做法\"><a href=\"#第一次的做法\" class=\"headerlink\" title=\"第一次的做法\"></a>第一次的做法</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$arr = array_merge(<span class=\"keyword\">array</span>(<span class=\"string\">' '</span> =&gt; <span class=\"string\">\"-\"</span>), $arr);</div></pre></td></tr></table></figure>\n<p><a href=\"http://stackoverflow.com/questions/3292044/php-merge-two-arrays-while-keeping-keys-instead-of-reindexing\" target=\"_blank\" rel=\"external\">why not recommend array_merge</a></p>\n<p>隐患： array_merge合并时会重新索引，最后导致搜索的时候匹配失败</p>\n<h4 id=\"第二次的做法\"><a href=\"#第二次的做法\" class=\"headerlink\" title=\"第二次的做法\"></a>第二次的做法</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">' '</span> =&gt; <span class=\"string\">\"-\"</span>) + $arr;</div></pre></td></tr></table></figure>\n<p>隐患: 如果$arr不是数组，就会发生意料的隐患</p>\n<h4 id=\"最终做法\"><a href=\"#最终做法\" class=\"headerlink\" title=\"最终做法\"></a>最终做法</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">settype($a, <span class=\"string\">'array'</span>);</div><div class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">' '</span> =&gt; <span class=\"string\">\"-\"</span>) + $arr;</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>小小的一个功能，如果不注意也会引发一些问题。</p>"},{"title":"mysql主从复制配置","date":"2014-12-18T00:00:00.000Z","_content":"\n### mysql主从配置步骤\n\n两台服务器的mysql版本一般规定为一致，这样可以避免一些乱七八糟的错误。\n建立基本的复制可以总结为一下三个简单步骤:\n\n<!-- more -->\n\n    step1.配置一个服务器为Master;\n    step2.配置一个服务器作为Slave;\n    step3.将slave连接到Master;\n\n为更好阐述，假设Master服务器为192.168.12.1,Slave服务器为192.168.12.2\n\n#### 配置Master(在192.168.12.1机器上操作)\n\nstep1.添加配置选项(log-bi,log-bin-index,server-id)到mysql配置文件中 \n\nvi /etc/my.cnf\n\n    [mysqld]\n    port            = 3306\n    socket          = /tmp/mysql.sock\n    datadir = /usr/local/mysql/var\n    skip-external-locking\n    key_buffer_size = 16M\n    max_allowed_packet = 1M\n    table_open_cache = 64\n    sort_buffer_size = 512K\n    net_buffer_length = 8K\n    read_buffer_size = 256K\n    read_rnd_buffer_size = 512K\n    myisam_sort_buffer_size = 8M\n    log-bin = master-bin\n    log-bin-index = master-bin.index\n    server-id = 1\n\n登陆到mysql后,命令show variables like 'server%'可以看到服务器id是不是刚才写在配置文件的\n\nstep2.在Master创建一个复制用户\n\n登陆到mysql后，执行以下命令(可自行设置新建用户名和密码)\n\n    GREATE USER repl_user;\n    GRANT REPLICATION SLAVE ON *.* TO repl_user@'192.168.12.2' IDENTIFED BY '123456';\n\n#### 配置Slave(在192.168.12.2机器上操作)\n\nstep1.添加配置选项(relay-log-index,relay-log,server-id)到mysql配置文件中 ,server_id与Master不同\n\nvi /etc/my.cnf\n\n    [mysqld]\n    port            = 3306\n    socket          = /tmp/mysql.sock\n    datadir = /usr/local/mysql/var\n    skip-external-locking\n    key_buffer_size = 16M\n    max_allowed_packet = 1M\n    table_open_cache = 64\n    sort_buffer_size = 512K\n    net_buffer_length = 8K\n    read_buffer_size = 256K\n    read_rnd_buffer_size = 512K\n    myisam_sort_buffer_size = 8M\n    server-id = 2\n    relay-log-index = slave-relay-bin.index\n    relay-log = slave-relay-bin\n\n#### 将slave连接到Master(在slave服务器192.168.12.2上操作)\n\n登陆到mysql后执行：(MASTER_USER和MASTER_PASSWORD为之前在MASTER上面创建的用户和密码)\n    \n    CHANGE MASTER TO MASTER_HOST = '192.168.12.1', MASTER_PORT = 3306, MASTER_USER = 'repl_user', MASTER_PASSWORD = '123456'；\n\n然后启动slave,检测是否配置成功\n\n    START SLAVE;\n    SHOW SLAVE STAUS\\G;\n\n如果显示结果中，其中两项为yes,则配置成功    \n\n    Slave_IO_Running: Yes\n    Slave_SQL_Running: Yes\n\n#### 常见问题\n\n我在配置的时候，并没有一次性成功。当我启动slave后，发现\n\n    Slave_IO_Running: No\n    Slave_SQL_Running: Yes\n\n即从服务器IO线程没有启动，报错：\n\n    Fatal error: The slave I/O thread stops because master and slave have equal MySQL server ids\n\n#### 解决方法\n\n这应该是比较常见的错误了，我slave上，登陆到mysql,执行show variables like 'server%'命令\n发现从服务器的server_id 还是1，为什么没有改过来呢？\n\n    mysql> show variables like 'server%';\n    mysql> find / -name \"my.cnf\";\n\n发现当前目录下my.cnf有多处，可能是上一次安装残留文件\n\n针对此种情形,进行全局设置,并停止slave后，再启动\n\n    mysql> set global server_id = 2;\n    mysql> stop slave;\n    mysql> start slave;\n    mysql> show slave status\\G;\n\n此时问题解决，slave服务器Io和Sql线程均顺利启动\n\n#### 总结\n\n    此时在主服务器运行 netstat -antlp | grep 3306, 发现本机和从服务器192.168.12.2都在监听192.168.12.1，主从复制配置顺利完成。\n\n\n\n\n\n\n","source":"_posts/mysql主从复制配置.md","raw":"---\ntitle: mysql主从复制配置\ntags: []\ndate: 2014-12-18 08:00:00\n---\n\n### mysql主从配置步骤\n\n两台服务器的mysql版本一般规定为一致，这样可以避免一些乱七八糟的错误。\n建立基本的复制可以总结为一下三个简单步骤:\n\n<!-- more -->\n\n    step1.配置一个服务器为Master;\n    step2.配置一个服务器作为Slave;\n    step3.将slave连接到Master;\n\n为更好阐述，假设Master服务器为192.168.12.1,Slave服务器为192.168.12.2\n\n#### 配置Master(在192.168.12.1机器上操作)\n\nstep1.添加配置选项(log-bi,log-bin-index,server-id)到mysql配置文件中 \n\nvi /etc/my.cnf\n\n    [mysqld]\n    port            = 3306\n    socket          = /tmp/mysql.sock\n    datadir = /usr/local/mysql/var\n    skip-external-locking\n    key_buffer_size = 16M\n    max_allowed_packet = 1M\n    table_open_cache = 64\n    sort_buffer_size = 512K\n    net_buffer_length = 8K\n    read_buffer_size = 256K\n    read_rnd_buffer_size = 512K\n    myisam_sort_buffer_size = 8M\n    log-bin = master-bin\n    log-bin-index = master-bin.index\n    server-id = 1\n\n登陆到mysql后,命令show variables like 'server%'可以看到服务器id是不是刚才写在配置文件的\n\nstep2.在Master创建一个复制用户\n\n登陆到mysql后，执行以下命令(可自行设置新建用户名和密码)\n\n    GREATE USER repl_user;\n    GRANT REPLICATION SLAVE ON *.* TO repl_user@'192.168.12.2' IDENTIFED BY '123456';\n\n#### 配置Slave(在192.168.12.2机器上操作)\n\nstep1.添加配置选项(relay-log-index,relay-log,server-id)到mysql配置文件中 ,server_id与Master不同\n\nvi /etc/my.cnf\n\n    [mysqld]\n    port            = 3306\n    socket          = /tmp/mysql.sock\n    datadir = /usr/local/mysql/var\n    skip-external-locking\n    key_buffer_size = 16M\n    max_allowed_packet = 1M\n    table_open_cache = 64\n    sort_buffer_size = 512K\n    net_buffer_length = 8K\n    read_buffer_size = 256K\n    read_rnd_buffer_size = 512K\n    myisam_sort_buffer_size = 8M\n    server-id = 2\n    relay-log-index = slave-relay-bin.index\n    relay-log = slave-relay-bin\n\n#### 将slave连接到Master(在slave服务器192.168.12.2上操作)\n\n登陆到mysql后执行：(MASTER_USER和MASTER_PASSWORD为之前在MASTER上面创建的用户和密码)\n    \n    CHANGE MASTER TO MASTER_HOST = '192.168.12.1', MASTER_PORT = 3306, MASTER_USER = 'repl_user', MASTER_PASSWORD = '123456'；\n\n然后启动slave,检测是否配置成功\n\n    START SLAVE;\n    SHOW SLAVE STAUS\\G;\n\n如果显示结果中，其中两项为yes,则配置成功    \n\n    Slave_IO_Running: Yes\n    Slave_SQL_Running: Yes\n\n#### 常见问题\n\n我在配置的时候，并没有一次性成功。当我启动slave后，发现\n\n    Slave_IO_Running: No\n    Slave_SQL_Running: Yes\n\n即从服务器IO线程没有启动，报错：\n\n    Fatal error: The slave I/O thread stops because master and slave have equal MySQL server ids\n\n#### 解决方法\n\n这应该是比较常见的错误了，我slave上，登陆到mysql,执行show variables like 'server%'命令\n发现从服务器的server_id 还是1，为什么没有改过来呢？\n\n    mysql> show variables like 'server%';\n    mysql> find / -name \"my.cnf\";\n\n发现当前目录下my.cnf有多处，可能是上一次安装残留文件\n\n针对此种情形,进行全局设置,并停止slave后，再启动\n\n    mysql> set global server_id = 2;\n    mysql> stop slave;\n    mysql> start slave;\n    mysql> show slave status\\G;\n\n此时问题解决，slave服务器Io和Sql线程均顺利启动\n\n#### 总结\n\n    此时在主服务器运行 netstat -antlp | grep 3306, 发现本机和从服务器192.168.12.2都在监听192.168.12.1，主从复制配置顺利完成。\n\n\n\n\n\n\n","slug":"mysql主从复制配置","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwse00132o5p8om7yuht","content":"<h3 id=\"mysql主从配置步骤\"><a href=\"#mysql主从配置步骤\" class=\"headerlink\" title=\"mysql主从配置步骤\"></a>mysql主从配置步骤</h3><p>两台服务器的mysql版本一般规定为一致，这样可以避免一些乱七八糟的错误。<br>建立基本的复制可以总结为一下三个简单步骤:</p>\n<a id=\"more\"></a>\n<pre><code>step1.配置一个服务器为Master;\nstep2.配置一个服务器作为Slave;\nstep3.将slave连接到Master;\n</code></pre><p>为更好阐述，假设Master服务器为192.168.12.1,Slave服务器为192.168.12.2</p>\n<h4 id=\"配置Master-在192-168-12-1机器上操作\"><a href=\"#配置Master-在192-168-12-1机器上操作\" class=\"headerlink\" title=\"配置Master(在192.168.12.1机器上操作)\"></a>配置Master(在192.168.12.1机器上操作)</h4><p>step1.添加配置选项(log-bi,log-bin-index,server-id)到mysql配置文件中 </p>\n<p>vi /etc/my.cnf</p>\n<pre><code>[mysqld]\nport            = 3306\nsocket          = /tmp/mysql.sock\ndatadir = /usr/local/mysql/var\nskip-external-locking\nkey_buffer_size = 16M\nmax_allowed_packet = 1M\ntable_open_cache = 64\nsort_buffer_size = 512K\nnet_buffer_length = 8K\nread_buffer_size = 256K\nread_rnd_buffer_size = 512K\nmyisam_sort_buffer_size = 8M\nlog-bin = master-bin\nlog-bin-index = master-bin.index\nserver-id = 1\n</code></pre><p>登陆到mysql后,命令show variables like ‘server%’可以看到服务器id是不是刚才写在配置文件的</p>\n<p>step2.在Master创建一个复制用户</p>\n<p>登陆到mysql后，执行以下命令(可自行设置新建用户名和密码)</p>\n<pre><code>GREATE USER repl_user;\nGRANT REPLICATION SLAVE ON *.* TO repl_user@&apos;192.168.12.2&apos; IDENTIFED BY &apos;123456&apos;;\n</code></pre><h4 id=\"配置Slave-在192-168-12-2机器上操作\"><a href=\"#配置Slave-在192-168-12-2机器上操作\" class=\"headerlink\" title=\"配置Slave(在192.168.12.2机器上操作)\"></a>配置Slave(在192.168.12.2机器上操作)</h4><p>step1.添加配置选项(relay-log-index,relay-log,server-id)到mysql配置文件中 ,server_id与Master不同</p>\n<p>vi /etc/my.cnf</p>\n<pre><code>[mysqld]\nport            = 3306\nsocket          = /tmp/mysql.sock\ndatadir = /usr/local/mysql/var\nskip-external-locking\nkey_buffer_size = 16M\nmax_allowed_packet = 1M\ntable_open_cache = 64\nsort_buffer_size = 512K\nnet_buffer_length = 8K\nread_buffer_size = 256K\nread_rnd_buffer_size = 512K\nmyisam_sort_buffer_size = 8M\nserver-id = 2\nrelay-log-index = slave-relay-bin.index\nrelay-log = slave-relay-bin\n</code></pre><h4 id=\"将slave连接到Master-在slave服务器192-168-12-2上操作\"><a href=\"#将slave连接到Master-在slave服务器192-168-12-2上操作\" class=\"headerlink\" title=\"将slave连接到Master(在slave服务器192.168.12.2上操作)\"></a>将slave连接到Master(在slave服务器192.168.12.2上操作)</h4><p>登陆到mysql后执行：(MASTER_USER和MASTER_PASSWORD为之前在MASTER上面创建的用户和密码)</p>\n<pre><code>CHANGE MASTER TO MASTER_HOST = &apos;192.168.12.1&apos;, MASTER_PORT = 3306, MASTER_USER = &apos;repl_user&apos;, MASTER_PASSWORD = &apos;123456&apos;；\n</code></pre><p>然后启动slave,检测是否配置成功</p>\n<pre><code>START SLAVE;\nSHOW SLAVE STAUS\\G;\n</code></pre><p>如果显示结果中，其中两项为yes,则配置成功    </p>\n<pre><code>Slave_IO_Running: Yes\nSlave_SQL_Running: Yes\n</code></pre><h4 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><p>我在配置的时候，并没有一次性成功。当我启动slave后，发现</p>\n<pre><code>Slave_IO_Running: No\nSlave_SQL_Running: Yes\n</code></pre><p>即从服务器IO线程没有启动，报错：</p>\n<pre><code>Fatal error: The slave I/O thread stops because master and slave have equal MySQL server ids\n</code></pre><h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>这应该是比较常见的错误了，我slave上，登陆到mysql,执行show variables like ‘server%’命令<br>发现从服务器的server_id 还是1，为什么没有改过来呢？</p>\n<pre><code>mysql&gt; show variables like &apos;server%&apos;;\nmysql&gt; find / -name &quot;my.cnf&quot;;\n</code></pre><p>发现当前目录下my.cnf有多处，可能是上一次安装残留文件</p>\n<p>针对此种情形,进行全局设置,并停止slave后，再启动</p>\n<pre><code>mysql&gt; set global server_id = 2;\nmysql&gt; stop slave;\nmysql&gt; start slave;\nmysql&gt; show slave status\\G;\n</code></pre><p>此时问题解决，slave服务器Io和Sql线程均顺利启动</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><pre><code>此时在主服务器运行 netstat -antlp | grep 3306, 发现本机和从服务器192.168.12.2都在监听192.168.12.1，主从复制配置顺利完成。\n</code></pre>","site":{"data":{}},"excerpt":"<h3 id=\"mysql主从配置步骤\"><a href=\"#mysql主从配置步骤\" class=\"headerlink\" title=\"mysql主从配置步骤\"></a>mysql主从配置步骤</h3><p>两台服务器的mysql版本一般规定为一致，这样可以避免一些乱七八糟的错误。<br>建立基本的复制可以总结为一下三个简单步骤:</p>","more":"<pre><code>step1.配置一个服务器为Master;\nstep2.配置一个服务器作为Slave;\nstep3.将slave连接到Master;\n</code></pre><p>为更好阐述，假设Master服务器为192.168.12.1,Slave服务器为192.168.12.2</p>\n<h4 id=\"配置Master-在192-168-12-1机器上操作\"><a href=\"#配置Master-在192-168-12-1机器上操作\" class=\"headerlink\" title=\"配置Master(在192.168.12.1机器上操作)\"></a>配置Master(在192.168.12.1机器上操作)</h4><p>step1.添加配置选项(log-bi,log-bin-index,server-id)到mysql配置文件中 </p>\n<p>vi /etc/my.cnf</p>\n<pre><code>[mysqld]\nport            = 3306\nsocket          = /tmp/mysql.sock\ndatadir = /usr/local/mysql/var\nskip-external-locking\nkey_buffer_size = 16M\nmax_allowed_packet = 1M\ntable_open_cache = 64\nsort_buffer_size = 512K\nnet_buffer_length = 8K\nread_buffer_size = 256K\nread_rnd_buffer_size = 512K\nmyisam_sort_buffer_size = 8M\nlog-bin = master-bin\nlog-bin-index = master-bin.index\nserver-id = 1\n</code></pre><p>登陆到mysql后,命令show variables like ‘server%’可以看到服务器id是不是刚才写在配置文件的</p>\n<p>step2.在Master创建一个复制用户</p>\n<p>登陆到mysql后，执行以下命令(可自行设置新建用户名和密码)</p>\n<pre><code>GREATE USER repl_user;\nGRANT REPLICATION SLAVE ON *.* TO repl_user@&apos;192.168.12.2&apos; IDENTIFED BY &apos;123456&apos;;\n</code></pre><h4 id=\"配置Slave-在192-168-12-2机器上操作\"><a href=\"#配置Slave-在192-168-12-2机器上操作\" class=\"headerlink\" title=\"配置Slave(在192.168.12.2机器上操作)\"></a>配置Slave(在192.168.12.2机器上操作)</h4><p>step1.添加配置选项(relay-log-index,relay-log,server-id)到mysql配置文件中 ,server_id与Master不同</p>\n<p>vi /etc/my.cnf</p>\n<pre><code>[mysqld]\nport            = 3306\nsocket          = /tmp/mysql.sock\ndatadir = /usr/local/mysql/var\nskip-external-locking\nkey_buffer_size = 16M\nmax_allowed_packet = 1M\ntable_open_cache = 64\nsort_buffer_size = 512K\nnet_buffer_length = 8K\nread_buffer_size = 256K\nread_rnd_buffer_size = 512K\nmyisam_sort_buffer_size = 8M\nserver-id = 2\nrelay-log-index = slave-relay-bin.index\nrelay-log = slave-relay-bin\n</code></pre><h4 id=\"将slave连接到Master-在slave服务器192-168-12-2上操作\"><a href=\"#将slave连接到Master-在slave服务器192-168-12-2上操作\" class=\"headerlink\" title=\"将slave连接到Master(在slave服务器192.168.12.2上操作)\"></a>将slave连接到Master(在slave服务器192.168.12.2上操作)</h4><p>登陆到mysql后执行：(MASTER_USER和MASTER_PASSWORD为之前在MASTER上面创建的用户和密码)</p>\n<pre><code>CHANGE MASTER TO MASTER_HOST = &apos;192.168.12.1&apos;, MASTER_PORT = 3306, MASTER_USER = &apos;repl_user&apos;, MASTER_PASSWORD = &apos;123456&apos;；\n</code></pre><p>然后启动slave,检测是否配置成功</p>\n<pre><code>START SLAVE;\nSHOW SLAVE STAUS\\G;\n</code></pre><p>如果显示结果中，其中两项为yes,则配置成功    </p>\n<pre><code>Slave_IO_Running: Yes\nSlave_SQL_Running: Yes\n</code></pre><h4 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h4><p>我在配置的时候，并没有一次性成功。当我启动slave后，发现</p>\n<pre><code>Slave_IO_Running: No\nSlave_SQL_Running: Yes\n</code></pre><p>即从服务器IO线程没有启动，报错：</p>\n<pre><code>Fatal error: The slave I/O thread stops because master and slave have equal MySQL server ids\n</code></pre><h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>这应该是比较常见的错误了，我slave上，登陆到mysql,执行show variables like ‘server%’命令<br>发现从服务器的server_id 还是1，为什么没有改过来呢？</p>\n<pre><code>mysql&gt; show variables like &apos;server%&apos;;\nmysql&gt; find / -name &quot;my.cnf&quot;;\n</code></pre><p>发现当前目录下my.cnf有多处，可能是上一次安装残留文件</p>\n<p>针对此种情形,进行全局设置,并停止slave后，再启动</p>\n<pre><code>mysql&gt; set global server_id = 2;\nmysql&gt; stop slave;\nmysql&gt; start slave;\nmysql&gt; show slave status\\G;\n</code></pre><p>此时问题解决，slave服务器Io和Sql线程均顺利启动</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><pre><code>此时在主服务器运行 netstat -antlp | grep 3306, 发现本机和从服务器192.168.12.2都在监听192.168.12.1，主从复制配置顺利完成。\n</code></pre>"},{"title":"资源分享","date":"2015-04-26T00:00:00.000Z","_content":"\n### 搜索技巧和资源整合\n\n    在这个信息爆炸的时代，我们如何用更短的时间获取到更有效的知识，我以前感到很苦恼。于是整理了一些关于知识整理和搜索技巧方面的东西(但是还是不够)。\n\n分享主题:搜索技巧和资源整合以及一些有用的工具及插件，网址.\n\n\n分享ppt地址:[http://www.ipresst.com/play/5534b2e66309648f2a000af6](http://www.ipresst.com/play/5534b2e66309648f2a000af6)\n\n以后若有更多内容，或关于生活，或关于技术，我将毫不吝啬地分享，希望能够有所帮助。最近多在翻墙，英语式的阅读，可以理解为装逼式地学习，成长中，感悟中.\n\nreply:\n\n                from 个人邮件: 　caijinlin2012@gmail.com\n                from 个人博客：　http://caijinlin.github.io\n                from 个人微信公众订阅号: susetips\n","source":"_posts/person-share.md","raw":"---\ntitle: 资源分享\ntags: []\ndate: 2015-04-26 08:00:00\n---\n\n### 搜索技巧和资源整合\n\n    在这个信息爆炸的时代，我们如何用更短的时间获取到更有效的知识，我以前感到很苦恼。于是整理了一些关于知识整理和搜索技巧方面的东西(但是还是不够)。\n\n分享主题:搜索技巧和资源整合以及一些有用的工具及插件，网址.\n\n\n分享ppt地址:[http://www.ipresst.com/play/5534b2e66309648f2a000af6](http://www.ipresst.com/play/5534b2e66309648f2a000af6)\n\n以后若有更多内容，或关于生活，或关于技术，我将毫不吝啬地分享，希望能够有所帮助。最近多在翻墙，英语式的阅读，可以理解为装逼式地学习，成长中，感悟中.\n\nreply:\n\n                from 个人邮件: 　caijinlin2012@gmail.com\n                from 个人博客：　http://caijinlin.github.io\n                from 个人微信公众订阅号: susetips\n","slug":"person-share","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwsh00152o5p4qd2bjo1","content":"<h3 id=\"搜索技巧和资源整合\"><a href=\"#搜索技巧和资源整合\" class=\"headerlink\" title=\"搜索技巧和资源整合\"></a>搜索技巧和资源整合</h3><pre><code>在这个信息爆炸的时代，我们如何用更短的时间获取到更有效的知识，我以前感到很苦恼。于是整理了一些关于知识整理和搜索技巧方面的东西(但是还是不够)。\n</code></pre><p>分享主题:搜索技巧和资源整合以及一些有用的工具及插件，网址.</p>\n<p>分享ppt地址:<a href=\"http://www.ipresst.com/play/5534b2e66309648f2a000af6\" target=\"_blank\" rel=\"external\">http://www.ipresst.com/play/5534b2e66309648f2a000af6</a></p>\n<p>以后若有更多内容，或关于生活，或关于技术，我将毫不吝啬地分享，希望能够有所帮助。最近多在翻墙，英语式的阅读，可以理解为装逼式地学习，成长中，感悟中.</p>\n<p>reply:</p>\n<pre><code>from 个人邮件: 　caijinlin2012@gmail.com\nfrom 个人博客：　http://caijinlin.github.io\nfrom 个人微信公众订阅号: susetips\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"搜索技巧和资源整合\"><a href=\"#搜索技巧和资源整合\" class=\"headerlink\" title=\"搜索技巧和资源整合\"></a>搜索技巧和资源整合</h3><pre><code>在这个信息爆炸的时代，我们如何用更短的时间获取到更有效的知识，我以前感到很苦恼。于是整理了一些关于知识整理和搜索技巧方面的东西(但是还是不够)。\n</code></pre><p>分享主题:搜索技巧和资源整合以及一些有用的工具及插件，网址.</p>\n<p>分享ppt地址:<a href=\"http://www.ipresst.com/play/5534b2e66309648f2a000af6\" target=\"_blank\" rel=\"external\">http://www.ipresst.com/play/5534b2e66309648f2a000af6</a></p>\n<p>以后若有更多内容，或关于生活，或关于技术，我将毫不吝啬地分享，希望能够有所帮助。最近多在翻墙，英语式的阅读，可以理解为装逼式地学习，成长中，感悟中.</p>\n<p>reply:</p>\n<pre><code>from 个人邮件: 　caijinlin2012@gmail.com\nfrom 个人博客：　http://caijinlin.github.io\nfrom 个人微信公众订阅号: susetips\n</code></pre>"},{"title":"php细节整理","date":"2015-04-08T00:00:00.000Z","_content":"\n### php一些注意的点\n\n最近在php开发时，发现业务多了，经常会遇见因为php细节注意不当而导致的bug，影响开发效率，记录在这里。\n\n<!-- more -->\n\nphp作为一种弱类型语言，所以强制类型转化有时就变得特别重要\n\n#### 判断某个变量是否存在建议用isset,即使$a等于0也不会有问题\n``` php\n    if (isset($a)) {            if ($a) {\n                        not=》\n    }                           }\n```\n#### define常量时，判断一下\n``` php\n    !defined('PROJECT_ID') && defined('PROJECT_ID', 2);\n    如果PROJECT_ID没有定义时，输出PROJECT_ID ,则会打印出\"PROJECT_ID\"字符串，\n    所以使用的时候需要(int) PROJECT_ID判断下，是否存在。\n```\n\n#### 不需要使用的变量，尽量unset，节约内存\n``` php\n    unset($a);\n```\n\n#### 在某些情况下，你可以使用isset() 技巧加速执行你的代码。\n```\n（举例如下） if (strlen($foo) < 5) { echo 'Foo is too short'; } \n（与下面的技巧做比较） if (!isset($foo[5])) { echo 'Foo is too short'; } \n```\n调用isset()恰巧比strlen()快，因为与后者不同的是，isset()作为一种语言结构，意味着它的执行不需要函数查找和字母小写化。\n\n#### 总结\n\n很多php细节需要注意，一直在路上！\n\n","source":"_posts/php-details.md","raw":"---\ntitle: php细节整理\ntags: []\ndate: 2015-04-08 08:00:00\n---\n\n### php一些注意的点\n\n最近在php开发时，发现业务多了，经常会遇见因为php细节注意不当而导致的bug，影响开发效率，记录在这里。\n\n<!-- more -->\n\nphp作为一种弱类型语言，所以强制类型转化有时就变得特别重要\n\n#### 判断某个变量是否存在建议用isset,即使$a等于0也不会有问题\n``` php\n    if (isset($a)) {            if ($a) {\n                        not=》\n    }                           }\n```\n#### define常量时，判断一下\n``` php\n    !defined('PROJECT_ID') && defined('PROJECT_ID', 2);\n    如果PROJECT_ID没有定义时，输出PROJECT_ID ,则会打印出\"PROJECT_ID\"字符串，\n    所以使用的时候需要(int) PROJECT_ID判断下，是否存在。\n```\n\n#### 不需要使用的变量，尽量unset，节约内存\n``` php\n    unset($a);\n```\n\n#### 在某些情况下，你可以使用isset() 技巧加速执行你的代码。\n```\n（举例如下） if (strlen($foo) < 5) { echo 'Foo is too short'; } \n（与下面的技巧做比较） if (!isset($foo[5])) { echo 'Foo is too short'; } \n```\n调用isset()恰巧比strlen()快，因为与后者不同的是，isset()作为一种语言结构，意味着它的执行不需要函数查找和字母小写化。\n\n#### 总结\n\n很多php细节需要注意，一直在路上！\n\n","slug":"php-details","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwsk00172o5p2o809g7z","content":"<h3 id=\"php一些注意的点\"><a href=\"#php一些注意的点\" class=\"headerlink\" title=\"php一些注意的点\"></a>php一些注意的点</h3><p>最近在php开发时，发现业务多了，经常会遇见因为php细节注意不当而导致的bug，影响开发效率，记录在这里。</p>\n<a id=\"more\"></a>\n<p>php作为一种弱类型语言，所以强制类型转化有时就变得特别重要</p>\n<h4 id=\"判断某个变量是否存在建议用isset-即使-a等于0也不会有问题\"><a href=\"#判断某个变量是否存在建议用isset-即使-a等于0也不会有问题\" class=\"headerlink\" title=\"判断某个变量是否存在建议用isset,即使$a等于0也不会有问题\"></a>判断某个变量是否存在建议用isset,即使$a等于0也不会有问题</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($a)) &#123;            <span class=\"keyword\">if</span> ($a) &#123;</div><div class=\"line\">                    not=》</div><div class=\"line\">&#125;                           &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"define常量时，判断一下\"><a href=\"#define常量时，判断一下\" class=\"headerlink\" title=\"define常量时，判断一下\"></a>define常量时，判断一下</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">!defined(<span class=\"string\">'PROJECT_ID'</span>) &amp;&amp; defined(<span class=\"string\">'PROJECT_ID'</span>, <span class=\"number\">2</span>);</div><div class=\"line\">如果PROJECT_ID没有定义时，输出PROJECT_ID ,则会打印出<span class=\"string\">\"PROJECT_ID\"</span>字符串，</div><div class=\"line\">所以使用的时候需要(int) PROJECT_ID判断下，是否存在。</div></pre></td></tr></table></figure>\n<h4 id=\"不需要使用的变量，尽量unset，节约内存\"><a href=\"#不需要使用的变量，尽量unset，节约内存\" class=\"headerlink\" title=\"不需要使用的变量，尽量unset，节约内存\"></a>不需要使用的变量，尽量unset，节约内存</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">unset</span>($a);</div></pre></td></tr></table></figure>\n<h4 id=\"在某些情况下，你可以使用isset-技巧加速执行你的代码。\"><a href=\"#在某些情况下，你可以使用isset-技巧加速执行你的代码。\" class=\"headerlink\" title=\"在某些情况下，你可以使用isset() 技巧加速执行你的代码。\"></a>在某些情况下，你可以使用isset() 技巧加速执行你的代码。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">（举例如下） if (strlen($foo) &lt; 5) &#123; echo &apos;Foo is too short&apos;; &#125; </div><div class=\"line\">（与下面的技巧做比较） if (!isset($foo[5])) &#123; echo &apos;Foo is too short&apos;; &#125;</div></pre></td></tr></table></figure>\n<p>调用isset()恰巧比strlen()快，因为与后者不同的是，isset()作为一种语言结构，意味着它的执行不需要函数查找和字母小写化。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>很多php细节需要注意，一直在路上！</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"php一些注意的点\"><a href=\"#php一些注意的点\" class=\"headerlink\" title=\"php一些注意的点\"></a>php一些注意的点</h3><p>最近在php开发时，发现业务多了，经常会遇见因为php细节注意不当而导致的bug，影响开发效率，记录在这里。</p>","more":"<p>php作为一种弱类型语言，所以强制类型转化有时就变得特别重要</p>\n<h4 id=\"判断某个变量是否存在建议用isset-即使-a等于0也不会有问题\"><a href=\"#判断某个变量是否存在建议用isset-即使-a等于0也不会有问题\" class=\"headerlink\" title=\"判断某个变量是否存在建议用isset,即使$a等于0也不会有问题\"></a>判断某个变量是否存在建议用isset,即使$a等于0也不会有问题</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($a)) &#123;            <span class=\"keyword\">if</span> ($a) &#123;</div><div class=\"line\">                    not=》</div><div class=\"line\">&#125;                           &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"define常量时，判断一下\"><a href=\"#define常量时，判断一下\" class=\"headerlink\" title=\"define常量时，判断一下\"></a>define常量时，判断一下</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">!defined(<span class=\"string\">'PROJECT_ID'</span>) &amp;&amp; defined(<span class=\"string\">'PROJECT_ID'</span>, <span class=\"number\">2</span>);</div><div class=\"line\">如果PROJECT_ID没有定义时，输出PROJECT_ID ,则会打印出<span class=\"string\">\"PROJECT_ID\"</span>字符串，</div><div class=\"line\">所以使用的时候需要(int) PROJECT_ID判断下，是否存在。</div></pre></td></tr></table></figure>\n<h4 id=\"不需要使用的变量，尽量unset，节约内存\"><a href=\"#不需要使用的变量，尽量unset，节约内存\" class=\"headerlink\" title=\"不需要使用的变量，尽量unset，节约内存\"></a>不需要使用的变量，尽量unset，节约内存</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">unset</span>($a);</div></pre></td></tr></table></figure>\n<h4 id=\"在某些情况下，你可以使用isset-技巧加速执行你的代码。\"><a href=\"#在某些情况下，你可以使用isset-技巧加速执行你的代码。\" class=\"headerlink\" title=\"在某些情况下，你可以使用isset() 技巧加速执行你的代码。\"></a>在某些情况下，你可以使用isset() 技巧加速执行你的代码。</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">（举例如下） if (strlen($foo) &lt; 5) &#123; echo &apos;Foo is too short&apos;; &#125; </div><div class=\"line\">（与下面的技巧做比较） if (!isset($foo[5])) &#123; echo &apos;Foo is too short&apos;; &#125;</div></pre></td></tr></table></figure>\n<p>调用isset()恰巧比strlen()快，因为与后者不同的是，isset()作为一种语言结构，意味着它的执行不需要函数查找和字母小写化。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>很多php细节需要注意，一直在路上！</p>"},{"title":"php处理emoji表情","date":"2016-03-01T00:00:00.000Z","_content":"\n手机端网页输入表情时，显示的时候会乱码。而且android和iphone两种机型对emoji表情的解码不一样，导致一些不兼容问题。需要一种方案处理emoji表情，自己在做的时候，总结下三种方案。\n\n#### 三种方案\n\n\t1.使用utf8mb4存储（但不完美）\n\t2.使用现有的php-emoji库\n\t3.composer require mojione/emojione\n\n#### 方案一(utf8mb4)\n\n    修改编码, utf8mb4兼容utf8，且比utf8能表示更多的字符。可以存储emoji表情字符\n\n    修改如下：\n\n    1.设置表编码和相应字段编码为utf8mb4\n    2.设置连接数据库编码为utf8mb4\n\n    ALTER TABLE `users` CHARACTER  SET utf8mb4 COLLATE utf8mb4_general_ci;\n\tALTER TABLE `users` CHANGE `comment` `comment` TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL;\n\n\tDB_CHARSET => 'utf8mb4'; //如果thinkphp，配置文件中修改连接数据库编码\n\n\t缺点: iphone手机上不能显示android手机发的表情\n\t优点:  简单，不用修改代码\n\n\n#### 方案二 [(https://github.com/iamcal/php-emoji)](https://github.com/iamcal/php-emoji)\n\n\t使用php-emoji库处理，原理是: 手机发的表情字符存入到数据库中是一段html, 显示的时候通过引用emoji库的css， 显示表情。\n\n\t修改如下:\n\n\t1.引入emoji.css, 并确保emoji.png引入到css中指定的位置\n\n\t2.引入emoji.php, post过来的内容作如下处理：\n\n\t$content = emoji_docomo_to_unified($content);\n\t$html = emoji_unified_to_html($content);\n\n\t//将$html存入数据库，$html类似<span class=\"emoji emoji1f609\"></span>\n\n\t缺点: 通过css实现，需要加载emoji.css和emoji.png和emoji.php, 依赖外部\n\t优点: 兼容性好，web, android, iphone都可查看表情\n\n#### 方案三 [(https://packagist.org/packages/emojione/emojione)](https://packagist.org/packages/emojione/emojione)\n\n\t通过composer引入: `composer require mojione/emojione`\n\n\t保存时: Emojione::toShort($comment));\n\n\t显示时: Emojione::shortnameToUnicode($comment);\n\n\t缺点：第三方输入法（比如百度输入法）的表情不是完全支持\n\t优点：目前为止兼容性最好的\n\n","source":"_posts/php-emoji.md","raw":"---\ntitle: php处理emoji表情\ntags: []\ndate: 2016-03-01 08:00:00\n---\n\n手机端网页输入表情时，显示的时候会乱码。而且android和iphone两种机型对emoji表情的解码不一样，导致一些不兼容问题。需要一种方案处理emoji表情，自己在做的时候，总结下三种方案。\n\n#### 三种方案\n\n\t1.使用utf8mb4存储（但不完美）\n\t2.使用现有的php-emoji库\n\t3.composer require mojione/emojione\n\n#### 方案一(utf8mb4)\n\n    修改编码, utf8mb4兼容utf8，且比utf8能表示更多的字符。可以存储emoji表情字符\n\n    修改如下：\n\n    1.设置表编码和相应字段编码为utf8mb4\n    2.设置连接数据库编码为utf8mb4\n\n    ALTER TABLE `users` CHARACTER  SET utf8mb4 COLLATE utf8mb4_general_ci;\n\tALTER TABLE `users` CHANGE `comment` `comment` TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL;\n\n\tDB_CHARSET => 'utf8mb4'; //如果thinkphp，配置文件中修改连接数据库编码\n\n\t缺点: iphone手机上不能显示android手机发的表情\n\t优点:  简单，不用修改代码\n\n\n#### 方案二 [(https://github.com/iamcal/php-emoji)](https://github.com/iamcal/php-emoji)\n\n\t使用php-emoji库处理，原理是: 手机发的表情字符存入到数据库中是一段html, 显示的时候通过引用emoji库的css， 显示表情。\n\n\t修改如下:\n\n\t1.引入emoji.css, 并确保emoji.png引入到css中指定的位置\n\n\t2.引入emoji.php, post过来的内容作如下处理：\n\n\t$content = emoji_docomo_to_unified($content);\n\t$html = emoji_unified_to_html($content);\n\n\t//将$html存入数据库，$html类似<span class=\"emoji emoji1f609\"></span>\n\n\t缺点: 通过css实现，需要加载emoji.css和emoji.png和emoji.php, 依赖外部\n\t优点: 兼容性好，web, android, iphone都可查看表情\n\n#### 方案三 [(https://packagist.org/packages/emojione/emojione)](https://packagist.org/packages/emojione/emojione)\n\n\t通过composer引入: `composer require mojione/emojione`\n\n\t保存时: Emojione::toShort($comment));\n\n\t显示时: Emojione::shortnameToUnicode($comment);\n\n\t缺点：第三方输入法（比如百度输入法）的表情不是完全支持\n\t优点：目前为止兼容性最好的\n\n","slug":"php-emoji","published":1,"updated":"2017-03-08T12:15:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwsm00182o5pslp449q8","content":"<p>手机端网页输入表情时，显示的时候会乱码。而且android和iphone两种机型对emoji表情的解码不一样，导致一些不兼容问题。需要一种方案处理emoji表情，自己在做的时候，总结下三种方案。</p>\n<h4 id=\"三种方案\"><a href=\"#三种方案\" class=\"headerlink\" title=\"三种方案\"></a>三种方案</h4><pre><code>1.使用utf8mb4存储（但不完美）\n2.使用现有的php-emoji库\n3.composer require mojione/emojione\n</code></pre><h4 id=\"方案一-utf8mb4\"><a href=\"#方案一-utf8mb4\" class=\"headerlink\" title=\"方案一(utf8mb4)\"></a>方案一(utf8mb4)</h4><pre><code>修改编码, utf8mb4兼容utf8，且比utf8能表示更多的字符。可以存储emoji表情字符\n\n修改如下：\n\n1.设置表编码和相应字段编码为utf8mb4\n2.设置连接数据库编码为utf8mb4\n\nALTER TABLE `users` CHARACTER  SET utf8mb4 COLLATE utf8mb4_general_ci;\nALTER TABLE `users` CHANGE `comment` `comment` TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL;\n\nDB_CHARSET =&gt; &apos;utf8mb4&apos;; //如果thinkphp，配置文件中修改连接数据库编码\n\n缺点: iphone手机上不能显示android手机发的表情\n优点:  简单，不用修改代码\n</code></pre><h4 id=\"方案二-https-github-com-iamcal-php-emoji\"><a href=\"#方案二-https-github-com-iamcal-php-emoji\" class=\"headerlink\" title=\"方案二 (https://github.com/iamcal/php-emoji)\"></a>方案二 <a href=\"https://github.com/iamcal/php-emoji\" target=\"_blank\" rel=\"external\">(https://github.com/iamcal/php-emoji)</a></h4><pre><code>使用php-emoji库处理，原理是: 手机发的表情字符存入到数据库中是一段html, 显示的时候通过引用emoji库的css， 显示表情。\n\n修改如下:\n\n1.引入emoji.css, 并确保emoji.png引入到css中指定的位置\n\n2.引入emoji.php, post过来的内容作如下处理：\n\n$content = emoji_docomo_to_unified($content);\n$html = emoji_unified_to_html($content);\n\n//将$html存入数据库，$html类似&lt;span class=&quot;emoji emoji1f609&quot;&gt;&lt;/span&gt;\n\n缺点: 通过css实现，需要加载emoji.css和emoji.png和emoji.php, 依赖外部\n优点: 兼容性好，web, android, iphone都可查看表情\n</code></pre><h4 id=\"方案三-https-packagist-org-packages-emojione-emojione\"><a href=\"#方案三-https-packagist-org-packages-emojione-emojione\" class=\"headerlink\" title=\"方案三 (https://packagist.org/packages/emojione/emojione)\"></a>方案三 <a href=\"https://packagist.org/packages/emojione/emojione\" target=\"_blank\" rel=\"external\">(https://packagist.org/packages/emojione/emojione)</a></h4><pre><code>通过composer引入: `composer require mojione/emojione`\n\n保存时: Emojione::toShort($comment));\n\n显示时: Emojione::shortnameToUnicode($comment);\n\n缺点：第三方输入法（比如百度输入法）的表情不是完全支持\n优点：目前为止兼容性最好的\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>手机端网页输入表情时，显示的时候会乱码。而且android和iphone两种机型对emoji表情的解码不一样，导致一些不兼容问题。需要一种方案处理emoji表情，自己在做的时候，总结下三种方案。</p>\n<h4 id=\"三种方案\"><a href=\"#三种方案\" class=\"headerlink\" title=\"三种方案\"></a>三种方案</h4><pre><code>1.使用utf8mb4存储（但不完美）\n2.使用现有的php-emoji库\n3.composer require mojione/emojione\n</code></pre><h4 id=\"方案一-utf8mb4\"><a href=\"#方案一-utf8mb4\" class=\"headerlink\" title=\"方案一(utf8mb4)\"></a>方案一(utf8mb4)</h4><pre><code>修改编码, utf8mb4兼容utf8，且比utf8能表示更多的字符。可以存储emoji表情字符\n\n修改如下：\n\n1.设置表编码和相应字段编码为utf8mb4\n2.设置连接数据库编码为utf8mb4\n\nALTER TABLE `users` CHARACTER  SET utf8mb4 COLLATE utf8mb4_general_ci;\nALTER TABLE `users` CHANGE `comment` `comment` TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL;\n\nDB_CHARSET =&gt; &apos;utf8mb4&apos;; //如果thinkphp，配置文件中修改连接数据库编码\n\n缺点: iphone手机上不能显示android手机发的表情\n优点:  简单，不用修改代码\n</code></pre><h4 id=\"方案二-https-github-com-iamcal-php-emoji\"><a href=\"#方案二-https-github-com-iamcal-php-emoji\" class=\"headerlink\" title=\"方案二 (https://github.com/iamcal/php-emoji)\"></a>方案二 <a href=\"https://github.com/iamcal/php-emoji\" target=\"_blank\" rel=\"external\">(https://github.com/iamcal/php-emoji)</a></h4><pre><code>使用php-emoji库处理，原理是: 手机发的表情字符存入到数据库中是一段html, 显示的时候通过引用emoji库的css， 显示表情。\n\n修改如下:\n\n1.引入emoji.css, 并确保emoji.png引入到css中指定的位置\n\n2.引入emoji.php, post过来的内容作如下处理：\n\n$content = emoji_docomo_to_unified($content);\n$html = emoji_unified_to_html($content);\n\n//将$html存入数据库，$html类似&lt;span class=&quot;emoji emoji1f609&quot;&gt;&lt;/span&gt;\n\n缺点: 通过css实现，需要加载emoji.css和emoji.png和emoji.php, 依赖外部\n优点: 兼容性好，web, android, iphone都可查看表情\n</code></pre><h4 id=\"方案三-https-packagist-org-packages-emojione-emojione\"><a href=\"#方案三-https-packagist-org-packages-emojione-emojione\" class=\"headerlink\" title=\"方案三 (https://packagist.org/packages/emojione/emojione)\"></a>方案三 <a href=\"https://packagist.org/packages/emojione/emojione\" target=\"_blank\" rel=\"external\">(https://packagist.org/packages/emojione/emojione)</a></h4><pre><code>通过composer引入: `composer require mojione/emojione`\n\n保存时: Emojione::toShort($comment));\n\n显示时: Emojione::shortnameToUnicode($comment);\n\n缺点：第三方输入法（比如百度输入法）的表情不是完全支持\n优点：目前为止兼容性最好的\n</code></pre>"},{"title":"php like查询json字符串的某一个字段","date":"2015-04-20T00:00:00.000Z","_content":"\n### 查询json字段需要过滤特殊字符, 数据量大了之后可能存在性能问题\n\n\t比如donate_form_data存取 \n\n\t{\n\t\t\"name\":\"\\u79d1\\u5fe0\",\n\t\t\"new_item_6\":\"\\u7535\\u5b50\\u90ae\\u7bb1\",\n\t\t\"title\":\"这是一段描述\",\n\t\t\"mobile\":\"\",\n\t\t\"gender\":\"\\u7537\",\n\t\t\"new_item_1\":\"\\u4e0d\\u662f\",\n\t\t\"new_item_2\":\"\",\n\t\t\"new_item_3\":\"\",\n\t\t\"new_item_4\":\"\",\n\t\t\"new_item_5\":\"\\u5426\",\n\t\t\"address_widget_province\":\"\",\n\t\t\"address\":\"\",\n\t\t\"browser_user_agent\":\"Mozilla\\/5.0 (Linux; U; Android 5.1.1; en-us; HUAWEI P7-L00 Build\\/HuaweiP7-L00) AppleWebKit\\/533.1 (KHTML, like Gecko)Version\\/4.0 MQQBrowser\\/5.4 TBS\\/025440 Mobile Safari\\/533.1 MicroMessenger\\/6.2.5.50_rbb77fd6.621 NetType\\/WIFI Language\\/en\",\n\t}\n\n\t需要查询donate_form_data 中的title\n \t$sql = \"\n        SELECT \n            sum(cd.donate_amount) donate_amount, count(cd.donate_amount) donate_count\n        FROM \n            donates cd\n        WHERE \n            and cd.donate_form_data like '%s'\n        \";\n    $query = '这是一段';\n    $title = str_replace('\\\\', '_', json_encode($query));\n    $donates[$item['id']] = M(\"\")->query($sql, '%' . $title . '%');","source":"_posts/php-like-query.md","raw":"---\ntitle: php like查询json字符串的某一个字段\ntags: []\ndate: 2015-04-20 08:00:00\n---\n\n### 查询json字段需要过滤特殊字符, 数据量大了之后可能存在性能问题\n\n\t比如donate_form_data存取 \n\n\t{\n\t\t\"name\":\"\\u79d1\\u5fe0\",\n\t\t\"new_item_6\":\"\\u7535\\u5b50\\u90ae\\u7bb1\",\n\t\t\"title\":\"这是一段描述\",\n\t\t\"mobile\":\"\",\n\t\t\"gender\":\"\\u7537\",\n\t\t\"new_item_1\":\"\\u4e0d\\u662f\",\n\t\t\"new_item_2\":\"\",\n\t\t\"new_item_3\":\"\",\n\t\t\"new_item_4\":\"\",\n\t\t\"new_item_5\":\"\\u5426\",\n\t\t\"address_widget_province\":\"\",\n\t\t\"address\":\"\",\n\t\t\"browser_user_agent\":\"Mozilla\\/5.0 (Linux; U; Android 5.1.1; en-us; HUAWEI P7-L00 Build\\/HuaweiP7-L00) AppleWebKit\\/533.1 (KHTML, like Gecko)Version\\/4.0 MQQBrowser\\/5.4 TBS\\/025440 Mobile Safari\\/533.1 MicroMessenger\\/6.2.5.50_rbb77fd6.621 NetType\\/WIFI Language\\/en\",\n\t}\n\n\t需要查询donate_form_data 中的title\n \t$sql = \"\n        SELECT \n            sum(cd.donate_amount) donate_amount, count(cd.donate_amount) donate_count\n        FROM \n            donates cd\n        WHERE \n            and cd.donate_form_data like '%s'\n        \";\n    $query = '这是一段';\n    $title = str_replace('\\\\', '_', json_encode($query));\n    $donates[$item['id']] = M(\"\")->query($sql, '%' . $title . '%');","slug":"php-like-query","published":1,"updated":"2017-03-08T12:28:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwss00192o5phjviyv7q","content":"<h3 id=\"查询json字段需要过滤特殊字符-数据量大了之后可能存在性能问题\"><a href=\"#查询json字段需要过滤特殊字符-数据量大了之后可能存在性能问题\" class=\"headerlink\" title=\"查询json字段需要过滤特殊字符, 数据量大了之后可能存在性能问题\"></a>查询json字段需要过滤特殊字符, 数据量大了之后可能存在性能问题</h3><pre><code>比如donate_form_data存取 \n\n{\n    &quot;name&quot;:&quot;\\u79d1\\u5fe0&quot;,\n    &quot;new_item_6&quot;:&quot;\\u7535\\u5b50\\u90ae\\u7bb1&quot;,\n    &quot;title&quot;:&quot;这是一段描述&quot;,\n    &quot;mobile&quot;:&quot;&quot;,\n    &quot;gender&quot;:&quot;\\u7537&quot;,\n    &quot;new_item_1&quot;:&quot;\\u4e0d\\u662f&quot;,\n    &quot;new_item_2&quot;:&quot;&quot;,\n    &quot;new_item_3&quot;:&quot;&quot;,\n    &quot;new_item_4&quot;:&quot;&quot;,\n    &quot;new_item_5&quot;:&quot;\\u5426&quot;,\n    &quot;address_widget_province&quot;:&quot;&quot;,\n    &quot;address&quot;:&quot;&quot;,\n    &quot;browser_user_agent&quot;:&quot;Mozilla\\/5.0 (Linux; U; Android 5.1.1; en-us; HUAWEI P7-L00 Build\\/HuaweiP7-L00) AppleWebKit\\/533.1 (KHTML, like Gecko)Version\\/4.0 MQQBrowser\\/5.4 TBS\\/025440 Mobile Safari\\/533.1 MicroMessenger\\/6.2.5.50_rbb77fd6.621 NetType\\/WIFI Language\\/en&quot;,\n}\n\n需要查询donate_form_data 中的title\n $sql = &quot;\n    SELECT \n        sum(cd.donate_amount) donate_amount, count(cd.donate_amount) donate_count\n    FROM \n        donates cd\n    WHERE \n        and cd.donate_form_data like &apos;%s&apos;\n    &quot;;\n$query = &apos;这是一段&apos;;\n$title = str_replace(&apos;\\\\&apos;, &apos;_&apos;, json_encode($query));\n$donates[$item[&apos;id&apos;]] = M(&quot;&quot;)-&gt;query($sql, &apos;%&apos; . $title . &apos;%&apos;);\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"查询json字段需要过滤特殊字符-数据量大了之后可能存在性能问题\"><a href=\"#查询json字段需要过滤特殊字符-数据量大了之后可能存在性能问题\" class=\"headerlink\" title=\"查询json字段需要过滤特殊字符, 数据量大了之后可能存在性能问题\"></a>查询json字段需要过滤特殊字符, 数据量大了之后可能存在性能问题</h3><pre><code>比如donate_form_data存取 \n\n{\n    &quot;name&quot;:&quot;\\u79d1\\u5fe0&quot;,\n    &quot;new_item_6&quot;:&quot;\\u7535\\u5b50\\u90ae\\u7bb1&quot;,\n    &quot;title&quot;:&quot;这是一段描述&quot;,\n    &quot;mobile&quot;:&quot;&quot;,\n    &quot;gender&quot;:&quot;\\u7537&quot;,\n    &quot;new_item_1&quot;:&quot;\\u4e0d\\u662f&quot;,\n    &quot;new_item_2&quot;:&quot;&quot;,\n    &quot;new_item_3&quot;:&quot;&quot;,\n    &quot;new_item_4&quot;:&quot;&quot;,\n    &quot;new_item_5&quot;:&quot;\\u5426&quot;,\n    &quot;address_widget_province&quot;:&quot;&quot;,\n    &quot;address&quot;:&quot;&quot;,\n    &quot;browser_user_agent&quot;:&quot;Mozilla\\/5.0 (Linux; U; Android 5.1.1; en-us; HUAWEI P7-L00 Build\\/HuaweiP7-L00) AppleWebKit\\/533.1 (KHTML, like Gecko)Version\\/4.0 MQQBrowser\\/5.4 TBS\\/025440 Mobile Safari\\/533.1 MicroMessenger\\/6.2.5.50_rbb77fd6.621 NetType\\/WIFI Language\\/en&quot;,\n}\n\n需要查询donate_form_data 中的title\n $sql = &quot;\n    SELECT \n        sum(cd.donate_amount) donate_amount, count(cd.donate_amount) donate_count\n    FROM \n        donates cd\n    WHERE \n        and cd.donate_form_data like &apos;%s&apos;\n    &quot;;\n$query = &apos;这是一段&apos;;\n$title = str_replace(&apos;\\\\&apos;, &apos;_&apos;, json_encode($query));\n$donates[$item[&apos;id&apos;]] = M(&quot;&quot;)-&gt;query($sql, &apos;%&apos; . $title . &apos;%&apos;);\n</code></pre>"},{"title":"php实现多线程抓取网页","date":"2014-06-23T00:00:00.000Z","_content":"\n### php\n实现多线程抓取网页\n\n使用PHP的cURL库可以简单和有效地去抓网页。你只需要运行一个脚本，然后分析一下你所抓取的网页，然后就可以以程序的方式得到你想要的数据了。无论是你想从从一个链接上取部分数据，或是取一个XML文件并把其导入数据库，那怕就是简单的获取网页内容，cURL 是一个功能强大的PHP库。本文主要讲述如果使用这个PHP库抓取网页。\n\n<!-- more -->            \n\n#### 开启curl库\n\n首先要确定我们的PHP是否开启了这个库，如果你是在Windows平台下，需要改一改你的php.ini文件的设置，找到php_curl.dll，取消前面的分号就行：\n\n    extension=php_curl.dll\n\n##### 利用curl抓取网页代码\n\n    <?php\n    $urls = array(    \n        'http://www.baidu.com/',\n        'http://www.caijinlin.com/',\n        'http://caijinlin.github.io'\n    );   \n    $save_to='./res.txt';   // 把抓取的代码写入该文件       \n    $st = fopen($save_to,\"a\");      \n    $mh = curl_multi_init(); //创建多个curl句柄\n    foreach ($urls as $i => $url) \n    {   \n    $conn[$i] = curl_init($url);   //创建一个curl句柄\n    curl_setopt($conn[$i], CURLOPT_USERAGENT, \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\");   \n    curl_setopt($conn[$i], CURLOPT_HEADER ,0);  // 这里不要header，加块效率\n    curl_setopt($conn[$i], CURLOPT_CONNECTTIMEOUT,60);   //设置超时时间\n    curl_setopt($conn[$i],CURLOPT_RETURNTRANSFER,true);  // 设置不将爬取代码写到浏览器，而是转化为字符串  \n    curl_multi_add_handle ($mh,$conn[$i]);   //向curl批处理会话中添加单独的curl句柄\n    }   \n    do \n    {   \n        curl_multi_exec($mh,$active);//循环执行   \n    } while ($active);   \n    foreach ($urls as $i => $url) \n    {   \n        $data = curl_multi_getcontent($conn[$i]); // 获得爬取的代码字符串   \n        fwrite($st,$data);  // 将字符串写入文件。当然，也可以不写入文件，比如存入数据库   \n    } // 获得数据变量，并写入文件   \n    foreach ($urls as $i => $url) \n    {   \n      curl_multi_remove_handle($mh,$conn[$i]); // 移除curl批处理句柄资源中的某个句柄资源  \n      curl_close($conn[$i]);   \n    }    \n    curl_multi_close($mh); //关闭多个cURL 多个句柄\n    fclose($st);  //关闭文件\n    ?>\n\n#### 效果预览\n\n抓取3个网页，通过curl可以达到多线程，进行同时抓取，而不必等到第一个网页抓取完毕，再抓取第二个。\nres.txt文件中，存放了3个网页的代码，分别复制出来，存放在html文件中，就可以看到他们的效果如下。\n\n百度页面\n\n![邻接表](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/baidu.png)\n\n我的基于jekyllbootstrap的博客\n\n![邻接表](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/jekyllblog.png)\n\n我的wordpress博客\n\n![邻接表](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/wordpress.png)","source":"_posts/php多线程.md","raw":"---\ntitle: php实现多线程抓取网页\ntags: [php]\ncategories: 技术\ndate: 2014-06-23 08:00:00\n---\n\n### php\n实现多线程抓取网页\n\n使用PHP的cURL库可以简单和有效地去抓网页。你只需要运行一个脚本，然后分析一下你所抓取的网页，然后就可以以程序的方式得到你想要的数据了。无论是你想从从一个链接上取部分数据，或是取一个XML文件并把其导入数据库，那怕就是简单的获取网页内容，cURL 是一个功能强大的PHP库。本文主要讲述如果使用这个PHP库抓取网页。\n\n<!-- more -->            \n\n#### 开启curl库\n\n首先要确定我们的PHP是否开启了这个库，如果你是在Windows平台下，需要改一改你的php.ini文件的设置，找到php_curl.dll，取消前面的分号就行：\n\n    extension=php_curl.dll\n\n##### 利用curl抓取网页代码\n\n    <?php\n    $urls = array(    \n        'http://www.baidu.com/',\n        'http://www.caijinlin.com/',\n        'http://caijinlin.github.io'\n    );   \n    $save_to='./res.txt';   // 把抓取的代码写入该文件       \n    $st = fopen($save_to,\"a\");      \n    $mh = curl_multi_init(); //创建多个curl句柄\n    foreach ($urls as $i => $url) \n    {   \n    $conn[$i] = curl_init($url);   //创建一个curl句柄\n    curl_setopt($conn[$i], CURLOPT_USERAGENT, \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\");   \n    curl_setopt($conn[$i], CURLOPT_HEADER ,0);  // 这里不要header，加块效率\n    curl_setopt($conn[$i], CURLOPT_CONNECTTIMEOUT,60);   //设置超时时间\n    curl_setopt($conn[$i],CURLOPT_RETURNTRANSFER,true);  // 设置不将爬取代码写到浏览器，而是转化为字符串  \n    curl_multi_add_handle ($mh,$conn[$i]);   //向curl批处理会话中添加单独的curl句柄\n    }   \n    do \n    {   \n        curl_multi_exec($mh,$active);//循环执行   \n    } while ($active);   \n    foreach ($urls as $i => $url) \n    {   \n        $data = curl_multi_getcontent($conn[$i]); // 获得爬取的代码字符串   \n        fwrite($st,$data);  // 将字符串写入文件。当然，也可以不写入文件，比如存入数据库   \n    } // 获得数据变量，并写入文件   \n    foreach ($urls as $i => $url) \n    {   \n      curl_multi_remove_handle($mh,$conn[$i]); // 移除curl批处理句柄资源中的某个句柄资源  \n      curl_close($conn[$i]);   \n    }    \n    curl_multi_close($mh); //关闭多个cURL 多个句柄\n    fclose($st);  //关闭文件\n    ?>\n\n#### 效果预览\n\n抓取3个网页，通过curl可以达到多线程，进行同时抓取，而不必等到第一个网页抓取完毕，再抓取第二个。\nres.txt文件中，存放了3个网页的代码，分别复制出来，存放在html文件中，就可以看到他们的效果如下。\n\n百度页面\n\n![邻接表](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/baidu.png)\n\n我的基于jekyllbootstrap的博客\n\n![邻接表](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/jekyllblog.png)\n\n我的wordpress博客\n\n![邻接表](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/wordpress.png)","slug":"php多线程","published":1,"updated":"2017-03-11T01:00:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwsu001a2o5pw3ydfq4z","content":"<h3 id=\"php\"><a href=\"#php\" class=\"headerlink\" title=\"php\"></a>php</h3><p>实现多线程抓取网页</p>\n<p>使用PHP的cURL库可以简单和有效地去抓网页。你只需要运行一个脚本，然后分析一下你所抓取的网页，然后就可以以程序的方式得到你想要的数据了。无论是你想从从一个链接上取部分数据，或是取一个XML文件并把其导入数据库，那怕就是简单的获取网页内容，cURL 是一个功能强大的PHP库。本文主要讲述如果使用这个PHP库抓取网页。</p>\n<a id=\"more\"></a>            \n<h4 id=\"开启curl库\"><a href=\"#开启curl库\" class=\"headerlink\" title=\"开启curl库\"></a>开启curl库</h4><p>首先要确定我们的PHP是否开启了这个库，如果你是在Windows平台下，需要改一改你的php.ini文件的设置，找到php_curl.dll，取消前面的分号就行：</p>\n<pre><code>extension=php_curl.dll\n</code></pre><h5 id=\"利用curl抓取网页代码\"><a href=\"#利用curl抓取网页代码\" class=\"headerlink\" title=\"利用curl抓取网页代码\"></a>利用curl抓取网页代码</h5><pre><code>&lt;?php\n$urls = array(    \n    &apos;http://www.baidu.com/&apos;,\n    &apos;http://www.caijinlin.com/&apos;,\n    &apos;http://caijinlin.github.io&apos;\n);   \n$save_to=&apos;./res.txt&apos;;   // 把抓取的代码写入该文件       \n$st = fopen($save_to,&quot;a&quot;);      \n$mh = curl_multi_init(); //创建多个curl句柄\nforeach ($urls as $i =&gt; $url) \n{   \n$conn[$i] = curl_init($url);   //创建一个curl句柄\ncurl_setopt($conn[$i], CURLOPT_USERAGENT, &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&quot;);   \ncurl_setopt($conn[$i], CURLOPT_HEADER ,0);  // 这里不要header，加块效率\ncurl_setopt($conn[$i], CURLOPT_CONNECTTIMEOUT,60);   //设置超时时间\ncurl_setopt($conn[$i],CURLOPT_RETURNTRANSFER,true);  // 设置不将爬取代码写到浏览器，而是转化为字符串  \ncurl_multi_add_handle ($mh,$conn[$i]);   //向curl批处理会话中添加单独的curl句柄\n}   \ndo \n{   \n    curl_multi_exec($mh,$active);//循环执行   \n} while ($active);   \nforeach ($urls as $i =&gt; $url) \n{   \n    $data = curl_multi_getcontent($conn[$i]); // 获得爬取的代码字符串   \n    fwrite($st,$data);  // 将字符串写入文件。当然，也可以不写入文件，比如存入数据库   \n} // 获得数据变量，并写入文件   \nforeach ($urls as $i =&gt; $url) \n{   \n  curl_multi_remove_handle($mh,$conn[$i]); // 移除curl批处理句柄资源中的某个句柄资源  \n  curl_close($conn[$i]);   \n}    \ncurl_multi_close($mh); //关闭多个cURL 多个句柄\nfclose($st);  //关闭文件\n?&gt;\n</code></pre><h4 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h4><p>抓取3个网页，通过curl可以达到多线程，进行同时抓取，而不必等到第一个网页抓取完毕，再抓取第二个。<br>res.txt文件中，存放了3个网页的代码，分别复制出来，存放在html文件中，就可以看到他们的效果如下。</p>\n<p>百度页面</p>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/baidu.png\" alt=\"邻接表\"></p>\n<p>我的基于jekyllbootstrap的博客</p>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/jekyllblog.png\" alt=\"邻接表\"></p>\n<p>我的wordpress博客</p>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/wordpress.png\" alt=\"邻接表\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"php\"><a href=\"#php\" class=\"headerlink\" title=\"php\"></a>php</h3><p>实现多线程抓取网页</p>\n<p>使用PHP的cURL库可以简单和有效地去抓网页。你只需要运行一个脚本，然后分析一下你所抓取的网页，然后就可以以程序的方式得到你想要的数据了。无论是你想从从一个链接上取部分数据，或是取一个XML文件并把其导入数据库，那怕就是简单的获取网页内容，cURL 是一个功能强大的PHP库。本文主要讲述如果使用这个PHP库抓取网页。</p>","more":"<h4 id=\"开启curl库\"><a href=\"#开启curl库\" class=\"headerlink\" title=\"开启curl库\"></a>开启curl库</h4><p>首先要确定我们的PHP是否开启了这个库，如果你是在Windows平台下，需要改一改你的php.ini文件的设置，找到php_curl.dll，取消前面的分号就行：</p>\n<pre><code>extension=php_curl.dll\n</code></pre><h5 id=\"利用curl抓取网页代码\"><a href=\"#利用curl抓取网页代码\" class=\"headerlink\" title=\"利用curl抓取网页代码\"></a>利用curl抓取网页代码</h5><pre><code>&lt;?php\n$urls = array(    \n    &apos;http://www.baidu.com/&apos;,\n    &apos;http://www.caijinlin.com/&apos;,\n    &apos;http://caijinlin.github.io&apos;\n);   \n$save_to=&apos;./res.txt&apos;;   // 把抓取的代码写入该文件       \n$st = fopen($save_to,&quot;a&quot;);      \n$mh = curl_multi_init(); //创建多个curl句柄\nforeach ($urls as $i =&gt; $url) \n{   \n$conn[$i] = curl_init($url);   //创建一个curl句柄\ncurl_setopt($conn[$i], CURLOPT_USERAGENT, &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&quot;);   \ncurl_setopt($conn[$i], CURLOPT_HEADER ,0);  // 这里不要header，加块效率\ncurl_setopt($conn[$i], CURLOPT_CONNECTTIMEOUT,60);   //设置超时时间\ncurl_setopt($conn[$i],CURLOPT_RETURNTRANSFER,true);  // 设置不将爬取代码写到浏览器，而是转化为字符串  \ncurl_multi_add_handle ($mh,$conn[$i]);   //向curl批处理会话中添加单独的curl句柄\n}   \ndo \n{   \n    curl_multi_exec($mh,$active);//循环执行   \n} while ($active);   \nforeach ($urls as $i =&gt; $url) \n{   \n    $data = curl_multi_getcontent($conn[$i]); // 获得爬取的代码字符串   \n    fwrite($st,$data);  // 将字符串写入文件。当然，也可以不写入文件，比如存入数据库   \n} // 获得数据变量，并写入文件   \nforeach ($urls as $i =&gt; $url) \n{   \n  curl_multi_remove_handle($mh,$conn[$i]); // 移除curl批处理句柄资源中的某个句柄资源  \n  curl_close($conn[$i]);   \n}    \ncurl_multi_close($mh); //关闭多个cURL 多个句柄\nfclose($st);  //关闭文件\n?&gt;\n</code></pre><h4 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h4><p>抓取3个网页，通过curl可以达到多线程，进行同时抓取，而不必等到第一个网页抓取完毕，再抓取第二个。<br>res.txt文件中，存放了3个网页的代码，分别复制出来，存放在html文件中，就可以看到他们的效果如下。</p>\n<p>百度页面</p>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/baidu.png\" alt=\"邻接表\"></p>\n<p>我的基于jekyllbootstrap的博客</p>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/jekyllblog.png\" alt=\"邻接表\"></p>\n<p>我的wordpress博客</p>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/wordpress.png\" alt=\"邻接表\"></p>"},{"title":"php-fpm监听进程不存在","date":"2015-11-18T00:00:00.000Z","_content":"\n基于lnmp安装的php-fpm启动后，发现并没有看到9000进程，加了网站配置文件后，出现502错误。\n\nphp-fpm可以正常启动，php-fpm默认在9000端口监听, 但是netstat并没有看到9000进程\n\n#### 启动查找进程\n``` php\n    /etc/init.d/php-fpm start\n    netstat -anp | grep 9000\n```\n\n#### 查看php-fpm配置文件\n``` php\n    vim /usr/local/php/etc/php-fpm.conf\n    [global]\n    pid = /usr/local/php/var/run/php-fpm.pid\n    error_log = /usr/local/php/var/log/php-fpm.log\n    log_level = notice\n\n    [www]\n    listen = /tmp/php-cgi.sock  #监听，改成127.0.0.1:9000\n    listen.backlog = -1\n    listen.allowed_clients = 127.0.0.1\n    listen.owner = www\n    listen.group = www\n    listen.mode = 0666\n    user = www\n    group = www\n    pm = dynamic\n    pm.max_children = 10\n    pm.start_servers = 2\n    pm.min_spare_servers = 1\n    pm.max_spare_servers = 6\n    request_terminate_timeout = 100\n    request_slowlog_timeout = 0\n    slowlog = var/log/slow.log\n\n```\n\n#### 网站配置文件test.com.conf\n``` php\n    server {\n        listen 80;\n        server_name test.com;\n        index index.html index.shtml index.php;\n        root /home/wwwroot/default/test;\n        include /home/wwwroot/default/test/nginx_rewrite.conf;\n        location ~ .*\\.(php|php5)?$\n        {\n            fastcgi_pass 127.0.0.1:9000; #9000端口\n            fastcgi_index index.php;\n            include fastcgi.conf;\n        }\n        location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|woff)$\n        {\n            expires 30d;\n            access_log        off;\n            log_not_found     off;\n        }\n        location ~ .*\\.(js|css)?$\n        {\n            expires 7d;\n            access_log        off;\n            log_not_found     off;\n        }\n        location ~ .*\\.(htaccess)?$\n        {\n            deny all;\n        }\n    }\n```\n\n### 对比php-fpm.conf与test.com.conf发现php-fpm的监听和fastcgi_pass不太一样\n\n```php\n    两者需要将监听形式改成一样，比如都是127.0.0.1:9000或者/tmp/php-cgi.sock\n```\n","source":"_posts/php-fpm-502.md","raw":"---\ntitle: php-fpm监听进程不存在\ntags: []\ndate: 2015-11-18 08:00:00\n---\n\n基于lnmp安装的php-fpm启动后，发现并没有看到9000进程，加了网站配置文件后，出现502错误。\n\nphp-fpm可以正常启动，php-fpm默认在9000端口监听, 但是netstat并没有看到9000进程\n\n#### 启动查找进程\n``` php\n    /etc/init.d/php-fpm start\n    netstat -anp | grep 9000\n```\n\n#### 查看php-fpm配置文件\n``` php\n    vim /usr/local/php/etc/php-fpm.conf\n    [global]\n    pid = /usr/local/php/var/run/php-fpm.pid\n    error_log = /usr/local/php/var/log/php-fpm.log\n    log_level = notice\n\n    [www]\n    listen = /tmp/php-cgi.sock  #监听，改成127.0.0.1:9000\n    listen.backlog = -1\n    listen.allowed_clients = 127.0.0.1\n    listen.owner = www\n    listen.group = www\n    listen.mode = 0666\n    user = www\n    group = www\n    pm = dynamic\n    pm.max_children = 10\n    pm.start_servers = 2\n    pm.min_spare_servers = 1\n    pm.max_spare_servers = 6\n    request_terminate_timeout = 100\n    request_slowlog_timeout = 0\n    slowlog = var/log/slow.log\n\n```\n\n#### 网站配置文件test.com.conf\n``` php\n    server {\n        listen 80;\n        server_name test.com;\n        index index.html index.shtml index.php;\n        root /home/wwwroot/default/test;\n        include /home/wwwroot/default/test/nginx_rewrite.conf;\n        location ~ .*\\.(php|php5)?$\n        {\n            fastcgi_pass 127.0.0.1:9000; #9000端口\n            fastcgi_index index.php;\n            include fastcgi.conf;\n        }\n        location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|woff)$\n        {\n            expires 30d;\n            access_log        off;\n            log_not_found     off;\n        }\n        location ~ .*\\.(js|css)?$\n        {\n            expires 7d;\n            access_log        off;\n            log_not_found     off;\n        }\n        location ~ .*\\.(htaccess)?$\n        {\n            deny all;\n        }\n    }\n```\n\n### 对比php-fpm.conf与test.com.conf发现php-fpm的监听和fastcgi_pass不太一样\n\n```php\n    两者需要将监听形式改成一样，比如都是127.0.0.1:9000或者/tmp/php-cgi.sock\n```\n","slug":"php-fpm-502","published":1,"updated":"2017-03-08T12:19:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwsv001b2o5p12u7ugx1","content":"<p>基于lnmp安装的php-fpm启动后，发现并没有看到9000进程，加了网站配置文件后，出现502错误。</p>\n<p>php-fpm可以正常启动，php-fpm默认在9000端口监听, 但是netstat并没有看到9000进程</p>\n<h4 id=\"启动查找进程\"><a href=\"#启动查找进程\" class=\"headerlink\" title=\"启动查找进程\"></a>启动查找进程</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/init.d/php-fpm start</div><div class=\"line\">netstat -anp | grep <span class=\"number\">9000</span></div></pre></td></tr></table></figure>\n<h4 id=\"查看php-fpm配置文件\"><a href=\"#查看php-fpm配置文件\" class=\"headerlink\" title=\"查看php-fpm配置文件\"></a>查看php-fpm配置文件</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /usr/local/php/etc/php-fpm.conf</div><div class=\"line\">[<span class=\"keyword\">global</span>]</div><div class=\"line\">pid = /usr/local/php/<span class=\"keyword\">var</span>/run/php-fpm.pid</div><div class=\"line\">error_log = /usr/local/php/<span class=\"keyword\">var</span>/log/php-fpm.log</div><div class=\"line\">log_level = notice</div><div class=\"line\"></div><div class=\"line\">[www]</div><div class=\"line\">listen = /tmp/php-cgi.sock  <span class=\"comment\">#监听，改成127.0.0.1:9000</span></div><div class=\"line\">listen.backlog = <span class=\"number\">-1</span></div><div class=\"line\">listen.allowed_clients = <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\">listen.owner = www</div><div class=\"line\">listen.group = www</div><div class=\"line\">listen.mode = <span class=\"number\">0666</span></div><div class=\"line\">user = www</div><div class=\"line\">group = www</div><div class=\"line\">pm = dynamic</div><div class=\"line\">pm.max_children = <span class=\"number\">10</span></div><div class=\"line\">pm.start_servers = <span class=\"number\">2</span></div><div class=\"line\">pm.min_spare_servers = <span class=\"number\">1</span></div><div class=\"line\">pm.max_spare_servers = <span class=\"number\">6</span></div><div class=\"line\">request_terminate_timeout = <span class=\"number\">100</span></div><div class=\"line\">request_slowlog_timeout = <span class=\"number\">0</span></div><div class=\"line\">slowlog = <span class=\"keyword\">var</span>/log/slow.log</div></pre></td></tr></table></figure>\n<h4 id=\"网站配置文件test-com-conf\"><a href=\"#网站配置文件test-com-conf\" class=\"headerlink\" title=\"网站配置文件test.com.conf\"></a>网站配置文件test.com.conf</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen <span class=\"number\">80</span>;</div><div class=\"line\">    server_name test.com;</div><div class=\"line\">    index index.html index.shtml index.php;</div><div class=\"line\">    root /home/wwwroot/<span class=\"keyword\">default</span>/test;</div><div class=\"line\">    <span class=\"keyword\">include</span> /home/wwwroot/<span class=\"keyword\">default</span>/test/nginx_rewrite.conf;</div><div class=\"line\">    location ~ .*\\.(php|php5)?$</div><div class=\"line\">    &#123;</div><div class=\"line\">        fastcgi_pass <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">9000</span>; <span class=\"comment\">#9000端口</span></div><div class=\"line\">        fastcgi_index index.php;</div><div class=\"line\">        <span class=\"keyword\">include</span> fastcgi.conf;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|woff)$</div><div class=\"line\">    &#123;</div><div class=\"line\">        expires <span class=\"number\">30</span>d;</div><div class=\"line\">        access_log        off;</div><div class=\"line\">        log_not_found     off;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location ~ .*\\.(js|css)?$</div><div class=\"line\">    &#123;</div><div class=\"line\">        expires <span class=\"number\">7</span>d;</div><div class=\"line\">        access_log        off;</div><div class=\"line\">        log_not_found     off;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location ~ .*\\.(htaccess)?$</div><div class=\"line\">    &#123;</div><div class=\"line\">        deny all;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"对比php-fpm-conf与test-com-conf发现php-fpm的监听和fastcgi-pass不太一样\"><a href=\"#对比php-fpm-conf与test-com-conf发现php-fpm的监听和fastcgi-pass不太一样\" class=\"headerlink\" title=\"对比php-fpm.conf与test.com.conf发现php-fpm的监听和fastcgi_pass不太一样\"></a>对比php-fpm.conf与test.com.conf发现php-fpm的监听和fastcgi_pass不太一样</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">两者需要将监听形式改成一样，比如都是<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">9000</span>或者/tmp/php-cgi.sock</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>基于lnmp安装的php-fpm启动后，发现并没有看到9000进程，加了网站配置文件后，出现502错误。</p>\n<p>php-fpm可以正常启动，php-fpm默认在9000端口监听, 但是netstat并没有看到9000进程</p>\n<h4 id=\"启动查找进程\"><a href=\"#启动查找进程\" class=\"headerlink\" title=\"启动查找进程\"></a>启动查找进程</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/init.d/php-fpm start</div><div class=\"line\">netstat -anp | grep <span class=\"number\">9000</span></div></pre></td></tr></table></figure>\n<h4 id=\"查看php-fpm配置文件\"><a href=\"#查看php-fpm配置文件\" class=\"headerlink\" title=\"查看php-fpm配置文件\"></a>查看php-fpm配置文件</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /usr/local/php/etc/php-fpm.conf</div><div class=\"line\">[<span class=\"keyword\">global</span>]</div><div class=\"line\">pid = /usr/local/php/<span class=\"keyword\">var</span>/run/php-fpm.pid</div><div class=\"line\">error_log = /usr/local/php/<span class=\"keyword\">var</span>/log/php-fpm.log</div><div class=\"line\">log_level = notice</div><div class=\"line\"></div><div class=\"line\">[www]</div><div class=\"line\">listen = /tmp/php-cgi.sock  <span class=\"comment\">#监听，改成127.0.0.1:9000</span></div><div class=\"line\">listen.backlog = <span class=\"number\">-1</span></div><div class=\"line\">listen.allowed_clients = <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\">listen.owner = www</div><div class=\"line\">listen.group = www</div><div class=\"line\">listen.mode = <span class=\"number\">0666</span></div><div class=\"line\">user = www</div><div class=\"line\">group = www</div><div class=\"line\">pm = dynamic</div><div class=\"line\">pm.max_children = <span class=\"number\">10</span></div><div class=\"line\">pm.start_servers = <span class=\"number\">2</span></div><div class=\"line\">pm.min_spare_servers = <span class=\"number\">1</span></div><div class=\"line\">pm.max_spare_servers = <span class=\"number\">6</span></div><div class=\"line\">request_terminate_timeout = <span class=\"number\">100</span></div><div class=\"line\">request_slowlog_timeout = <span class=\"number\">0</span></div><div class=\"line\">slowlog = <span class=\"keyword\">var</span>/log/slow.log</div></pre></td></tr></table></figure>\n<h4 id=\"网站配置文件test-com-conf\"><a href=\"#网站配置文件test-com-conf\" class=\"headerlink\" title=\"网站配置文件test.com.conf\"></a>网站配置文件test.com.conf</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen <span class=\"number\">80</span>;</div><div class=\"line\">    server_name test.com;</div><div class=\"line\">    index index.html index.shtml index.php;</div><div class=\"line\">    root /home/wwwroot/<span class=\"keyword\">default</span>/test;</div><div class=\"line\">    <span class=\"keyword\">include</span> /home/wwwroot/<span class=\"keyword\">default</span>/test/nginx_rewrite.conf;</div><div class=\"line\">    location ~ .*\\.(php|php5)?$</div><div class=\"line\">    &#123;</div><div class=\"line\">        fastcgi_pass <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">9000</span>; <span class=\"comment\">#9000端口</span></div><div class=\"line\">        fastcgi_index index.php;</div><div class=\"line\">        <span class=\"keyword\">include</span> fastcgi.conf;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|woff)$</div><div class=\"line\">    &#123;</div><div class=\"line\">        expires <span class=\"number\">30</span>d;</div><div class=\"line\">        access_log        off;</div><div class=\"line\">        log_not_found     off;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location ~ .*\\.(js|css)?$</div><div class=\"line\">    &#123;</div><div class=\"line\">        expires <span class=\"number\">7</span>d;</div><div class=\"line\">        access_log        off;</div><div class=\"line\">        log_not_found     off;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location ~ .*\\.(htaccess)?$</div><div class=\"line\">    &#123;</div><div class=\"line\">        deny all;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"对比php-fpm-conf与test-com-conf发现php-fpm的监听和fastcgi-pass不太一样\"><a href=\"#对比php-fpm-conf与test-com-conf发现php-fpm的监听和fastcgi-pass不太一样\" class=\"headerlink\" title=\"对比php-fpm.conf与test.com.conf发现php-fpm的监听和fastcgi_pass不太一样\"></a>对比php-fpm.conf与test.com.conf发现php-fpm的监听和fastcgi_pass不太一样</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">两者需要将监听形式改成一样，比如都是<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">9000</span>或者/tmp/php-cgi.sock</div></pre></td></tr></table></figure>\n"},{"title":"php parse soap xml response","date":"2017-03-01T00:00:00.000Z","_content":"\n#### 最近公司的一个需求，和外部对接需要用到xml。\n说明：XML本身不算复杂，但是，加上DTD、XSD、XPath、XSLT等一大堆复杂的规范以后，任何正常的软件开发人员碰到XML都会感觉头大了，最后大家发现，即使你努力钻研几个月，也未必搞得清楚XML的规范。> 使用场景：请求外部webservie，对方以xml的形式的返回，我们需要拿到数据，看起来很简单，但不懂xml与xsd就有点麻烦了。\n\n#### 遇到问题 =&gt; 发现问题\n通过传统解析xmlToJson, xmlToArray，怎么样也获取不到数据分析返回的xml，发现是xsd，并且含有命名空间The problem here is that your attribute has a namespace, so you need to register the ns with SimpleXML XPath and use it in your XPath query.\n\n#### 解决方法\nhttp://stackoverflow.com/questions/26511858/parsing-soap-xml-response-with-php/26512336#26512336<div class=\"language-xml highlighter-rouge\">\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<DATARESULT xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns=\"http://tempuri.org/\">\n\t  <TABLE>\n\t    <diffgr:diffgram xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\" xmlns:diffgr=\"urn:schemas-microsoft-com:xml-diffgram-v1\">\n\t      <DocumentElement xmlns=\"\">\n\t        <DATA diffgr:id=\"TABLE1\" msdata:rowOrder=\"0\" diffgr:hasChanges=\"inserted\">\n\t          <FIED1>1221</FIED1>\n\t          <FIED2>2332</FIED1>\n\t        </DATA>     \n\t        <DATA diffgr:id=\"TABLE2\" msdata:rowOrder=\"0\" diffgr:hasChanges=\"inserted\">\n\t          <FIED1>1221</FIED1>\n\t          <FIED2>2332</FIED1>\n\t        </DATA>    \n\t      </DocumentElement>\n\t    </diffgr:diffgram>\n\t  </TABLE>\n\t  <ResultMsg />\n\t</DATARESULT>\n\n注册命名空间，匹配相应节点，取出数据\n\n\t// request webservice for get data\n\t$client = new SoapClient($url, $params);\n\t$result = $client->getData();\n\n\t// parse data\n\t$xml = simplexml_load_string($result->responseXml);\n\t$xml->registerXPathNamespace('d', 'urn:schemas-microsoft-com:xml-diffgram-v1');\n\t$results = $xml->xpath('//Table');\n","source":"_posts/php-parse-soap-xml-response.md","raw":"---\ntitle: php parse soap xml response\ntags: []\ndate: 2017-03-01 08:00:00\n---\n\n#### 最近公司的一个需求，和外部对接需要用到xml。\n说明：XML本身不算复杂，但是，加上DTD、XSD、XPath、XSLT等一大堆复杂的规范以后，任何正常的软件开发人员碰到XML都会感觉头大了，最后大家发现，即使你努力钻研几个月，也未必搞得清楚XML的规范。> 使用场景：请求外部webservie，对方以xml的形式的返回，我们需要拿到数据，看起来很简单，但不懂xml与xsd就有点麻烦了。\n\n#### 遇到问题 =&gt; 发现问题\n通过传统解析xmlToJson, xmlToArray，怎么样也获取不到数据分析返回的xml，发现是xsd，并且含有命名空间The problem here is that your attribute has a namespace, so you need to register the ns with SimpleXML XPath and use it in your XPath query.\n\n#### 解决方法\nhttp://stackoverflow.com/questions/26511858/parsing-soap-xml-response-with-php/26512336#26512336<div class=\"language-xml highlighter-rouge\">\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<DATARESULT xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns=\"http://tempuri.org/\">\n\t  <TABLE>\n\t    <diffgr:diffgram xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\" xmlns:diffgr=\"urn:schemas-microsoft-com:xml-diffgram-v1\">\n\t      <DocumentElement xmlns=\"\">\n\t        <DATA diffgr:id=\"TABLE1\" msdata:rowOrder=\"0\" diffgr:hasChanges=\"inserted\">\n\t          <FIED1>1221</FIED1>\n\t          <FIED2>2332</FIED1>\n\t        </DATA>     \n\t        <DATA diffgr:id=\"TABLE2\" msdata:rowOrder=\"0\" diffgr:hasChanges=\"inserted\">\n\t          <FIED1>1221</FIED1>\n\t          <FIED2>2332</FIED1>\n\t        </DATA>    \n\t      </DocumentElement>\n\t    </diffgr:diffgram>\n\t  </TABLE>\n\t  <ResultMsg />\n\t</DATARESULT>\n\n注册命名空间，匹配相应节点，取出数据\n\n\t// request webservice for get data\n\t$client = new SoapClient($url, $params);\n\t$result = $client->getData();\n\n\t// parse data\n\t$xml = simplexml_load_string($result->responseXml);\n\t$xml->registerXPathNamespace('d', 'urn:schemas-microsoft-com:xml-diffgram-v1');\n\t$results = $xml->xpath('//Table');\n","slug":"php-parse-soap-xml-response","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwsx001d2o5pvn922cwa","content":"<h4 id=\"最近公司的一个需求，和外部对接需要用到xml。\"><a href=\"#最近公司的一个需求，和外部对接需要用到xml。\" class=\"headerlink\" title=\"最近公司的一个需求，和外部对接需要用到xml。\"></a>最近公司的一个需求，和外部对接需要用到xml。</h4><p>说明：XML本身不算复杂，但是，加上DTD、XSD、XPath、XSLT等一大堆复杂的规范以后，任何正常的软件开发人员碰到XML都会感觉头大了，最后大家发现，即使你努力钻研几个月，也未必搞得清楚XML的规范。&gt; 使用场景：请求外部webservie，对方以xml的形式的返回，我们需要拿到数据，看起来很简单，但不懂xml与xsd就有点麻烦了。</p>\n<h4 id=\"遇到问题-gt-发现问题\"><a href=\"#遇到问题-gt-发现问题\" class=\"headerlink\" title=\"遇到问题 =&gt; 发现问题\"></a>遇到问题 =&gt; 发现问题</h4><p>通过传统解析xmlToJson, xmlToArray，怎么样也获取不到数据分析返回的xml，发现是xsd，并且含有命名空间The problem here is that your attribute has a namespace, so you need to register the ns with SimpleXML XPath and use it in your XPath query.</p>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p><a href=\"http://stackoverflow.com/questions/26511858/parsing-soap-xml-response-with-php/26512336#26512336\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/26511858/parsing-soap-xml-response-with-php/26512336#26512336</a><div class=\"language-xml highlighter-rouge\"></div></p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;DATARESULT xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns=&quot;http://tempuri.org/&quot;&gt;\n  &lt;TABLE&gt;\n    &lt;diffgr:diffgram xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot; xmlns:diffgr=&quot;urn:schemas-microsoft-com:xml-diffgram-v1&quot;&gt;\n      &lt;DocumentElement xmlns=&quot;&quot;&gt;\n        &lt;DATA diffgr:id=&quot;TABLE1&quot; msdata:rowOrder=&quot;0&quot; diffgr:hasChanges=&quot;inserted&quot;&gt;\n          &lt;FIED1&gt;1221&lt;/FIED1&gt;\n          &lt;FIED2&gt;2332&lt;/FIED1&gt;\n        &lt;/DATA&gt;     \n        &lt;DATA diffgr:id=&quot;TABLE2&quot; msdata:rowOrder=&quot;0&quot; diffgr:hasChanges=&quot;inserted&quot;&gt;\n          &lt;FIED1&gt;1221&lt;/FIED1&gt;\n          &lt;FIED2&gt;2332&lt;/FIED1&gt;\n        &lt;/DATA&gt;    \n      &lt;/DocumentElement&gt;\n    &lt;/diffgr:diffgram&gt;\n  &lt;/TABLE&gt;\n  &lt;ResultMsg /&gt;\n&lt;/DATARESULT&gt;\n</code></pre><p>注册命名空间，匹配相应节点，取出数据</p>\n<pre><code>// request webservice for get data\n$client = new SoapClient($url, $params);\n$result = $client-&gt;getData();\n\n// parse data\n$xml = simplexml_load_string($result-&gt;responseXml);\n$xml-&gt;registerXPathNamespace(&apos;d&apos;, &apos;urn:schemas-microsoft-com:xml-diffgram-v1&apos;);\n$results = $xml-&gt;xpath(&apos;//Table&apos;);\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"最近公司的一个需求，和外部对接需要用到xml。\"><a href=\"#最近公司的一个需求，和外部对接需要用到xml。\" class=\"headerlink\" title=\"最近公司的一个需求，和外部对接需要用到xml。\"></a>最近公司的一个需求，和外部对接需要用到xml。</h4><p>说明：XML本身不算复杂，但是，加上DTD、XSD、XPath、XSLT等一大堆复杂的规范以后，任何正常的软件开发人员碰到XML都会感觉头大了，最后大家发现，即使你努力钻研几个月，也未必搞得清楚XML的规范。&gt; 使用场景：请求外部webservie，对方以xml的形式的返回，我们需要拿到数据，看起来很简单，但不懂xml与xsd就有点麻烦了。</p>\n<h4 id=\"遇到问题-gt-发现问题\"><a href=\"#遇到问题-gt-发现问题\" class=\"headerlink\" title=\"遇到问题 =&gt; 发现问题\"></a>遇到问题 =&gt; 发现问题</h4><p>通过传统解析xmlToJson, xmlToArray，怎么样也获取不到数据分析返回的xml，发现是xsd，并且含有命名空间The problem here is that your attribute has a namespace, so you need to register the ns with SimpleXML XPath and use it in your XPath query.</p>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p><a href=\"http://stackoverflow.com/questions/26511858/parsing-soap-xml-response-with-php/26512336#26512336\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/26511858/parsing-soap-xml-response-with-php/26512336#26512336</a><div class=\"language-xml highlighter-rouge\"></div></p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;DATARESULT xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns=&quot;http://tempuri.org/&quot;&gt;\n  &lt;TABLE&gt;\n    &lt;diffgr:diffgram xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot; xmlns:diffgr=&quot;urn:schemas-microsoft-com:xml-diffgram-v1&quot;&gt;\n      &lt;DocumentElement xmlns=&quot;&quot;&gt;\n        &lt;DATA diffgr:id=&quot;TABLE1&quot; msdata:rowOrder=&quot;0&quot; diffgr:hasChanges=&quot;inserted&quot;&gt;\n          &lt;FIED1&gt;1221&lt;/FIED1&gt;\n          &lt;FIED2&gt;2332&lt;/FIED1&gt;\n        &lt;/DATA&gt;     \n        &lt;DATA diffgr:id=&quot;TABLE2&quot; msdata:rowOrder=&quot;0&quot; diffgr:hasChanges=&quot;inserted&quot;&gt;\n          &lt;FIED1&gt;1221&lt;/FIED1&gt;\n          &lt;FIED2&gt;2332&lt;/FIED1&gt;\n        &lt;/DATA&gt;    \n      &lt;/DocumentElement&gt;\n    &lt;/diffgr:diffgram&gt;\n  &lt;/TABLE&gt;\n  &lt;ResultMsg /&gt;\n&lt;/DATARESULT&gt;\n</code></pre><p>注册命名空间，匹配相应节点，取出数据</p>\n<pre><code>// request webservice for get data\n$client = new SoapClient($url, $params);\n$result = $client-&gt;getData();\n\n// parse data\n$xml = simplexml_load_string($result-&gt;responseXml);\n$xml-&gt;registerXPathNamespace(&apos;d&apos;, &apos;urn:schemas-microsoft-com:xml-diffgram-v1&apos;);\n$results = $xml-&gt;xpath(&apos;//Table&apos;);\n</code></pre>"},{"title":"redis read error on connection","date":"2015-10-10T00:00:00.000Z","_content":"\n### 简单缓存服务SCS\n\n高性能、高可用的分布式缓存服务，兼容Memcache/Redis协议。\n\n#### 使用SCS中的redis时, 遇到\"redis read error on connection\"的错误， 经过一番搜索找到解决方法。\n\n登录百度云后台，需将访问改集群的服务器设置为白名单\n\n    简单缓存服务SCS => 集群名称 => 添加白名单 =》 选择服务器\n","source":"_posts/redis-read-error-on-connection.md","raw":"---\ntitle: redis read error on connection\ntags: []\ndate: 2015-10-10 08:00:00\n---\n\n### 简单缓存服务SCS\n\n高性能、高可用的分布式缓存服务，兼容Memcache/Redis协议。\n\n#### 使用SCS中的redis时, 遇到\"redis read error on connection\"的错误， 经过一番搜索找到解决方法。\n\n登录百度云后台，需将访问改集群的服务器设置为白名单\n\n    简单缓存服务SCS => 集群名称 => 添加白名单 =》 选择服务器\n","slug":"redis-read-error-on-connection","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwsy001f2o5p5ih7ggmi","content":"<h3 id=\"简单缓存服务SCS\"><a href=\"#简单缓存服务SCS\" class=\"headerlink\" title=\"简单缓存服务SCS\"></a>简单缓存服务SCS</h3><p>高性能、高可用的分布式缓存服务，兼容Memcache/Redis协议。</p>\n<h4 id=\"使用SCS中的redis时-遇到”redis-read-error-on-connection”的错误，-经过一番搜索找到解决方法。\"><a href=\"#使用SCS中的redis时-遇到”redis-read-error-on-connection”的错误，-经过一番搜索找到解决方法。\" class=\"headerlink\" title=\"使用SCS中的redis时, 遇到”redis read error on connection”的错误， 经过一番搜索找到解决方法。\"></a>使用SCS中的redis时, 遇到”redis read error on connection”的错误， 经过一番搜索找到解决方法。</h4><p>登录百度云后台，需将访问改集群的服务器设置为白名单</p>\n<pre><code>简单缓存服务SCS =&gt; 集群名称 =&gt; 添加白名单 =》 选择服务器\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简单缓存服务SCS\"><a href=\"#简单缓存服务SCS\" class=\"headerlink\" title=\"简单缓存服务SCS\"></a>简单缓存服务SCS</h3><p>高性能、高可用的分布式缓存服务，兼容Memcache/Redis协议。</p>\n<h4 id=\"使用SCS中的redis时-遇到”redis-read-error-on-connection”的错误，-经过一番搜索找到解决方法。\"><a href=\"#使用SCS中的redis时-遇到”redis-read-error-on-connection”的错误，-经过一番搜索找到解决方法。\" class=\"headerlink\" title=\"使用SCS中的redis时, 遇到”redis read error on connection”的错误， 经过一番搜索找到解决方法。\"></a>使用SCS中的redis时, 遇到”redis read error on connection”的错误， 经过一番搜索找到解决方法。</h4><p>登录百度云后台，需将访问改集群的服务器设置为白名单</p>\n<pre><code>简单缓存服务SCS =&gt; 集群名称 =&gt; 添加白名单 =》 选择服务器\n</code></pre>"},{"title":"node-sass 安装失败解决方法","date":"2016-05-12T00:00:00.000Z","_content":"\n####使用cnpm\n\n```shell\n\tnpm install -g cnpm\n```\n\n\n####使用淘宝镜像\n\n```shell\n\tSASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass\n```\n\n","source":"_posts/solve-node-sass-install-failed.md","raw":"---\ntitle: node-sass 安装失败解决方法\ntags: []\ndate: 2016-05-12 08:00:00\n---\n\n####使用cnpm\n\n```shell\n\tnpm install -g cnpm\n```\n\n\n####使用淘宝镜像\n\n```shell\n\tSASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass\n```\n\n","slug":"solve-node-sass-install-failed","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwsz001g2o5p25jsdl5u","content":"<p>####使用cnpm</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cnpm</div></pre></td></tr></table></figure>\n<p>####使用淘宝镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>####使用cnpm</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cnpm</div></pre></td></tr></table></figure>\n<p>####使用淘宝镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass</div></pre></td></tr></table></figure>\n"},{"title":"php+shell实现多线程demo","date":"2014-06-22T00:00:00.000Z","_content":"\n### linux下借助shell实现php多线程\n\n在一个程序中，这些独立运行的程序片段叫作多线程，利用它编程的概念叫做“多线程处理”。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多个线程，进而提升处理性能。php本身不支持多线程，但apache和linux支持多线程。本文主要讲在linux环境下，借助shell脚本实现php多线程。\n\n写个简单的demo,源文件test.php\n\n    <?php\n    for($i = 0;$i < 10;$i++)\n    {\n       echo $i;\n       sleep(5);//相当于定时器\n    }\n    ?>\n\nshell脚本文件thread\n\n    #!/bin/bash\n    for i in 1 2 3 4 5 6 7 8 9 10\n    do\n        /usr/bin/php -q /var/www/test.php &\n    done\n\n\n运行shell脚本命令\n\n    sh thread\n\n输出效果\n\n  ![蔡金林的博客之php多线程](/assets/images/thread.png)\n\n可以看到有10个进程同时在进行，定时请求这个shell，在shell的循环中不必每次等php的代码全部执行完再请求下一个文件，而是同时进行。\n。","source":"_posts/php-shell实现多线程demo.md","raw":"---\ntitle: php+shell实现多线程demo\ntags: []\ndate: 2014-06-22 08:00:00\n---\n\n### linux下借助shell实现php多线程\n\n在一个程序中，这些独立运行的程序片段叫作多线程，利用它编程的概念叫做“多线程处理”。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多个线程，进而提升处理性能。php本身不支持多线程，但apache和linux支持多线程。本文主要讲在linux环境下，借助shell脚本实现php多线程。\n\n写个简单的demo,源文件test.php\n\n    <?php\n    for($i = 0;$i < 10;$i++)\n    {\n       echo $i;\n       sleep(5);//相当于定时器\n    }\n    ?>\n\nshell脚本文件thread\n\n    #!/bin/bash\n    for i in 1 2 3 4 5 6 7 8 9 10\n    do\n        /usr/bin/php -q /var/www/test.php &\n    done\n\n\n运行shell脚本命令\n\n    sh thread\n\n输出效果\n\n  ![蔡金林的博客之php多线程](/assets/images/thread.png)\n\n可以看到有10个进程同时在进行，定时请求这个shell，在shell的循环中不必每次等php的代码全部执行完再请求下一个文件，而是同时进行。\n。","slug":"php-shell实现多线程demo","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwt1001i2o5pw2t93x6r","content":"<h3 id=\"linux下借助shell实现php多线程\"><a href=\"#linux下借助shell实现php多线程\" class=\"headerlink\" title=\"linux下借助shell实现php多线程\"></a>linux下借助shell实现php多线程</h3><p>在一个程序中，这些独立运行的程序片段叫作多线程，利用它编程的概念叫做“多线程处理”。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多个线程，进而提升处理性能。php本身不支持多线程，但apache和linux支持多线程。本文主要讲在linux环境下，借助shell脚本实现php多线程。</p>\n<p>写个简单的demo,源文件test.php</p>\n<pre><code>&lt;?php\nfor($i = 0;$i &lt; 10;$i++)\n{\n   echo $i;\n   sleep(5);//相当于定时器\n}\n?&gt;\n</code></pre><p>shell脚本文件thread</p>\n<pre><code>#!/bin/bash\nfor i in 1 2 3 4 5 6 7 8 9 10\ndo\n    /usr/bin/php -q /var/www/test.php &amp;\ndone\n</code></pre><p>运行shell脚本命令</p>\n<pre><code>sh thread\n</code></pre><p>输出效果</p>\n<p>  <img src=\"/assets/images/thread.png\" alt=\"蔡金林的博客之php多线程\"></p>\n<p>可以看到有10个进程同时在进行，定时请求这个shell，在shell的循环中不必每次等php的代码全部执行完再请求下一个文件，而是同时进行。<br>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"linux下借助shell实现php多线程\"><a href=\"#linux下借助shell实现php多线程\" class=\"headerlink\" title=\"linux下借助shell实现php多线程\"></a>linux下借助shell实现php多线程</h3><p>在一个程序中，这些独立运行的程序片段叫作多线程，利用它编程的概念叫做“多线程处理”。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多个线程，进而提升处理性能。php本身不支持多线程，但apache和linux支持多线程。本文主要讲在linux环境下，借助shell脚本实现php多线程。</p>\n<p>写个简单的demo,源文件test.php</p>\n<pre><code>&lt;?php\nfor($i = 0;$i &lt; 10;$i++)\n{\n   echo $i;\n   sleep(5);//相当于定时器\n}\n?&gt;\n</code></pre><p>shell脚本文件thread</p>\n<pre><code>#!/bin/bash\nfor i in 1 2 3 4 5 6 7 8 9 10\ndo\n    /usr/bin/php -q /var/www/test.php &amp;\ndone\n</code></pre><p>运行shell脚本命令</p>\n<pre><code>sh thread\n</code></pre><p>输出效果</p>\n<p>  <img src=\"/assets/images/thread.png\" alt=\"蔡金林的博客之php多线程\"></p>\n<p>可以看到有10个进程同时在进行，定时请求这个shell，在shell的循环中不必每次等php的代码全部执行完再请求下一个文件，而是同时进行。<br>。</p>\n"},{"title":"开始使用hexo写博客","date":"2015-02-28T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/start-hexo.md","raw":"---\ntitle: 开始使用hexo写博客\ndate: 2015-03-01\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"start-hexo","published":1,"updated":"2017-03-07T15:59:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwt3001j2o5pgvu4o1k0","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"Sublime常用快捷键","date":"2016-08-12T00:00:00.000Z","_content":"\n- mac下开启vim模式\nsublime => preferences => settings-user\n```bash\n\"ignored_packages\"：[],\n```\n\n- mac下使用shell以sublime方式打开文件：\n```bash\nln -s \"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\" /usr/local/bin/subl\nsubl filename\n```\n\n#### 移动\n```shell\nh,j,k,l： 左，下，上，右。\nw：下一个词的词首。\nW：下一个单词(不含标点)。\ne：下一个词的词尾。\nE：不含标点。\nb：上一个词的词首。\nB：不含标点。\ngg：首。\nG： 尾。\n```\n\n#### 选择\n\n```shell\nctrl+d：选中下一个相同的\nctrl+command+G：选中所有相同的\nctrl+l：选中整行，继续操作则继续选择下一行，效果和 shift+↓ 效果一样。\nctrl+shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。\nshift+↑：向上选中多行。\nshift+↓：向下选中多行。\nshift+←：向左选中文本。\nshift+→：向右选中文本。\n```\n\n#### 编辑\n\n```shell\nctrl+delete： 删除\nctrl+shif+D：复制当前行\nctrl+/：注释d当前行，或取消注释\nctrl+J： 向上折行\nctrl+K+U：转换大写\nctrl+K+L： 转换小写\nctrl+K+K：从光标处开始删除代码至行尾。\nctrl+Z： 撤销\nctrl+Y： 恢复撤销\nctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。\nctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。\nctrl+command+up： 向上移动当前行\nctrl+command+down： 向下移动当前行\nshift+home： 选择到页首行头\nshift+end： 选择到页尾行\nTab：向右缩进\nshfit+tab： 反缩进\n```","source":"_posts/sublime-hotkeys.md","raw":"---\ntitle: Sublime常用快捷键\ntags: []\ndate: 2016-08-12 08:00:00\n---\n\n- mac下开启vim模式\nsublime => preferences => settings-user\n```bash\n\"ignored_packages\"：[],\n```\n\n- mac下使用shell以sublime方式打开文件：\n```bash\nln -s \"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\" /usr/local/bin/subl\nsubl filename\n```\n\n#### 移动\n```shell\nh,j,k,l： 左，下，上，右。\nw：下一个词的词首。\nW：下一个单词(不含标点)。\ne：下一个词的词尾。\nE：不含标点。\nb：上一个词的词首。\nB：不含标点。\ngg：首。\nG： 尾。\n```\n\n#### 选择\n\n```shell\nctrl+d：选中下一个相同的\nctrl+command+G：选中所有相同的\nctrl+l：选中整行，继续操作则继续选择下一行，效果和 shift+↓ 效果一样。\nctrl+shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。\nshift+↑：向上选中多行。\nshift+↓：向下选中多行。\nshift+←：向左选中文本。\nshift+→：向右选中文本。\n```\n\n#### 编辑\n\n```shell\nctrl+delete： 删除\nctrl+shif+D：复制当前行\nctrl+/：注释d当前行，或取消注释\nctrl+J： 向上折行\nctrl+K+U：转换大写\nctrl+K+L： 转换小写\nctrl+K+K：从光标处开始删除代码至行尾。\nctrl+Z： 撤销\nctrl+Y： 恢复撤销\nctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。\nctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。\nctrl+command+up： 向上移动当前行\nctrl+command+down： 向下移动当前行\nshift+home： 选择到页首行头\nshift+end： 选择到页尾行\nTab：向右缩进\nshfit+tab： 反缩进\n```","slug":"sublime-hotkeys","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwt6001k2o5pw9mzytgv","content":"<ul>\n<li><p>mac下开启vim模式<br>sublime =&gt; preferences =&gt; settings-user</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"ignored_packages\"</span>：[],</div></pre></td></tr></table></figure>\n</li>\n<li><p>mac下使用shell以sublime方式打开文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln -s <span class=\"string\">\"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\"</span> /usr/<span class=\"built_in\">local</span>/bin/subl</div><div class=\"line\">subl filename</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">h,j,k,l： 左，下，上，右。</div><div class=\"line\">w：下一个词的词首。</div><div class=\"line\">W：下一个单词(不含标点)。</div><div class=\"line\">e：下一个词的词尾。</div><div class=\"line\">E：不含标点。</div><div class=\"line\">b：上一个词的词首。</div><div class=\"line\">B：不含标点。</div><div class=\"line\">gg：首。</div><div class=\"line\">G： 尾。</div></pre></td></tr></table></figure>\n<h4 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctrl+d：选中下一个相同的</div><div class=\"line\">ctrl+command+G：选中所有相同的</div><div class=\"line\">ctrl+l：选中整行，继续操作则继续选择下一行，效果和 shift+↓ 效果一样。</div><div class=\"line\">ctrl+shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。</div><div class=\"line\">shift+↑：向上选中多行。</div><div class=\"line\">shift+↓：向下选中多行。</div><div class=\"line\">shift+←：向左选中文本。</div><div class=\"line\">shift+→：向右选中文本。</div></pre></td></tr></table></figure>\n<h4 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctrl+delete： 删除</div><div class=\"line\">ctrl+shif+D：复制当前行</div><div class=\"line\">ctrl+/：注释d当前行，或取消注释</div><div class=\"line\">ctrl+J： 向上折行</div><div class=\"line\">ctrl+K+U：转换大写</div><div class=\"line\">ctrl+K+L： 转换小写</div><div class=\"line\">ctrl+K+K：从光标处开始删除代码至行尾。</div><div class=\"line\">ctrl+Z： 撤销</div><div class=\"line\">ctrl+Y： 恢复撤销</div><div class=\"line\">ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。</div><div class=\"line\">ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。</div><div class=\"line\">ctrl+command+up： 向上移动当前行</div><div class=\"line\">ctrl+command+down： 向下移动当前行</div><div class=\"line\">shift+home： 选择到页首行头</div><div class=\"line\">shift+end： 选择到页尾行</div><div class=\"line\">Tab：向右缩进</div><div class=\"line\">shfit+tab： 反缩进</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>mac下开启vim模式<br>sublime =&gt; preferences =&gt; settings-user</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"ignored_packages\"</span>：[],</div></pre></td></tr></table></figure>\n</li>\n<li><p>mac下使用shell以sublime方式打开文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln -s <span class=\"string\">\"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\"</span> /usr/<span class=\"built_in\">local</span>/bin/subl</div><div class=\"line\">subl filename</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">h,j,k,l： 左，下，上，右。</div><div class=\"line\">w：下一个词的词首。</div><div class=\"line\">W：下一个单词(不含标点)。</div><div class=\"line\">e：下一个词的词尾。</div><div class=\"line\">E：不含标点。</div><div class=\"line\">b：上一个词的词首。</div><div class=\"line\">B：不含标点。</div><div class=\"line\">gg：首。</div><div class=\"line\">G： 尾。</div></pre></td></tr></table></figure>\n<h4 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctrl+d：选中下一个相同的</div><div class=\"line\">ctrl+command+G：选中所有相同的</div><div class=\"line\">ctrl+l：选中整行，继续操作则继续选择下一行，效果和 shift+↓ 效果一样。</div><div class=\"line\">ctrl+shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。</div><div class=\"line\">shift+↑：向上选中多行。</div><div class=\"line\">shift+↓：向下选中多行。</div><div class=\"line\">shift+←：向左选中文本。</div><div class=\"line\">shift+→：向右选中文本。</div></pre></td></tr></table></figure>\n<h4 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctrl+delete： 删除</div><div class=\"line\">ctrl+shif+D：复制当前行</div><div class=\"line\">ctrl+/：注释d当前行，或取消注释</div><div class=\"line\">ctrl+J： 向上折行</div><div class=\"line\">ctrl+K+U：转换大写</div><div class=\"line\">ctrl+K+L： 转换小写</div><div class=\"line\">ctrl+K+K：从光标处开始删除代码至行尾。</div><div class=\"line\">ctrl+Z： 撤销</div><div class=\"line\">ctrl+Y： 恢复撤销</div><div class=\"line\">ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。</div><div class=\"line\">ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。</div><div class=\"line\">ctrl+command+up： 向上移动当前行</div><div class=\"line\">ctrl+command+down： 向下移动当前行</div><div class=\"line\">shift+home： 选择到页首行头</div><div class=\"line\">shift+end： 选择到页尾行</div><div class=\"line\">Tab：向右缩进</div><div class=\"line\">shfit+tab： 反缩进</div></pre></td></tr></table></figure>"},{"title":"thinkphp的一些坑","date":"2015-11-11T00:00:00.000Z","_content":"\n### 记录一下昨晚遇到的坑\n\n在页面中使用加密函数加密id时，发现解密的时候不正确，原以为是加密函数或者解密函数的问题，但以前用的时候都没有问题，突然出现这个问题应该不是加密函数或者解密函数的问题。\n\n\n#### 页面中是这样写的\n``` php\n    <a class=\"btn btn-default\" href=\"__URL__/edit#!/{:encrypt_id($_one.id)}/step4\" title=\"查看\">\n        <i class=\"gi gi-search\"></i>&nbsp;预览\n    </a>\n```\n\n#### 数据排查\n``` php\n    $_one.id也能读出数据\n```\n\n\n#### 解决问题\n``` php\n   页面中使用php时，函数中参数有 “.” 的话，thinkphp解析的时候加密错误，多么大的一个坑啊，改为$_one['id']就好\n```\n","source":"_posts/thinkphp-hollow.md","raw":"---\ntitle: thinkphp的一些坑\ntags: []\ndate: 2015-11-11 08:00:00\n---\n\n### 记录一下昨晚遇到的坑\n\n在页面中使用加密函数加密id时，发现解密的时候不正确，原以为是加密函数或者解密函数的问题，但以前用的时候都没有问题，突然出现这个问题应该不是加密函数或者解密函数的问题。\n\n\n#### 页面中是这样写的\n``` php\n    <a class=\"btn btn-default\" href=\"__URL__/edit#!/{:encrypt_id($_one.id)}/step4\" title=\"查看\">\n        <i class=\"gi gi-search\"></i>&nbsp;预览\n    </a>\n```\n\n#### 数据排查\n``` php\n    $_one.id也能读出数据\n```\n\n\n#### 解决问题\n``` php\n   页面中使用php时，函数中参数有 “.” 的话，thinkphp解析的时候加密错误，多么大的一个坑啊，改为$_one['id']就好\n```\n","slug":"thinkphp-hollow","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwt9001l2o5pe5do9pjv","content":"<h3 id=\"记录一下昨晚遇到的坑\"><a href=\"#记录一下昨晚遇到的坑\" class=\"headerlink\" title=\"记录一下昨晚遇到的坑\"></a>记录一下昨晚遇到的坑</h3><p>在页面中使用加密函数加密id时，发现解密的时候不正确，原以为是加密函数或者解密函数的问题，但以前用的时候都没有问题，突然出现这个问题应该不是加密函数或者解密函数的问题。</p>\n<h4 id=\"页面中是这样写的\"><a href=\"#页面中是这样写的\" class=\"headerlink\" title=\"页面中是这样写的\"></a>页面中是这样写的</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a class=\"btn btn-default\" href=\"__URL__/edit#!/&#123;:encrypt_id($_one.id)&#125;/step4\" title=\"查看\"&gt;</div><div class=\"line\">    &lt;i class=\"gi gi-search\"&gt;&lt;/i&gt;&amp;nbsp;预览</div><div class=\"line\">&lt;/a&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"数据排查\"><a href=\"#数据排查\" class=\"headerlink\" title=\"数据排查\"></a>数据排查</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$_one.id也能读出数据</div></pre></td></tr></table></figure>\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">页面中使用php时，函数中参数有 “.” 的话，thinkphp解析的时候加密错误，多么大的一个坑啊，改为$_one[<span class=\"string\">'id'</span>]就好</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"记录一下昨晚遇到的坑\"><a href=\"#记录一下昨晚遇到的坑\" class=\"headerlink\" title=\"记录一下昨晚遇到的坑\"></a>记录一下昨晚遇到的坑</h3><p>在页面中使用加密函数加密id时，发现解密的时候不正确，原以为是加密函数或者解密函数的问题，但以前用的时候都没有问题，突然出现这个问题应该不是加密函数或者解密函数的问题。</p>\n<h4 id=\"页面中是这样写的\"><a href=\"#页面中是这样写的\" class=\"headerlink\" title=\"页面中是这样写的\"></a>页面中是这样写的</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a class=\"btn btn-default\" href=\"__URL__/edit#!/&#123;:encrypt_id($_one.id)&#125;/step4\" title=\"查看\"&gt;</div><div class=\"line\">    &lt;i class=\"gi gi-search\"&gt;&lt;/i&gt;&amp;nbsp;预览</div><div class=\"line\">&lt;/a&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"数据排查\"><a href=\"#数据排查\" class=\"headerlink\" title=\"数据排查\"></a>数据排查</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$_one.id也能读出数据</div></pre></td></tr></table></figure>\n<h4 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">页面中使用php时，函数中参数有 “.” 的话，thinkphp解析的时候加密错误，多么大的一个坑啊，改为$_one[<span class=\"string\">'id'</span>]就好</div></pre></td></tr></table></figure>\n"},{"title":"vim快捷键","date":"2016-12-12T00:00:00.000Z","_content":"\n<!-- more -->\n\n### 移动\n\n\th,j,k,l: 左下上右边\n\tctrl+b/f：向上下翻页\n\tb/w: 上/下一个词\n\t$/0: 行首/尾\n\t(/): 上/下一个句子\n\t{/}: 段首/段尾\n\tgg/G: 文档开始/结束\n\tngg: n行\n\tH/M/L: 屏幕顶端/中间/底部\n\tnj/k: 关标向上/下移动n行\n\n### 选择\n\n\tv/V: 字符/行选中\n\n### 编辑\n\n\ti/a: 光标前/后插入\n\tI/A: 行首/尾插入\n\to/O: 后/前插一行\n\tesc + o：另起一行编辑\n\tf/Fa: 光标移动到左/右边的第一个字符a上；\n\tdnb/w:  正/反向删除n个单词\n\tcnb/w:  正/反向删除n个单词\n\tcc: 修改光标所在行\n\tD: 删除到行尾\n\trg: 替换光标下的字符为g\n\tx: 删除当前字母\n\tddp: 调换当前行和下一行\n\tdd: 删除当前行，存入寄存器\n\tp: 粘贴\n\tyyp:复制当前行并粘贴\n\tu/ctrl+r: 撤销/重做\n\t>>/<<: 缩进/反缩进\n\n### 查找替换\n\n\ts/s1/s2: 将下一个s1替换为s2\n\t%s/s1/s2:全部替换\n\ts/s1/s2/g: 只替换当前行\n\t/string: 搜索下一处为n，搜索上一处为N\n","source":"_posts/vim快捷键.md","raw":"---\ntitle: vim快捷键\ntags: []\ndate: 2016-12-12 08:00:00\n---\n\n<!-- more -->\n\n### 移动\n\n\th,j,k,l: 左下上右边\n\tctrl+b/f：向上下翻页\n\tb/w: 上/下一个词\n\t$/0: 行首/尾\n\t(/): 上/下一个句子\n\t{/}: 段首/段尾\n\tgg/G: 文档开始/结束\n\tngg: n行\n\tH/M/L: 屏幕顶端/中间/底部\n\tnj/k: 关标向上/下移动n行\n\n### 选择\n\n\tv/V: 字符/行选中\n\n### 编辑\n\n\ti/a: 光标前/后插入\n\tI/A: 行首/尾插入\n\to/O: 后/前插一行\n\tesc + o：另起一行编辑\n\tf/Fa: 光标移动到左/右边的第一个字符a上；\n\tdnb/w:  正/反向删除n个单词\n\tcnb/w:  正/反向删除n个单词\n\tcc: 修改光标所在行\n\tD: 删除到行尾\n\trg: 替换光标下的字符为g\n\tx: 删除当前字母\n\tddp: 调换当前行和下一行\n\tdd: 删除当前行，存入寄存器\n\tp: 粘贴\n\tyyp:复制当前行并粘贴\n\tu/ctrl+r: 撤销/重做\n\t>>/<<: 缩进/反缩进\n\n### 查找替换\n\n\ts/s1/s2: 将下一个s1替换为s2\n\t%s/s1/s2:全部替换\n\ts/s1/s2/g: 只替换当前行\n\t/string: 搜索下一处为n，搜索上一处为N\n","slug":"vim快捷键","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwtb001m2o5p73dpxeju","content":"<a id=\"more\"></a>\n<h3 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h3><pre><code>h,j,k,l: 左下上右边\nctrl+b/f：向上下翻页\nb/w: 上/下一个词\n$/0: 行首/尾\n(/): 上/下一个句子\n{/}: 段首/段尾\ngg/G: 文档开始/结束\nngg: n行\nH/M/L: 屏幕顶端/中间/底部\nnj/k: 关标向上/下移动n行\n</code></pre><h3 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h3><pre><code>v/V: 字符/行选中\n</code></pre><h3 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h3><pre><code>i/a: 光标前/后插入\nI/A: 行首/尾插入\no/O: 后/前插一行\nesc + o：另起一行编辑\nf/Fa: 光标移动到左/右边的第一个字符a上；\ndnb/w:  正/反向删除n个单词\ncnb/w:  正/反向删除n个单词\ncc: 修改光标所在行\nD: 删除到行尾\nrg: 替换光标下的字符为g\nx: 删除当前字母\nddp: 调换当前行和下一行\ndd: 删除当前行，存入寄存器\np: 粘贴\nyyp:复制当前行并粘贴\nu/ctrl+r: 撤销/重做\n&gt;&gt;/&lt;&lt;: 缩进/反缩进\n</code></pre><h3 id=\"查找替换\"><a href=\"#查找替换\" class=\"headerlink\" title=\"查找替换\"></a>查找替换</h3><pre><code>s/s1/s2: 将下一个s1替换为s2\n%s/s1/s2:全部替换\ns/s1/s2/g: 只替换当前行\n/string: 搜索下一处为n，搜索上一处为N\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h3><pre><code>h,j,k,l: 左下上右边\nctrl+b/f：向上下翻页\nb/w: 上/下一个词\n$/0: 行首/尾\n(/): 上/下一个句子\n{/}: 段首/段尾\ngg/G: 文档开始/结束\nngg: n行\nH/M/L: 屏幕顶端/中间/底部\nnj/k: 关标向上/下移动n行\n</code></pre><h3 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h3><pre><code>v/V: 字符/行选中\n</code></pre><h3 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h3><pre><code>i/a: 光标前/后插入\nI/A: 行首/尾插入\no/O: 后/前插一行\nesc + o：另起一行编辑\nf/Fa: 光标移动到左/右边的第一个字符a上；\ndnb/w:  正/反向删除n个单词\ncnb/w:  正/反向删除n个单词\ncc: 修改光标所在行\nD: 删除到行尾\nrg: 替换光标下的字符为g\nx: 删除当前字母\nddp: 调换当前行和下一行\ndd: 删除当前行，存入寄存器\np: 粘贴\nyyp:复制当前行并粘贴\nu/ctrl+r: 撤销/重做\n&gt;&gt;/&lt;&lt;: 缩进/反缩进\n</code></pre><h3 id=\"查找替换\"><a href=\"#查找替换\" class=\"headerlink\" title=\"查找替换\"></a>查找替换</h3><pre><code>s/s1/s2: 将下一个s1替换为s2\n%s/s1/s2:全部替换\ns/s1/s2/g: 只替换当前行\n/string: 搜索下一处为n，搜索上一处为N\n</code></pre>"},{"title":"使用SVN部署网站到新浪SAE","date":"2014-06-24T00:00:00.000Z","_content":"\n### 使用SVN部署代码到SAE平台\n\n最近3天在新浪SAE平台上部署了一个网站应用http://susecst.sinaapp.com/ ，本文主要写上传到SAE上面所遇到的问题。本地调试好代码后，通过svn上传http://sae.sina.com.cn/doc/tutorial/code-deploy.html#svn \n\n#### 数据库连接语句配置\n\n    数据库服务器:w.rdc.sae.sina.com.cn:3307(在phpyadmin管理界面可见)\n    数据库用户:应用首页的Access Key（点击显示可见）\n    数据库密码:应用首页的Secret Key(点击显示可见)\n    数据库名字:一般为app_应用名(数据库.sql文件需导入phpmyadmin)\n\n#### 上传至新浪SAE后，发现文件乱码\n\n避免文件乱码，首先要确定以下四种编码一致,假设为utf8\n\n    数据库中表的结构编码utf8_general_ci\n    文件编码<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    数据库执行语句编码 mysql_query(“set names utf8”);\n\n有的时候得确认下文件编码:通过编辑器控制文件的标题编码，或者将文件另存为你需要的文件编码utf8。\n\n#### 测试功能时，发现登录界面提交后显示\n\n    Cannot send session cache limiter-headers aleady sent\n\n![跳转错误](/assets/images/session.png)\n\n搜索一番，发现基本是使用header跳转之前，不能出现任何echo语句，但是本地打开发现没有任何错误。最后在sae的代码管理器打开，发现了该文件前面有个小红点，删掉就行了，然后本地update，保持同服务器端版本一致\n\n![文件前面小红点](/assets/images/sae.png)\n\n","source":"_posts/使用SVN部署网站到新浪SAE.md","raw":"---\ntitle: 使用SVN部署网站到新浪SAE\ntags: []\ndate: 2014-06-24 08:00:00\n---\n\n### 使用SVN部署代码到SAE平台\n\n最近3天在新浪SAE平台上部署了一个网站应用http://susecst.sinaapp.com/ ，本文主要写上传到SAE上面所遇到的问题。本地调试好代码后，通过svn上传http://sae.sina.com.cn/doc/tutorial/code-deploy.html#svn \n\n#### 数据库连接语句配置\n\n    数据库服务器:w.rdc.sae.sina.com.cn:3307(在phpyadmin管理界面可见)\n    数据库用户:应用首页的Access Key（点击显示可见）\n    数据库密码:应用首页的Secret Key(点击显示可见)\n    数据库名字:一般为app_应用名(数据库.sql文件需导入phpmyadmin)\n\n#### 上传至新浪SAE后，发现文件乱码\n\n避免文件乱码，首先要确定以下四种编码一致,假设为utf8\n\n    数据库中表的结构编码utf8_general_ci\n    文件编码<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    数据库执行语句编码 mysql_query(“set names utf8”);\n\n有的时候得确认下文件编码:通过编辑器控制文件的标题编码，或者将文件另存为你需要的文件编码utf8。\n\n#### 测试功能时，发现登录界面提交后显示\n\n    Cannot send session cache limiter-headers aleady sent\n\n![跳转错误](/assets/images/session.png)\n\n搜索一番，发现基本是使用header跳转之前，不能出现任何echo语句，但是本地打开发现没有任何错误。最后在sae的代码管理器打开，发现了该文件前面有个小红点，删掉就行了，然后本地update，保持同服务器端版本一致\n\n![文件前面小红点](/assets/images/sae.png)\n\n","slug":"使用SVN部署网站到新浪SAE","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwte001n2o5pd4ht3q1q","content":"<h3 id=\"使用SVN部署代码到SAE平台\"><a href=\"#使用SVN部署代码到SAE平台\" class=\"headerlink\" title=\"使用SVN部署代码到SAE平台\"></a>使用SVN部署代码到SAE平台</h3><p>最近3天在新浪SAE平台上部署了一个网站应用<a href=\"http://susecst.sinaapp.com/\" target=\"_blank\" rel=\"external\">http://susecst.sinaapp.com/</a> ，本文主要写上传到SAE上面所遇到的问题。本地调试好代码后，通过svn上传<a href=\"http://sae.sina.com.cn/doc/tutorial/code-deploy.html#svn\" target=\"_blank\" rel=\"external\">http://sae.sina.com.cn/doc/tutorial/code-deploy.html#svn</a> </p>\n<h4 id=\"数据库连接语句配置\"><a href=\"#数据库连接语句配置\" class=\"headerlink\" title=\"数据库连接语句配置\"></a>数据库连接语句配置</h4><pre><code>数据库服务器:w.rdc.sae.sina.com.cn:3307(在phpyadmin管理界面可见)\n数据库用户:应用首页的Access Key（点击显示可见）\n数据库密码:应用首页的Secret Key(点击显示可见)\n数据库名字:一般为app_应用名(数据库.sql文件需导入phpmyadmin)\n</code></pre><h4 id=\"上传至新浪SAE后，发现文件乱码\"><a href=\"#上传至新浪SAE后，发现文件乱码\" class=\"headerlink\" title=\"上传至新浪SAE后，发现文件乱码\"></a>上传至新浪SAE后，发现文件乱码</h4><p>避免文件乱码，首先要确定以下四种编码一致,假设为utf8</p>\n<pre><code>数据库中表的结构编码utf8_general_ci\n文件编码&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n数据库执行语句编码 mysql_query(“set names utf8”);\n</code></pre><p>有的时候得确认下文件编码:通过编辑器控制文件的标题编码，或者将文件另存为你需要的文件编码utf8。</p>\n<h4 id=\"测试功能时，发现登录界面提交后显示\"><a href=\"#测试功能时，发现登录界面提交后显示\" class=\"headerlink\" title=\"测试功能时，发现登录界面提交后显示\"></a>测试功能时，发现登录界面提交后显示</h4><pre><code>Cannot send session cache limiter-headers aleady sent\n</code></pre><p><img src=\"/assets/images/session.png\" alt=\"跳转错误\"></p>\n<p>搜索一番，发现基本是使用header跳转之前，不能出现任何echo语句，但是本地打开发现没有任何错误。最后在sae的代码管理器打开，发现了该文件前面有个小红点，删掉就行了，然后本地update，保持同服务器端版本一致</p>\n<p><img src=\"/assets/images/sae.png\" alt=\"文件前面小红点\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"使用SVN部署代码到SAE平台\"><a href=\"#使用SVN部署代码到SAE平台\" class=\"headerlink\" title=\"使用SVN部署代码到SAE平台\"></a>使用SVN部署代码到SAE平台</h3><p>最近3天在新浪SAE平台上部署了一个网站应用<a href=\"http://susecst.sinaapp.com/\" target=\"_blank\" rel=\"external\">http://susecst.sinaapp.com/</a> ，本文主要写上传到SAE上面所遇到的问题。本地调试好代码后，通过svn上传<a href=\"http://sae.sina.com.cn/doc/tutorial/code-deploy.html#svn\" target=\"_blank\" rel=\"external\">http://sae.sina.com.cn/doc/tutorial/code-deploy.html#svn</a> </p>\n<h4 id=\"数据库连接语句配置\"><a href=\"#数据库连接语句配置\" class=\"headerlink\" title=\"数据库连接语句配置\"></a>数据库连接语句配置</h4><pre><code>数据库服务器:w.rdc.sae.sina.com.cn:3307(在phpyadmin管理界面可见)\n数据库用户:应用首页的Access Key（点击显示可见）\n数据库密码:应用首页的Secret Key(点击显示可见)\n数据库名字:一般为app_应用名(数据库.sql文件需导入phpmyadmin)\n</code></pre><h4 id=\"上传至新浪SAE后，发现文件乱码\"><a href=\"#上传至新浪SAE后，发现文件乱码\" class=\"headerlink\" title=\"上传至新浪SAE后，发现文件乱码\"></a>上传至新浪SAE后，发现文件乱码</h4><p>避免文件乱码，首先要确定以下四种编码一致,假设为utf8</p>\n<pre><code>数据库中表的结构编码utf8_general_ci\n文件编码&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n数据库执行语句编码 mysql_query(“set names utf8”);\n</code></pre><p>有的时候得确认下文件编码:通过编辑器控制文件的标题编码，或者将文件另存为你需要的文件编码utf8。</p>\n<h4 id=\"测试功能时，发现登录界面提交后显示\"><a href=\"#测试功能时，发现登录界面提交后显示\" class=\"headerlink\" title=\"测试功能时，发现登录界面提交后显示\"></a>测试功能时，发现登录界面提交后显示</h4><pre><code>Cannot send session cache limiter-headers aleady sent\n</code></pre><p><img src=\"/assets/images/session.png\" alt=\"跳转错误\"></p>\n<p>搜索一番，发现基本是使用header跳转之前，不能出现任何echo语句，但是本地打开发现没有任何错误。最后在sae的代码管理器打开，发现了该文件前面有个小红点，删掉就行了，然后本地update，保持同服务器端版本一致</p>\n<p><img src=\"/assets/images/sae.png\" alt=\"文件前面小红点\"></p>\n"},{"title":"五子棋c语言算法实现","date":"2014-08-12T00:00:00.000Z","_content":"\n#### 五子棋\n\n五子棋是一种两人对弈的纯策略型汉族棋类益智游戏，棋具与围棋通用，由中国古代汉族人发明，起源于中国上古时代的传统黑白棋种之一。主要流行于华人和汉字文化圈的国家以及欧美一些地区。容易上手，老少皆宜，而且趣味横生，引人入胜\n\n<!-- more -->\n\n判断输赢：以某一点为中心向四周4个方向判断，连续数达到5个即取胜\n\n源代码实现c算法版：\n    \t\n    #include<stdio.h>\n    #include<memory.h>\n    #define size 10 //棋盘大小\n    char map[size][size]= {};\n    int row = 0,col = 0;\n    /*初始化棋盘数组*/\n    void init()\n    {\n        memset(map,' ',sizeof(map));\n    }\n    /*显示棋盘*/\n    void showmap()\n    {\n        int loop=0,row=0,col=0;\n        for(loop=0;loop<size;loop++)\n        {\n            printf(\"%4d\",loop+1);\n        }\n        printf(\"\\n\");\n        for(row=0;row<size;row++)\n        {\n            printf(\"  \");\n            for(loop=0;loop<size;loop++)\n            {\n                printf(\"---+\");\n            }\n            printf(\"\\n\");\n            printf(\"%2d|\",row+1);\n            for(col=0;col<size;col++)\n            {\n                printf(\"%c | \",map[row][col]);\n            }\n            printf(\"\\n\");\n        }\n        printf(\"  \");\n        for(loop=0;loop<size;loop++)\n        {\n            printf(\"---+\");\n        }\n        printf(\"\\n\");\n    }\n    /*判断输赢,胜利则返回玩胜利玩家*/\n    char judge(int x, int y, char player)\n    {\n    int count=0;//记录是否组成五子棋\n\n    /*东北和西南方向判断开始*/\n    /*向右上45度(东北方向)判断*/\n    row = x-1;\n    col = y+1;\n    while((row>=0)&&(col<=size-1))\n    {\n        if(map[row][col]==player)\n        {\n            count++;\n        }\n        else\n        {\n            break;\n        }\n        row--;\n        col++;\n    }\n    /*向左下45度(西南方向)判断*/\n    row = x+1;\n    col = y-1;\n    while((row<=size-1)&&(col>=0))\n    {\n        if(map[row][col]==player)\n        {\n            count++;\n        }\n        else\n        {\n            break;\n        }\n        row++;\n        col--;\n    }\n    if(count+1==5)\n    {\n        return player;\n    }\n    /*东北和西南方向判断结束*/\n\n    /*西北和东南方向方向判断开始*/\n    /*向左上45度(西北方向)判断*/\n    count = 0;\n    row = x-1;\n    col = y-1;\n    while((row>=0)&&(col>=0))\n    {\n        if(map[row][col]==player)\n        {\n            count++;\n        }\n        else\n        {\n            break;\n        }\n        row--;\n        col--;\n    }\n    /*向右下45度(东南方向)判断*/\n    row = x+1;\n    col = y+1;\n    while((row<=size-1)&&(col<=size-1))\n    {\n        if(map[row][col]==player)\n        {\n            count++;\n        }\n        else\n        {\n            break;\n        }\n        row++;\n        col++;\n    }\n    if(count+1==5)\n    {\n        return player;\n    }\n    /*西北和东南方向判断结束*/\n\n    /*竖直方向方向判断开始*/\n    /*竖直向上判断*/\n    count = 0;\n    row = x-1;\n    col = y;\n    while((row>=0))\n    {\n        if(map[row][col]==player)\n        {\n            count++;\n        }\n        else\n        {\n            break;\n        }\n        row--;\n    }\n    /*竖直向下判断*/\n    row = x+1;\n    col = y;\n    while((row<=size-1))\n    {\n        if(map[row][col]==player)\n        {\n            count++;\n        }\n        else\n        {\n            break;\n        }\n        row++;\n    }\n    if(count+1==5)\n    {\n        return player;\n    }\n    /*竖直方向判断结束*/\n\n    /*水平方向判断*/\n    /*水平向左判读*/\n    count = 0;\n    row = x;\n    col = y-1;\n    while(col>=0)\n    {\n        if(map[row][col]==player)\n        {\n            count++;\n        }\n        else\n        {\n            break;\n        }\n        col--;\n    }\n    /*水平向右判断*/\n    row = x;\n    col = y+1;\n    while((col<=size-1))\n    {\n        if(map[row][col]==player)\n        {\n            count++;\n        }\n        else\n        {\n            break;\n        }\n        col++;\n    }\n    if(count+1==5)\n    {\n        return player;\n    }\n    /*水平方向判断结束*/\n    return '0';//没有形成五子棋时\n    }\n    /*下棋*/\n    void chess()\n    {\n    char player = 'A';//玩家\n    char winner = '0';//赢家\n    while(winner=='0')\n    {\n    do\n    {\n         printf(\"玩家%c要下棋的位置坐标:\",player);\n         scanf(\"%d,%d\",&row,&col);\n         printf(\"坐标为:%d,%d\\n\",row,col);\n         printf(\"%s\",(map[row-1][col-1]!=' ')?\"输入无效,请重新输入\\n\":\"输入正确\\n\");\n    }while(map[row-1][col-1]!=' ');\n    map[row-1][col-1]=player;\n    showmap();\n    winner = judge(row-1,col-1,player);//玩家下棋后，马上进行判断输赢\n    player = (player=='A')?'B':'A';//切换玩家\n    }\n    printf(\"游戏结束，玩家%c赢\\n\",winner);\n    }\n    int main()\n    {\n    init();     /*初始化棋盘位置元素值*/\n    showmap(); /*第一次显示棋盘*/\n    chess();  /*开始下棋*/\n\n    }\n\n","source":"_posts/五子棋c语言算法实现.md","raw":"---\ntitle: 五子棋c语言算法实现\ntags: []\ndate: 2014-08-12 08:00:00\n---\n\n#### 五子棋\n\n五子棋是一种两人对弈的纯策略型汉族棋类益智游戏，棋具与围棋通用，由中国古代汉族人发明，起源于中国上古时代的传统黑白棋种之一。主要流行于华人和汉字文化圈的国家以及欧美一些地区。容易上手，老少皆宜，而且趣味横生，引人入胜\n\n<!-- more -->\n\n判断输赢：以某一点为中心向四周4个方向判断，连续数达到5个即取胜\n\n源代码实现c算法版：\n    \t\n    #include<stdio.h>\n    #include<memory.h>\n    #define size 10 //棋盘大小\n    char map[size][size]= {};\n    int row = 0,col = 0;\n    /*初始化棋盘数组*/\n    void init()\n    {\n        memset(map,' ',sizeof(map));\n    }\n    /*显示棋盘*/\n    void showmap()\n    {\n        int loop=0,row=0,col=0;\n        for(loop=0;loop<size;loop++)\n        {\n            printf(\"%4d\",loop+1);\n        }\n        printf(\"\\n\");\n        for(row=0;row<size;row++)\n        {\n            printf(\"  \");\n            for(loop=0;loop<size;loop++)\n            {\n                printf(\"---+\");\n            }\n            printf(\"\\n\");\n            printf(\"%2d|\",row+1);\n            for(col=0;col<size;col++)\n            {\n                printf(\"%c | \",map[row][col]);\n            }\n            printf(\"\\n\");\n        }\n        printf(\"  \");\n        for(loop=0;loop<size;loop++)\n        {\n            printf(\"---+\");\n        }\n        printf(\"\\n\");\n    }\n    /*判断输赢,胜利则返回玩胜利玩家*/\n    char judge(int x, int y, char player)\n    {\n    int count=0;//记录是否组成五子棋\n\n    /*东北和西南方向判断开始*/\n    /*向右上45度(东北方向)判断*/\n    row = x-1;\n    col = y+1;\n    while((row>=0)&&(col<=size-1))\n    {\n        if(map[row][col]==player)\n        {\n            count++;\n        }\n        else\n        {\n            break;\n        }\n        row--;\n        col++;\n    }\n    /*向左下45度(西南方向)判断*/\n    row = x+1;\n    col = y-1;\n    while((row<=size-1)&&(col>=0))\n    {\n        if(map[row][col]==player)\n        {\n            count++;\n        }\n        else\n        {\n            break;\n        }\n        row++;\n        col--;\n    }\n    if(count+1==5)\n    {\n        return player;\n    }\n    /*东北和西南方向判断结束*/\n\n    /*西北和东南方向方向判断开始*/\n    /*向左上45度(西北方向)判断*/\n    count = 0;\n    row = x-1;\n    col = y-1;\n    while((row>=0)&&(col>=0))\n    {\n        if(map[row][col]==player)\n        {\n            count++;\n        }\n        else\n        {\n            break;\n        }\n        row--;\n        col--;\n    }\n    /*向右下45度(东南方向)判断*/\n    row = x+1;\n    col = y+1;\n    while((row<=size-1)&&(col<=size-1))\n    {\n        if(map[row][col]==player)\n        {\n            count++;\n        }\n        else\n        {\n            break;\n        }\n        row++;\n        col++;\n    }\n    if(count+1==5)\n    {\n        return player;\n    }\n    /*西北和东南方向判断结束*/\n\n    /*竖直方向方向判断开始*/\n    /*竖直向上判断*/\n    count = 0;\n    row = x-1;\n    col = y;\n    while((row>=0))\n    {\n        if(map[row][col]==player)\n        {\n            count++;\n        }\n        else\n        {\n            break;\n        }\n        row--;\n    }\n    /*竖直向下判断*/\n    row = x+1;\n    col = y;\n    while((row<=size-1))\n    {\n        if(map[row][col]==player)\n        {\n            count++;\n        }\n        else\n        {\n            break;\n        }\n        row++;\n    }\n    if(count+1==5)\n    {\n        return player;\n    }\n    /*竖直方向判断结束*/\n\n    /*水平方向判断*/\n    /*水平向左判读*/\n    count = 0;\n    row = x;\n    col = y-1;\n    while(col>=0)\n    {\n        if(map[row][col]==player)\n        {\n            count++;\n        }\n        else\n        {\n            break;\n        }\n        col--;\n    }\n    /*水平向右判断*/\n    row = x;\n    col = y+1;\n    while((col<=size-1))\n    {\n        if(map[row][col]==player)\n        {\n            count++;\n        }\n        else\n        {\n            break;\n        }\n        col++;\n    }\n    if(count+1==5)\n    {\n        return player;\n    }\n    /*水平方向判断结束*/\n    return '0';//没有形成五子棋时\n    }\n    /*下棋*/\n    void chess()\n    {\n    char player = 'A';//玩家\n    char winner = '0';//赢家\n    while(winner=='0')\n    {\n    do\n    {\n         printf(\"玩家%c要下棋的位置坐标:\",player);\n         scanf(\"%d,%d\",&row,&col);\n         printf(\"坐标为:%d,%d\\n\",row,col);\n         printf(\"%s\",(map[row-1][col-1]!=' ')?\"输入无效,请重新输入\\n\":\"输入正确\\n\");\n    }while(map[row-1][col-1]!=' ');\n    map[row-1][col-1]=player;\n    showmap();\n    winner = judge(row-1,col-1,player);//玩家下棋后，马上进行判断输赢\n    player = (player=='A')?'B':'A';//切换玩家\n    }\n    printf(\"游戏结束，玩家%c赢\\n\",winner);\n    }\n    int main()\n    {\n    init();     /*初始化棋盘位置元素值*/\n    showmap(); /*第一次显示棋盘*/\n    chess();  /*开始下棋*/\n\n    }\n\n","slug":"五子棋c语言算法实现","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwtf001o2o5pmrlygi2s","content":"<h4 id=\"五子棋\"><a href=\"#五子棋\" class=\"headerlink\" title=\"五子棋\"></a>五子棋</h4><p>五子棋是一种两人对弈的纯策略型汉族棋类益智游戏，棋具与围棋通用，由中国古代汉族人发明，起源于中国上古时代的传统黑白棋种之一。主要流行于华人和汉字文化圈的国家以及欧美一些地区。容易上手，老少皆宜，而且趣味横生，引人入胜</p>\n<a id=\"more\"></a>\n<p>判断输赢：以某一点为中心向四周4个方向判断，连续数达到5个即取胜</p>\n<p>源代码实现c算法版：</p>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;memory.h&gt;\n#define size 10 //棋盘大小\nchar map[size][size]= {};\nint row = 0,col = 0;\n/*初始化棋盘数组*/\nvoid init()\n{\n    memset(map,&apos; &apos;,sizeof(map));\n}\n/*显示棋盘*/\nvoid showmap()\n{\n    int loop=0,row=0,col=0;\n    for(loop=0;loop&lt;size;loop++)\n    {\n        printf(&quot;%4d&quot;,loop+1);\n    }\n    printf(&quot;\\n&quot;);\n    for(row=0;row&lt;size;row++)\n    {\n        printf(&quot;  &quot;);\n        for(loop=0;loop&lt;size;loop++)\n        {\n            printf(&quot;---+&quot;);\n        }\n        printf(&quot;\\n&quot;);\n        printf(&quot;%2d|&quot;,row+1);\n        for(col=0;col&lt;size;col++)\n        {\n            printf(&quot;%c | &quot;,map[row][col]);\n        }\n        printf(&quot;\\n&quot;);\n    }\n    printf(&quot;  &quot;);\n    for(loop=0;loop&lt;size;loop++)\n    {\n        printf(&quot;---+&quot;);\n    }\n    printf(&quot;\\n&quot;);\n}\n/*判断输赢,胜利则返回玩胜利玩家*/\nchar judge(int x, int y, char player)\n{\nint count=0;//记录是否组成五子棋\n\n/*东北和西南方向判断开始*/\n/*向右上45度(东北方向)判断*/\nrow = x-1;\ncol = y+1;\nwhile((row&gt;=0)&amp;&amp;(col&lt;=size-1))\n{\n    if(map[row][col]==player)\n    {\n        count++;\n    }\n    else\n    {\n        break;\n    }\n    row--;\n    col++;\n}\n/*向左下45度(西南方向)判断*/\nrow = x+1;\ncol = y-1;\nwhile((row&lt;=size-1)&amp;&amp;(col&gt;=0))\n{\n    if(map[row][col]==player)\n    {\n        count++;\n    }\n    else\n    {\n        break;\n    }\n    row++;\n    col--;\n}\nif(count+1==5)\n{\n    return player;\n}\n/*东北和西南方向判断结束*/\n\n/*西北和东南方向方向判断开始*/\n/*向左上45度(西北方向)判断*/\ncount = 0;\nrow = x-1;\ncol = y-1;\nwhile((row&gt;=0)&amp;&amp;(col&gt;=0))\n{\n    if(map[row][col]==player)\n    {\n        count++;\n    }\n    else\n    {\n        break;\n    }\n    row--;\n    col--;\n}\n/*向右下45度(东南方向)判断*/\nrow = x+1;\ncol = y+1;\nwhile((row&lt;=size-1)&amp;&amp;(col&lt;=size-1))\n{\n    if(map[row][col]==player)\n    {\n        count++;\n    }\n    else\n    {\n        break;\n    }\n    row++;\n    col++;\n}\nif(count+1==5)\n{\n    return player;\n}\n/*西北和东南方向判断结束*/\n\n/*竖直方向方向判断开始*/\n/*竖直向上判断*/\ncount = 0;\nrow = x-1;\ncol = y;\nwhile((row&gt;=0))\n{\n    if(map[row][col]==player)\n    {\n        count++;\n    }\n    else\n    {\n        break;\n    }\n    row--;\n}\n/*竖直向下判断*/\nrow = x+1;\ncol = y;\nwhile((row&lt;=size-1))\n{\n    if(map[row][col]==player)\n    {\n        count++;\n    }\n    else\n    {\n        break;\n    }\n    row++;\n}\nif(count+1==5)\n{\n    return player;\n}\n/*竖直方向判断结束*/\n\n/*水平方向判断*/\n/*水平向左判读*/\ncount = 0;\nrow = x;\ncol = y-1;\nwhile(col&gt;=0)\n{\n    if(map[row][col]==player)\n    {\n        count++;\n    }\n    else\n    {\n        break;\n    }\n    col--;\n}\n/*水平向右判断*/\nrow = x;\ncol = y+1;\nwhile((col&lt;=size-1))\n{\n    if(map[row][col]==player)\n    {\n        count++;\n    }\n    else\n    {\n        break;\n    }\n    col++;\n}\nif(count+1==5)\n{\n    return player;\n}\n/*水平方向判断结束*/\nreturn &apos;0&apos;;//没有形成五子棋时\n}\n/*下棋*/\nvoid chess()\n{\nchar player = &apos;A&apos;;//玩家\nchar winner = &apos;0&apos;;//赢家\nwhile(winner==&apos;0&apos;)\n{\ndo\n{\n     printf(&quot;玩家%c要下棋的位置坐标:&quot;,player);\n     scanf(&quot;%d,%d&quot;,&amp;row,&amp;col);\n     printf(&quot;坐标为:%d,%d\\n&quot;,row,col);\n     printf(&quot;%s&quot;,(map[row-1][col-1]!=&apos; &apos;)?&quot;输入无效,请重新输入\\n&quot;:&quot;输入正确\\n&quot;);\n}while(map[row-1][col-1]!=&apos; &apos;);\nmap[row-1][col-1]=player;\nshowmap();\nwinner = judge(row-1,col-1,player);//玩家下棋后，马上进行判断输赢\nplayer = (player==&apos;A&apos;)?&apos;B&apos;:&apos;A&apos;;//切换玩家\n}\nprintf(&quot;游戏结束，玩家%c赢\\n&quot;,winner);\n}\nint main()\n{\ninit();     /*初始化棋盘位置元素值*/\nshowmap(); /*第一次显示棋盘*/\nchess();  /*开始下棋*/\n\n}\n</code></pre>","site":{"data":{}},"excerpt":"<h4 id=\"五子棋\"><a href=\"#五子棋\" class=\"headerlink\" title=\"五子棋\"></a>五子棋</h4><p>五子棋是一种两人对弈的纯策略型汉族棋类益智游戏，棋具与围棋通用，由中国古代汉族人发明，起源于中国上古时代的传统黑白棋种之一。主要流行于华人和汉字文化圈的国家以及欧美一些地区。容易上手，老少皆宜，而且趣味横生，引人入胜</p>","more":"<p>判断输赢：以某一点为中心向四周4个方向判断，连续数达到5个即取胜</p>\n<p>源代码实现c算法版：</p>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;memory.h&gt;\n#define size 10 //棋盘大小\nchar map[size][size]= {};\nint row = 0,col = 0;\n/*初始化棋盘数组*/\nvoid init()\n{\n    memset(map,&apos; &apos;,sizeof(map));\n}\n/*显示棋盘*/\nvoid showmap()\n{\n    int loop=0,row=0,col=0;\n    for(loop=0;loop&lt;size;loop++)\n    {\n        printf(&quot;%4d&quot;,loop+1);\n    }\n    printf(&quot;\\n&quot;);\n    for(row=0;row&lt;size;row++)\n    {\n        printf(&quot;  &quot;);\n        for(loop=0;loop&lt;size;loop++)\n        {\n            printf(&quot;---+&quot;);\n        }\n        printf(&quot;\\n&quot;);\n        printf(&quot;%2d|&quot;,row+1);\n        for(col=0;col&lt;size;col++)\n        {\n            printf(&quot;%c | &quot;,map[row][col]);\n        }\n        printf(&quot;\\n&quot;);\n    }\n    printf(&quot;  &quot;);\n    for(loop=0;loop&lt;size;loop++)\n    {\n        printf(&quot;---+&quot;);\n    }\n    printf(&quot;\\n&quot;);\n}\n/*判断输赢,胜利则返回玩胜利玩家*/\nchar judge(int x, int y, char player)\n{\nint count=0;//记录是否组成五子棋\n\n/*东北和西南方向判断开始*/\n/*向右上45度(东北方向)判断*/\nrow = x-1;\ncol = y+1;\nwhile((row&gt;=0)&amp;&amp;(col&lt;=size-1))\n{\n    if(map[row][col]==player)\n    {\n        count++;\n    }\n    else\n    {\n        break;\n    }\n    row--;\n    col++;\n}\n/*向左下45度(西南方向)判断*/\nrow = x+1;\ncol = y-1;\nwhile((row&lt;=size-1)&amp;&amp;(col&gt;=0))\n{\n    if(map[row][col]==player)\n    {\n        count++;\n    }\n    else\n    {\n        break;\n    }\n    row++;\n    col--;\n}\nif(count+1==5)\n{\n    return player;\n}\n/*东北和西南方向判断结束*/\n\n/*西北和东南方向方向判断开始*/\n/*向左上45度(西北方向)判断*/\ncount = 0;\nrow = x-1;\ncol = y-1;\nwhile((row&gt;=0)&amp;&amp;(col&gt;=0))\n{\n    if(map[row][col]==player)\n    {\n        count++;\n    }\n    else\n    {\n        break;\n    }\n    row--;\n    col--;\n}\n/*向右下45度(东南方向)判断*/\nrow = x+1;\ncol = y+1;\nwhile((row&lt;=size-1)&amp;&amp;(col&lt;=size-1))\n{\n    if(map[row][col]==player)\n    {\n        count++;\n    }\n    else\n    {\n        break;\n    }\n    row++;\n    col++;\n}\nif(count+1==5)\n{\n    return player;\n}\n/*西北和东南方向判断结束*/\n\n/*竖直方向方向判断开始*/\n/*竖直向上判断*/\ncount = 0;\nrow = x-1;\ncol = y;\nwhile((row&gt;=0))\n{\n    if(map[row][col]==player)\n    {\n        count++;\n    }\n    else\n    {\n        break;\n    }\n    row--;\n}\n/*竖直向下判断*/\nrow = x+1;\ncol = y;\nwhile((row&lt;=size-1))\n{\n    if(map[row][col]==player)\n    {\n        count++;\n    }\n    else\n    {\n        break;\n    }\n    row++;\n}\nif(count+1==5)\n{\n    return player;\n}\n/*竖直方向判断结束*/\n\n/*水平方向判断*/\n/*水平向左判读*/\ncount = 0;\nrow = x;\ncol = y-1;\nwhile(col&gt;=0)\n{\n    if(map[row][col]==player)\n    {\n        count++;\n    }\n    else\n    {\n        break;\n    }\n    col--;\n}\n/*水平向右判断*/\nrow = x;\ncol = y+1;\nwhile((col&lt;=size-1))\n{\n    if(map[row][col]==player)\n    {\n        count++;\n    }\n    else\n    {\n        break;\n    }\n    col++;\n}\nif(count+1==5)\n{\n    return player;\n}\n/*水平方向判断结束*/\nreturn &apos;0&apos;;//没有形成五子棋时\n}\n/*下棋*/\nvoid chess()\n{\nchar player = &apos;A&apos;;//玩家\nchar winner = &apos;0&apos;;//赢家\nwhile(winner==&apos;0&apos;)\n{\ndo\n{\n     printf(&quot;玩家%c要下棋的位置坐标:&quot;,player);\n     scanf(&quot;%d,%d&quot;,&amp;row,&amp;col);\n     printf(&quot;坐标为:%d,%d\\n&quot;,row,col);\n     printf(&quot;%s&quot;,(map[row-1][col-1]!=&apos; &apos;)?&quot;输入无效,请重新输入\\n&quot;:&quot;输入正确\\n&quot;);\n}while(map[row-1][col-1]!=&apos; &apos;);\nmap[row-1][col-1]=player;\nshowmap();\nwinner = judge(row-1,col-1,player);//玩家下棋后，马上进行判断输赢\nplayer = (player==&apos;A&apos;)?&apos;B&apos;:&apos;A&apos;;//切换玩家\n}\nprintf(&quot;游戏结束，玩家%c赢\\n&quot;,winner);\n}\nint main()\n{\ninit();     /*初始化棋盘位置元素值*/\nshowmap(); /*第一次显示棋盘*/\nchess();  /*开始下棋*/\n\n}\n</code></pre>"},{"title":"内部排序算法分析","date":"2014-07-02T00:00:00.000Z","_content":"\n### 内部排序算法（插入排序,归并排序,选择排序,冒泡排序,快速排序）\n\n#### 排序简介\n\n排序是数据处理中经常使用的一种重要运算,在计算机及其应用系统中,花费在排序上的时间在系统运行时间中占有很大比重;并且排序本身对推动算法分析的发展也起很大作用。目前已有上百种排序方法，但尚未有一个最理想的尽如人意的方法，本章介绍常用的如下排序方法，并对它们进行分析和比较。\n\n#### 排序分类\n\n    1、插入排序（直接插入排序、折半插入排序、希尔排序）；\n    2、交换排序（起泡排序、快速排序）；\n    3、选择排序（直接选择排序、堆排序）；\n    4、归并排序；\n    5、基数排序；\n\n#### 排序时间复杂度\n\n1.插入类排序\n\n将无序子序列中的一个或几个记录“插入”到有序序列中，从而增加记录的有序子序列的长度\n\n2.交换类排序\n\n通过“交换”无序序列中的记录从而得到其中关键字最小或最大的记录，并将它加入到有序子序列中，以此方法增加记录的有序子序列的长度。\n\n3.选择类排序\n\n从记录的无序子序列中“选择”关键字最小或最大的记录，并将它加入到有序子序列中，以此方法增加记录的有序子序列的长度。\n\n4.归并排序\n\n通过“归并”两个或两个以上的记录有序子序列，逐步增加记录有序序列的长度。\n\n5.基数排序\n\n一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串和特定格式的浮点数，所以基数排序也不只是使用于整数。\n\n![蔡金林的博客之时间复杂度](/assets/images/timecomplexity.png)\n\n####一、插入排序\n\n 直接插入排序（Insertion Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。\n    \n    void InsertSort(int L[],int length)  \n    {  \n        int i,j;//分别为有序区和无序区指针  \n        for(i=1;i<length;i++)//逐步扩大有序区  \n        {  \n            j=i+1;  \n            if(L[j]<L[i])  \n            {  \n             L[0]=L[j];//存储待排序元素  \n             While(L[0]<L[i])//查找在有序区中的插入位置，同时移动元素  \n             {  \n            L[i+1]=L[i];//移动  \n            i--;//查找  \n             }  \n            L[i+1]=L[0];//将元素插入  \n        }  \n       i=j-1;//还原有序区指针  \n    }  \n  \n\n![插入排序](/assets/images/InsertSort.png)\n\n####二、交换排序\n\n 冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\n\n    void BubbleSort(int a[], int n)\n    {\n        int i,j;\n        for(j=0;j<=n-1;j++)  \n        {  \n          for(i=0;i<=n-1-j;i++)  \n          {  \n            if(a[i]>a[i+1])//数组元素大小按升序排列  \n            {  \n               temp=a[i];  \n               a[i]=a[i+1];  \n               a[i+1]=temp;  \n            }  \n          }\n        }\n    }  \n\n 快速排序（Quicksort）是对冒泡排序的一种改进。它的基本思想是：运用分治法,通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另一部分小。分别对两部分排序，然后递归进行。\n\n    int Partition(int a[], int low, int high)\n    {\n        int temp = a[row];\n        while(low<high)\n        {\n          while(low<high && a[high] >= temp) high--;\n          a[low] = a[high];\n          while(low<high && a[low] <= temp) low++;\n          a[high] = a[low];\n        }\n        a[low] = temp;\n    }\n    void Quick_sort(int a[],int low ,int high)\n    {\n        if(low < high)\n        {\n          i=Partition(a,low,high);\n          Quick_sort(a,low,i-1);\n          Quick_sort(a,i+1,high);\n        }\n    }\n\n![快速排序](/assets/images/QuickSort.png)\n\n####三、选择排序\n\n 直接选择排序(Selection sort)是一种简单直观的排序算法。原理是将序列划分为无序和有序区，寻找无序区中的最小值和无序区的首元素交换，有序区扩大一个，循环最终完成全部排序。\n\n    void SelectSort(int a[], int n)\n    {\n      for(i=0;i<n-1;i++)  \n      {  \n        k = i;  \n        for(j=i+1;j<n;j++)  \n        {  \n            if(a[k] > a[j])  \n            k = j;  \n        }  \n        if(k != i)  \n        {  \n            temp = a[i];  \n            a[i] = a[k];  \n            a[k] = temp;  \n        }  \n      }  \n    }\n\n\n#### 四、归并排序\n\n 归并排序（Merge sort，台湾译作：合并排序）是建立在归并操作上的一种有效的排序算法。该算法是采用递归和分治法（Divide and Conquer）的一个非常典型的应用。\n\n    void merge(int *a,int start,int mid,int end)  \n    {  \n        if(start>mid || mid >end ) return;  \n        int i=start,j=mid+1,k=0;  \n        int *L=(int *)malloc((end-start+1)*sizeof(int));  \n        while(i<=mid && j<=end)  \n        {  \n          if(a[i]<a[j])  \n            {  \n                L[k++]=a[i++];  \n            }  \n            else  \n            {  \n                L[k++]=a[j++];  \n            }  \n        }    \n        while(i<=mid)  \n              L[k++]=a[i++];  \n          while(j<=end)  \n              L[k++]=a[j++];  \n        for(i=start,j=0;i<=end;i++,j++)  \n        {  \n              a[i]=L[j];  \n        }  \n        free(L);  \n    }  \n    void mergeSort(int *a, int start,int end)  \n    {  \n      if(start<end)  \n      {  \n          int mid=(start+end)/2;  \n          mergeSort(a,start,mid);  \n          mergeSort(a,mid+1,end);  \n          merge(a,start,mid,end);  \n      }  \n    }  \n\n\n![归并排序](/assets/images/MergeSort.png)\n\n#### 五、基数排序\n\n基数排序(Radix sort)是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。\n\n\n#### 快速排序与归并排序，冒泡排序与选择排序关系\n\n![排序之间关系](/assets/images/relation.png)\n\n","source":"_posts/内部排序算法分析.md","raw":"---\ntitle: 内部排序算法分析\ntags: []\ndate: 2014-07-02 08:00:00\n---\n\n### 内部排序算法（插入排序,归并排序,选择排序,冒泡排序,快速排序）\n\n#### 排序简介\n\n排序是数据处理中经常使用的一种重要运算,在计算机及其应用系统中,花费在排序上的时间在系统运行时间中占有很大比重;并且排序本身对推动算法分析的发展也起很大作用。目前已有上百种排序方法，但尚未有一个最理想的尽如人意的方法，本章介绍常用的如下排序方法，并对它们进行分析和比较。\n\n#### 排序分类\n\n    1、插入排序（直接插入排序、折半插入排序、希尔排序）；\n    2、交换排序（起泡排序、快速排序）；\n    3、选择排序（直接选择排序、堆排序）；\n    4、归并排序；\n    5、基数排序；\n\n#### 排序时间复杂度\n\n1.插入类排序\n\n将无序子序列中的一个或几个记录“插入”到有序序列中，从而增加记录的有序子序列的长度\n\n2.交换类排序\n\n通过“交换”无序序列中的记录从而得到其中关键字最小或最大的记录，并将它加入到有序子序列中，以此方法增加记录的有序子序列的长度。\n\n3.选择类排序\n\n从记录的无序子序列中“选择”关键字最小或最大的记录，并将它加入到有序子序列中，以此方法增加记录的有序子序列的长度。\n\n4.归并排序\n\n通过“归并”两个或两个以上的记录有序子序列，逐步增加记录有序序列的长度。\n\n5.基数排序\n\n一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串和特定格式的浮点数，所以基数排序也不只是使用于整数。\n\n![蔡金林的博客之时间复杂度](/assets/images/timecomplexity.png)\n\n####一、插入排序\n\n 直接插入排序（Insertion Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。\n    \n    void InsertSort(int L[],int length)  \n    {  \n        int i,j;//分别为有序区和无序区指针  \n        for(i=1;i<length;i++)//逐步扩大有序区  \n        {  \n            j=i+1;  \n            if(L[j]<L[i])  \n            {  \n             L[0]=L[j];//存储待排序元素  \n             While(L[0]<L[i])//查找在有序区中的插入位置，同时移动元素  \n             {  \n            L[i+1]=L[i];//移动  \n            i--;//查找  \n             }  \n            L[i+1]=L[0];//将元素插入  \n        }  \n       i=j-1;//还原有序区指针  \n    }  \n  \n\n![插入排序](/assets/images/InsertSort.png)\n\n####二、交换排序\n\n 冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\n\n    void BubbleSort(int a[], int n)\n    {\n        int i,j;\n        for(j=0;j<=n-1;j++)  \n        {  \n          for(i=0;i<=n-1-j;i++)  \n          {  \n            if(a[i]>a[i+1])//数组元素大小按升序排列  \n            {  \n               temp=a[i];  \n               a[i]=a[i+1];  \n               a[i+1]=temp;  \n            }  \n          }\n        }\n    }  \n\n 快速排序（Quicksort）是对冒泡排序的一种改进。它的基本思想是：运用分治法,通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另一部分小。分别对两部分排序，然后递归进行。\n\n    int Partition(int a[], int low, int high)\n    {\n        int temp = a[row];\n        while(low<high)\n        {\n          while(low<high && a[high] >= temp) high--;\n          a[low] = a[high];\n          while(low<high && a[low] <= temp) low++;\n          a[high] = a[low];\n        }\n        a[low] = temp;\n    }\n    void Quick_sort(int a[],int low ,int high)\n    {\n        if(low < high)\n        {\n          i=Partition(a,low,high);\n          Quick_sort(a,low,i-1);\n          Quick_sort(a,i+1,high);\n        }\n    }\n\n![快速排序](/assets/images/QuickSort.png)\n\n####三、选择排序\n\n 直接选择排序(Selection sort)是一种简单直观的排序算法。原理是将序列划分为无序和有序区，寻找无序区中的最小值和无序区的首元素交换，有序区扩大一个，循环最终完成全部排序。\n\n    void SelectSort(int a[], int n)\n    {\n      for(i=0;i<n-1;i++)  \n      {  \n        k = i;  \n        for(j=i+1;j<n;j++)  \n        {  \n            if(a[k] > a[j])  \n            k = j;  \n        }  \n        if(k != i)  \n        {  \n            temp = a[i];  \n            a[i] = a[k];  \n            a[k] = temp;  \n        }  \n      }  \n    }\n\n\n#### 四、归并排序\n\n 归并排序（Merge sort，台湾译作：合并排序）是建立在归并操作上的一种有效的排序算法。该算法是采用递归和分治法（Divide and Conquer）的一个非常典型的应用。\n\n    void merge(int *a,int start,int mid,int end)  \n    {  \n        if(start>mid || mid >end ) return;  \n        int i=start,j=mid+1,k=0;  \n        int *L=(int *)malloc((end-start+1)*sizeof(int));  \n        while(i<=mid && j<=end)  \n        {  \n          if(a[i]<a[j])  \n            {  \n                L[k++]=a[i++];  \n            }  \n            else  \n            {  \n                L[k++]=a[j++];  \n            }  \n        }    \n        while(i<=mid)  \n              L[k++]=a[i++];  \n          while(j<=end)  \n              L[k++]=a[j++];  \n        for(i=start,j=0;i<=end;i++,j++)  \n        {  \n              a[i]=L[j];  \n        }  \n        free(L);  \n    }  \n    void mergeSort(int *a, int start,int end)  \n    {  \n      if(start<end)  \n      {  \n          int mid=(start+end)/2;  \n          mergeSort(a,start,mid);  \n          mergeSort(a,mid+1,end);  \n          merge(a,start,mid,end);  \n      }  \n    }  \n\n\n![归并排序](/assets/images/MergeSort.png)\n\n#### 五、基数排序\n\n基数排序(Radix sort)是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。\n\n\n#### 快速排序与归并排序，冒泡排序与选择排序关系\n\n![排序之间关系](/assets/images/relation.png)\n\n","slug":"内部排序算法分析","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwth001p2o5pt6b75om4","content":"<h3 id=\"内部排序算法（插入排序-归并排序-选择排序-冒泡排序-快速排序）\"><a href=\"#内部排序算法（插入排序-归并排序-选择排序-冒泡排序-快速排序）\" class=\"headerlink\" title=\"内部排序算法（插入排序,归并排序,选择排序,冒泡排序,快速排序）\"></a>内部排序算法（插入排序,归并排序,选择排序,冒泡排序,快速排序）</h3><h4 id=\"排序简介\"><a href=\"#排序简介\" class=\"headerlink\" title=\"排序简介\"></a>排序简介</h4><p>排序是数据处理中经常使用的一种重要运算,在计算机及其应用系统中,花费在排序上的时间在系统运行时间中占有很大比重;并且排序本身对推动算法分析的发展也起很大作用。目前已有上百种排序方法，但尚未有一个最理想的尽如人意的方法，本章介绍常用的如下排序方法，并对它们进行分析和比较。</p>\n<h4 id=\"排序分类\"><a href=\"#排序分类\" class=\"headerlink\" title=\"排序分类\"></a>排序分类</h4><pre><code>1、插入排序（直接插入排序、折半插入排序、希尔排序）；\n2、交换排序（起泡排序、快速排序）；\n3、选择排序（直接选择排序、堆排序）；\n4、归并排序；\n5、基数排序；\n</code></pre><h4 id=\"排序时间复杂度\"><a href=\"#排序时间复杂度\" class=\"headerlink\" title=\"排序时间复杂度\"></a>排序时间复杂度</h4><p>1.插入类排序</p>\n<p>将无序子序列中的一个或几个记录“插入”到有序序列中，从而增加记录的有序子序列的长度</p>\n<p>2.交换类排序</p>\n<p>通过“交换”无序序列中的记录从而得到其中关键字最小或最大的记录，并将它加入到有序子序列中，以此方法增加记录的有序子序列的长度。</p>\n<p>3.选择类排序</p>\n<p>从记录的无序子序列中“选择”关键字最小或最大的记录，并将它加入到有序子序列中，以此方法增加记录的有序子序列的长度。</p>\n<p>4.归并排序</p>\n<p>通过“归并”两个或两个以上的记录有序子序列，逐步增加记录有序序列的长度。</p>\n<p>5.基数排序</p>\n<p>一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串和特定格式的浮点数，所以基数排序也不只是使用于整数。</p>\n<p><img src=\"/assets/images/timecomplexity.png\" alt=\"蔡金林的博客之时间复杂度\"></p>\n<p>####一、插入排序</p>\n<p> 直接插入排序（Insertion Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>\n<pre><code>void InsertSort(int L[],int length)  \n{  \n    int i,j;//分别为有序区和无序区指针  \n    for(i=1;i&lt;length;i++)//逐步扩大有序区  \n    {  \n        j=i+1;  \n        if(L[j]&lt;L[i])  \n        {  \n         L[0]=L[j];//存储待排序元素  \n         While(L[0]&lt;L[i])//查找在有序区中的插入位置，同时移动元素  \n         {  \n        L[i+1]=L[i];//移动  \n        i--;//查找  \n         }  \n        L[i+1]=L[0];//将元素插入  \n    }  \n   i=j-1;//还原有序区指针  \n}  \n</code></pre><p><img src=\"/assets/images/InsertSort.png\" alt=\"插入排序\"></p>\n<p>####二、交换排序</p>\n<p> 冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>\n<pre><code>void BubbleSort(int a[], int n)\n{\n    int i,j;\n    for(j=0;j&lt;=n-1;j++)  \n    {  \n      for(i=0;i&lt;=n-1-j;i++)  \n      {  \n        if(a[i]&gt;a[i+1])//数组元素大小按升序排列  \n        {  \n           temp=a[i];  \n           a[i]=a[i+1];  \n           a[i+1]=temp;  \n        }  \n      }\n    }\n}  \n</code></pre><p> 快速排序（Quicksort）是对冒泡排序的一种改进。它的基本思想是：运用分治法,通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另一部分小。分别对两部分排序，然后递归进行。</p>\n<pre><code>int Partition(int a[], int low, int high)\n{\n    int temp = a[row];\n    while(low&lt;high)\n    {\n      while(low&lt;high &amp;&amp; a[high] &gt;= temp) high--;\n      a[low] = a[high];\n      while(low&lt;high &amp;&amp; a[low] &lt;= temp) low++;\n      a[high] = a[low];\n    }\n    a[low] = temp;\n}\nvoid Quick_sort(int a[],int low ,int high)\n{\n    if(low &lt; high)\n    {\n      i=Partition(a,low,high);\n      Quick_sort(a,low,i-1);\n      Quick_sort(a,i+1,high);\n    }\n}\n</code></pre><p><img src=\"/assets/images/QuickSort.png\" alt=\"快速排序\"></p>\n<p>####三、选择排序</p>\n<p> 直接选择排序(Selection sort)是一种简单直观的排序算法。原理是将序列划分为无序和有序区，寻找无序区中的最小值和无序区的首元素交换，有序区扩大一个，循环最终完成全部排序。</p>\n<pre><code>void SelectSort(int a[], int n)\n{\n  for(i=0;i&lt;n-1;i++)  \n  {  \n    k = i;  \n    for(j=i+1;j&lt;n;j++)  \n    {  \n        if(a[k] &gt; a[j])  \n        k = j;  \n    }  \n    if(k != i)  \n    {  \n        temp = a[i];  \n        a[i] = a[k];  \n        a[k] = temp;  \n    }  \n  }  \n}\n</code></pre><h4 id=\"四、归并排序\"><a href=\"#四、归并排序\" class=\"headerlink\" title=\"四、归并排序\"></a>四、归并排序</h4><p> 归并排序（Merge sort，台湾译作：合并排序）是建立在归并操作上的一种有效的排序算法。该算法是采用递归和分治法（Divide and Conquer）的一个非常典型的应用。</p>\n<pre><code>void merge(int *a,int start,int mid,int end)  \n{  \n    if(start&gt;mid || mid &gt;end ) return;  \n    int i=start,j=mid+1,k=0;  \n    int *L=(int *)malloc((end-start+1)*sizeof(int));  \n    while(i&lt;=mid &amp;&amp; j&lt;=end)  \n    {  \n      if(a[i]&lt;a[j])  \n        {  \n            L[k++]=a[i++];  \n        }  \n        else  \n        {  \n            L[k++]=a[j++];  \n        }  \n    }    \n    while(i&lt;=mid)  \n          L[k++]=a[i++];  \n      while(j&lt;=end)  \n          L[k++]=a[j++];  \n    for(i=start,j=0;i&lt;=end;i++,j++)  \n    {  \n          a[i]=L[j];  \n    }  \n    free(L);  \n}  \nvoid mergeSort(int *a, int start,int end)  \n{  \n  if(start&lt;end)  \n  {  \n      int mid=(start+end)/2;  \n      mergeSort(a,start,mid);  \n      mergeSort(a,mid+1,end);  \n      merge(a,start,mid,end);  \n  }  \n}  \n</code></pre><p><img src=\"/assets/images/MergeSort.png\" alt=\"归并排序\"></p>\n<h4 id=\"五、基数排序\"><a href=\"#五、基数排序\" class=\"headerlink\" title=\"五、基数排序\"></a>五、基数排序</h4><p>基数排序(Radix sort)是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p>\n<h4 id=\"快速排序与归并排序，冒泡排序与选择排序关系\"><a href=\"#快速排序与归并排序，冒泡排序与选择排序关系\" class=\"headerlink\" title=\"快速排序与归并排序，冒泡排序与选择排序关系\"></a>快速排序与归并排序，冒泡排序与选择排序关系</h4><p><img src=\"/assets/images/relation.png\" alt=\"排序之间关系\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"内部排序算法（插入排序-归并排序-选择排序-冒泡排序-快速排序）\"><a href=\"#内部排序算法（插入排序-归并排序-选择排序-冒泡排序-快速排序）\" class=\"headerlink\" title=\"内部排序算法（插入排序,归并排序,选择排序,冒泡排序,快速排序）\"></a>内部排序算法（插入排序,归并排序,选择排序,冒泡排序,快速排序）</h3><h4 id=\"排序简介\"><a href=\"#排序简介\" class=\"headerlink\" title=\"排序简介\"></a>排序简介</h4><p>排序是数据处理中经常使用的一种重要运算,在计算机及其应用系统中,花费在排序上的时间在系统运行时间中占有很大比重;并且排序本身对推动算法分析的发展也起很大作用。目前已有上百种排序方法，但尚未有一个最理想的尽如人意的方法，本章介绍常用的如下排序方法，并对它们进行分析和比较。</p>\n<h4 id=\"排序分类\"><a href=\"#排序分类\" class=\"headerlink\" title=\"排序分类\"></a>排序分类</h4><pre><code>1、插入排序（直接插入排序、折半插入排序、希尔排序）；\n2、交换排序（起泡排序、快速排序）；\n3、选择排序（直接选择排序、堆排序）；\n4、归并排序；\n5、基数排序；\n</code></pre><h4 id=\"排序时间复杂度\"><a href=\"#排序时间复杂度\" class=\"headerlink\" title=\"排序时间复杂度\"></a>排序时间复杂度</h4><p>1.插入类排序</p>\n<p>将无序子序列中的一个或几个记录“插入”到有序序列中，从而增加记录的有序子序列的长度</p>\n<p>2.交换类排序</p>\n<p>通过“交换”无序序列中的记录从而得到其中关键字最小或最大的记录，并将它加入到有序子序列中，以此方法增加记录的有序子序列的长度。</p>\n<p>3.选择类排序</p>\n<p>从记录的无序子序列中“选择”关键字最小或最大的记录，并将它加入到有序子序列中，以此方法增加记录的有序子序列的长度。</p>\n<p>4.归并排序</p>\n<p>通过“归并”两个或两个以上的记录有序子序列，逐步增加记录有序序列的长度。</p>\n<p>5.基数排序</p>\n<p>一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串和特定格式的浮点数，所以基数排序也不只是使用于整数。</p>\n<p><img src=\"/assets/images/timecomplexity.png\" alt=\"蔡金林的博客之时间复杂度\"></p>\n<p>####一、插入排序</p>\n<p> 直接插入排序（Insertion Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>\n<pre><code>void InsertSort(int L[],int length)  \n{  \n    int i,j;//分别为有序区和无序区指针  \n    for(i=1;i&lt;length;i++)//逐步扩大有序区  \n    {  \n        j=i+1;  \n        if(L[j]&lt;L[i])  \n        {  \n         L[0]=L[j];//存储待排序元素  \n         While(L[0]&lt;L[i])//查找在有序区中的插入位置，同时移动元素  \n         {  \n        L[i+1]=L[i];//移动  \n        i--;//查找  \n         }  \n        L[i+1]=L[0];//将元素插入  \n    }  \n   i=j-1;//还原有序区指针  \n}  \n</code></pre><p><img src=\"/assets/images/InsertSort.png\" alt=\"插入排序\"></p>\n<p>####二、交换排序</p>\n<p> 冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>\n<pre><code>void BubbleSort(int a[], int n)\n{\n    int i,j;\n    for(j=0;j&lt;=n-1;j++)  \n    {  \n      for(i=0;i&lt;=n-1-j;i++)  \n      {  \n        if(a[i]&gt;a[i+1])//数组元素大小按升序排列  \n        {  \n           temp=a[i];  \n           a[i]=a[i+1];  \n           a[i+1]=temp;  \n        }  \n      }\n    }\n}  \n</code></pre><p> 快速排序（Quicksort）是对冒泡排序的一种改进。它的基本思想是：运用分治法,通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另一部分小。分别对两部分排序，然后递归进行。</p>\n<pre><code>int Partition(int a[], int low, int high)\n{\n    int temp = a[row];\n    while(low&lt;high)\n    {\n      while(low&lt;high &amp;&amp; a[high] &gt;= temp) high--;\n      a[low] = a[high];\n      while(low&lt;high &amp;&amp; a[low] &lt;= temp) low++;\n      a[high] = a[low];\n    }\n    a[low] = temp;\n}\nvoid Quick_sort(int a[],int low ,int high)\n{\n    if(low &lt; high)\n    {\n      i=Partition(a,low,high);\n      Quick_sort(a,low,i-1);\n      Quick_sort(a,i+1,high);\n    }\n}\n</code></pre><p><img src=\"/assets/images/QuickSort.png\" alt=\"快速排序\"></p>\n<p>####三、选择排序</p>\n<p> 直接选择排序(Selection sort)是一种简单直观的排序算法。原理是将序列划分为无序和有序区，寻找无序区中的最小值和无序区的首元素交换，有序区扩大一个，循环最终完成全部排序。</p>\n<pre><code>void SelectSort(int a[], int n)\n{\n  for(i=0;i&lt;n-1;i++)  \n  {  \n    k = i;  \n    for(j=i+1;j&lt;n;j++)  \n    {  \n        if(a[k] &gt; a[j])  \n        k = j;  \n    }  \n    if(k != i)  \n    {  \n        temp = a[i];  \n        a[i] = a[k];  \n        a[k] = temp;  \n    }  \n  }  \n}\n</code></pre><h4 id=\"四、归并排序\"><a href=\"#四、归并排序\" class=\"headerlink\" title=\"四、归并排序\"></a>四、归并排序</h4><p> 归并排序（Merge sort，台湾译作：合并排序）是建立在归并操作上的一种有效的排序算法。该算法是采用递归和分治法（Divide and Conquer）的一个非常典型的应用。</p>\n<pre><code>void merge(int *a,int start,int mid,int end)  \n{  \n    if(start&gt;mid || mid &gt;end ) return;  \n    int i=start,j=mid+1,k=0;  \n    int *L=(int *)malloc((end-start+1)*sizeof(int));  \n    while(i&lt;=mid &amp;&amp; j&lt;=end)  \n    {  \n      if(a[i]&lt;a[j])  \n        {  \n            L[k++]=a[i++];  \n        }  \n        else  \n        {  \n            L[k++]=a[j++];  \n        }  \n    }    \n    while(i&lt;=mid)  \n          L[k++]=a[i++];  \n      while(j&lt;=end)  \n          L[k++]=a[j++];  \n    for(i=start,j=0;i&lt;=end;i++,j++)  \n    {  \n          a[i]=L[j];  \n    }  \n    free(L);  \n}  \nvoid mergeSort(int *a, int start,int end)  \n{  \n  if(start&lt;end)  \n  {  \n      int mid=(start+end)/2;  \n      mergeSort(a,start,mid);  \n      mergeSort(a,mid+1,end);  \n      merge(a,start,mid,end);  \n  }  \n}  \n</code></pre><p><img src=\"/assets/images/MergeSort.png\" alt=\"归并排序\"></p>\n<h4 id=\"五、基数排序\"><a href=\"#五、基数排序\" class=\"headerlink\" title=\"五、基数排序\"></a>五、基数排序</h4><p>基数排序(Radix sort)是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p>\n<h4 id=\"快速排序与归并排序，冒泡排序与选择排序关系\"><a href=\"#快速排序与归并排序，冒泡排序与选择排序关系\" class=\"headerlink\" title=\"快速排序与归并排序，冒泡排序与选择排序关系\"></a>快速排序与归并排序，冒泡排序与选择排序关系</h4><p><img src=\"/assets/images/relation.png\" alt=\"排序之间关系\"></p>\n"},{"title":"动态规划算法","date":"2014-05-12T00:00:00.000Z","_content":"\n### 动态规划算法(拒绝暴力，提倡和谐）\n\n动态算法: 自顶向下的分析，自底向上的计算，每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划。似解。\n\n#### 基本思想与策略\n\n基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。\n\n由于动态规划解决的问题多数有重叠子问题这个特点，为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中。\n\n与分治法最大的差别是：适合于用动态规划法求解的问题，经分解后得到的子问题往往不是互相独立的（即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解\n\n#### 适用的情况\n\n能采用动态规划求解的问题的一般要具有3个性质\n\n    最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。\n    无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。\n    有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。\n\n#### 动态规划算法的基本步骤\n\n划分阶段：按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。\n\n确定状态和状态变量：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。\n\n确定决策并写出状态转移方程：因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。\n\n寻找边界条件：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。\n\n\n实际应用中可以按以下几个简化的步骤进行设计：\n\n    （1）分析最优解的性质，并刻画其结构特征。\n    （2）递归的定义最优解。\n    （3）以自底向上或自顶向下的记忆化方式（备忘录法）计算出最优值\n    （4）根据计算最优值时得到的信息，构造问题的最优解\n\n![背包问题](/assets/images/backpack.png)\n\n#### 算法实现说明\n\n动态规划的主要难点在于理论上的设计，也就是上面4个步骤的确定，一旦设计完成，实现部分就会非常简单。\n\n使用动态规划求解问题，最重要的就是确定动态规划三要素：\n  \n  （1）问题的阶段\n  （2）每个阶段的状态\n  （3）从前一个阶段转化到后一个阶段之间的递推关系。\n\n递推关系必须是从次小的问题开始到较大的问题之间的转化，从这个角度来说，动态规划往往可以用递归程序来实现，不过因为递推可以充分利用前面保存的子问题的解来减少重复计算，所以对于大规模问题来说，有递归不可比拟的优势，这也是动态规划算法的核心之处。\n确定了动态规划的这三要素，整个求解过程就可以用一个最优决策表来描述，最优决策表是一个二维表，其中行表示决策的阶段，列表示问题状态，表格需要填写的数据一般对应此问题的在某个阶段某个状态下的最优值（如最短路径，最长公共子序列，最大价值等），填表的过程就是根据递推关系，从1行1列开始，以行或者列优先的顺序，依次填写表格，最后根据整个表格的数据通过简单的取舍或者运算求得问题的最优解。\n\n具体分析http://acm.hdu.edu.cn/showproblem.php?pid=1159\n\n#### 案例分析:Common Subsequence(最长公共子序列问题)\n\n![动态规划路径](/assets/images/path.png)\n\n#### 算法实现code\n\n    #include<iostream>\n    #include<string>\n    #include<stdio.h>\n    #define Max 100\n    using namespace std;\n    int size(char *s)\n    {\n      int len=0;\n      while(*s!='\\0')\n      {\n         len++;\n         s=s+1;\n      }\n      return len;\n    }\n    int main(int argc, char* argv[])\n    {\n      int i,j;\n      int len1,len2;\n      int matricx[Max][Max];\n      char s1[80],s2[80];\n      while(scanf(\"%s %s\",s1,s2) != EOF)\n      {\n        len1=size(s1);\n        len2=size(s2);\n        for(i=0;i<=len2;i++)\n        {\n          matricx[i][0]=0;\n        }\n        for(i=0;i<=len1;i++)\n        {\n            matricx[i][0]=0;\n        }\n        for(i=1;i<=len1;i++)\n        {\n          for(j=1;j<=len2;j++)\n          {\n              if(s1[i-1]==s2[j-1])\n              {\n                  matricx[i][j]=matricx[i-1][j-1]+1;\n              }\n              else\n              {\n                  matricx[i][j]=(matricx[i-1][j]>matricx[i][j-1])?matricx[i-1][j]:matricx[i][j-1];\n              }\n          }\n        }\n        cout<<matricx[len1][len2]<<endl;\n      }\n    }","source":"_posts/动态规划算法.md","raw":"---\ntitle: 动态规划算法\ntags: [algorithm]\ndate: 2014-05-12 08:00:00\ncategories: algorithm\n---\n\n### 动态规划算法(拒绝暴力，提倡和谐）\n\n动态算法: 自顶向下的分析，自底向上的计算，每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划。似解。\n\n#### 基本思想与策略\n\n基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。\n\n由于动态规划解决的问题多数有重叠子问题这个特点，为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中。\n\n与分治法最大的差别是：适合于用动态规划法求解的问题，经分解后得到的子问题往往不是互相独立的（即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解\n\n#### 适用的情况\n\n能采用动态规划求解的问题的一般要具有3个性质\n\n    最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。\n    无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。\n    有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。\n\n#### 动态规划算法的基本步骤\n\n划分阶段：按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。\n\n确定状态和状态变量：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。\n\n确定决策并写出状态转移方程：因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。\n\n寻找边界条件：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。\n\n\n实际应用中可以按以下几个简化的步骤进行设计：\n\n    （1）分析最优解的性质，并刻画其结构特征。\n    （2）递归的定义最优解。\n    （3）以自底向上或自顶向下的记忆化方式（备忘录法）计算出最优值\n    （4）根据计算最优值时得到的信息，构造问题的最优解\n\n![背包问题](/assets/images/backpack.png)\n\n#### 算法实现说明\n\n动态规划的主要难点在于理论上的设计，也就是上面4个步骤的确定，一旦设计完成，实现部分就会非常简单。\n\n使用动态规划求解问题，最重要的就是确定动态规划三要素：\n  \n  （1）问题的阶段\n  （2）每个阶段的状态\n  （3）从前一个阶段转化到后一个阶段之间的递推关系。\n\n递推关系必须是从次小的问题开始到较大的问题之间的转化，从这个角度来说，动态规划往往可以用递归程序来实现，不过因为递推可以充分利用前面保存的子问题的解来减少重复计算，所以对于大规模问题来说，有递归不可比拟的优势，这也是动态规划算法的核心之处。\n确定了动态规划的这三要素，整个求解过程就可以用一个最优决策表来描述，最优决策表是一个二维表，其中行表示决策的阶段，列表示问题状态，表格需要填写的数据一般对应此问题的在某个阶段某个状态下的最优值（如最短路径，最长公共子序列，最大价值等），填表的过程就是根据递推关系，从1行1列开始，以行或者列优先的顺序，依次填写表格，最后根据整个表格的数据通过简单的取舍或者运算求得问题的最优解。\n\n具体分析http://acm.hdu.edu.cn/showproblem.php?pid=1159\n\n#### 案例分析:Common Subsequence(最长公共子序列问题)\n\n![动态规划路径](/assets/images/path.png)\n\n#### 算法实现code\n\n    #include<iostream>\n    #include<string>\n    #include<stdio.h>\n    #define Max 100\n    using namespace std;\n    int size(char *s)\n    {\n      int len=0;\n      while(*s!='\\0')\n      {\n         len++;\n         s=s+1;\n      }\n      return len;\n    }\n    int main(int argc, char* argv[])\n    {\n      int i,j;\n      int len1,len2;\n      int matricx[Max][Max];\n      char s1[80],s2[80];\n      while(scanf(\"%s %s\",s1,s2) != EOF)\n      {\n        len1=size(s1);\n        len2=size(s2);\n        for(i=0;i<=len2;i++)\n        {\n          matricx[i][0]=0;\n        }\n        for(i=0;i<=len1;i++)\n        {\n            matricx[i][0]=0;\n        }\n        for(i=1;i<=len1;i++)\n        {\n          for(j=1;j<=len2;j++)\n          {\n              if(s1[i-1]==s2[j-1])\n              {\n                  matricx[i][j]=matricx[i-1][j-1]+1;\n              }\n              else\n              {\n                  matricx[i][j]=(matricx[i-1][j]>matricx[i][j-1])?matricx[i-1][j]:matricx[i][j-1];\n              }\n          }\n        }\n        cout<<matricx[len1][len2]<<endl;\n      }\n    }","slug":"动态规划算法","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwtj001q2o5po2xizl54","content":"<h3 id=\"动态规划算法-拒绝暴力，提倡和谐）\"><a href=\"#动态规划算法-拒绝暴力，提倡和谐）\" class=\"headerlink\" title=\"动态规划算法(拒绝暴力，提倡和谐）\"></a>动态规划算法(拒绝暴力，提倡和谐）</h3><p>动态算法: 自顶向下的分析，自底向上的计算，每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划。似解。</p>\n<h4 id=\"基本思想与策略\"><a href=\"#基本思想与策略\" class=\"headerlink\" title=\"基本思想与策略\"></a>基本思想与策略</h4><p>基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。</p>\n<p>由于动态规划解决的问题多数有重叠子问题这个特点，为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中。</p>\n<p>与分治法最大的差别是：适合于用动态规划法求解的问题，经分解后得到的子问题往往不是互相独立的（即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解</p>\n<h4 id=\"适用的情况\"><a href=\"#适用的情况\" class=\"headerlink\" title=\"适用的情况\"></a>适用的情况</h4><p>能采用动态规划求解的问题的一般要具有3个性质</p>\n<pre><code>最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。\n无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。\n有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。\n</code></pre><h4 id=\"动态规划算法的基本步骤\"><a href=\"#动态规划算法的基本步骤\" class=\"headerlink\" title=\"动态规划算法的基本步骤\"></a>动态规划算法的基本步骤</h4><p>划分阶段：按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。</p>\n<p>确定状态和状态变量：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。</p>\n<p>确定决策并写出状态转移方程：因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。</p>\n<p>寻找边界条件：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。</p>\n<p>实际应用中可以按以下几个简化的步骤进行设计：</p>\n<pre><code>（1）分析最优解的性质，并刻画其结构特征。\n（2）递归的定义最优解。\n（3）以自底向上或自顶向下的记忆化方式（备忘录法）计算出最优值\n（4）根据计算最优值时得到的信息，构造问题的最优解\n</code></pre><p><img src=\"/assets/images/backpack.png\" alt=\"背包问题\"></p>\n<h4 id=\"算法实现说明\"><a href=\"#算法实现说明\" class=\"headerlink\" title=\"算法实现说明\"></a>算法实现说明</h4><p>动态规划的主要难点在于理论上的设计，也就是上面4个步骤的确定，一旦设计完成，实现部分就会非常简单。</p>\n<p>使用动态规划求解问题，最重要的就是确定动态规划三要素：</p>\n<p>  （1）问题的阶段<br>  （2）每个阶段的状态<br>  （3）从前一个阶段转化到后一个阶段之间的递推关系。</p>\n<p>递推关系必须是从次小的问题开始到较大的问题之间的转化，从这个角度来说，动态规划往往可以用递归程序来实现，不过因为递推可以充分利用前面保存的子问题的解来减少重复计算，所以对于大规模问题来说，有递归不可比拟的优势，这也是动态规划算法的核心之处。<br>确定了动态规划的这三要素，整个求解过程就可以用一个最优决策表来描述，最优决策表是一个二维表，其中行表示决策的阶段，列表示问题状态，表格需要填写的数据一般对应此问题的在某个阶段某个状态下的最优值（如最短路径，最长公共子序列，最大价值等），填表的过程就是根据递推关系，从1行1列开始，以行或者列优先的顺序，依次填写表格，最后根据整个表格的数据通过简单的取舍或者运算求得问题的最优解。</p>\n<p>具体分析<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1159\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=1159</a></p>\n<h4 id=\"案例分析-Common-Subsequence-最长公共子序列问题\"><a href=\"#案例分析-Common-Subsequence-最长公共子序列问题\" class=\"headerlink\" title=\"案例分析:Common Subsequence(最长公共子序列问题)\"></a>案例分析:Common Subsequence(最长公共子序列问题)</h4><p><img src=\"/assets/images/path.png\" alt=\"动态规划路径\"></p>\n<h4 id=\"算法实现code\"><a href=\"#算法实现code\" class=\"headerlink\" title=\"算法实现code\"></a>算法实现code</h4><pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;stdio.h&gt;\n#define Max 100\nusing namespace std;\nint size(char *s)\n{\n  int len=0;\n  while(*s!=&apos;\\0&apos;)\n  {\n     len++;\n     s=s+1;\n  }\n  return len;\n}\nint main(int argc, char* argv[])\n{\n  int i,j;\n  int len1,len2;\n  int matricx[Max][Max];\n  char s1[80],s2[80];\n  while(scanf(&quot;%s %s&quot;,s1,s2) != EOF)\n  {\n    len1=size(s1);\n    len2=size(s2);\n    for(i=0;i&lt;=len2;i++)\n    {\n      matricx[i][0]=0;\n    }\n    for(i=0;i&lt;=len1;i++)\n    {\n        matricx[i][0]=0;\n    }\n    for(i=1;i&lt;=len1;i++)\n    {\n      for(j=1;j&lt;=len2;j++)\n      {\n          if(s1[i-1]==s2[j-1])\n          {\n              matricx[i][j]=matricx[i-1][j-1]+1;\n          }\n          else\n          {\n              matricx[i][j]=(matricx[i-1][j]&gt;matricx[i][j-1])?matricx[i-1][j]:matricx[i][j-1];\n          }\n      }\n    }\n    cout&lt;&lt;matricx[len1][len2]&lt;&lt;endl;\n  }\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"动态规划算法-拒绝暴力，提倡和谐）\"><a href=\"#动态规划算法-拒绝暴力，提倡和谐）\" class=\"headerlink\" title=\"动态规划算法(拒绝暴力，提倡和谐）\"></a>动态规划算法(拒绝暴力，提倡和谐）</h3><p>动态算法: 自顶向下的分析，自底向上的计算，每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划。似解。</p>\n<h4 id=\"基本思想与策略\"><a href=\"#基本思想与策略\" class=\"headerlink\" title=\"基本思想与策略\"></a>基本思想与策略</h4><p>基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。</p>\n<p>由于动态规划解决的问题多数有重叠子问题这个特点，为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中。</p>\n<p>与分治法最大的差别是：适合于用动态规划法求解的问题，经分解后得到的子问题往往不是互相独立的（即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解</p>\n<h4 id=\"适用的情况\"><a href=\"#适用的情况\" class=\"headerlink\" title=\"适用的情况\"></a>适用的情况</h4><p>能采用动态规划求解的问题的一般要具有3个性质</p>\n<pre><code>最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。\n无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。\n有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。\n</code></pre><h4 id=\"动态规划算法的基本步骤\"><a href=\"#动态规划算法的基本步骤\" class=\"headerlink\" title=\"动态规划算法的基本步骤\"></a>动态规划算法的基本步骤</h4><p>划分阶段：按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。</p>\n<p>确定状态和状态变量：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。</p>\n<p>确定决策并写出状态转移方程：因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。</p>\n<p>寻找边界条件：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。</p>\n<p>实际应用中可以按以下几个简化的步骤进行设计：</p>\n<pre><code>（1）分析最优解的性质，并刻画其结构特征。\n（2）递归的定义最优解。\n（3）以自底向上或自顶向下的记忆化方式（备忘录法）计算出最优值\n（4）根据计算最优值时得到的信息，构造问题的最优解\n</code></pre><p><img src=\"/assets/images/backpack.png\" alt=\"背包问题\"></p>\n<h4 id=\"算法实现说明\"><a href=\"#算法实现说明\" class=\"headerlink\" title=\"算法实现说明\"></a>算法实现说明</h4><p>动态规划的主要难点在于理论上的设计，也就是上面4个步骤的确定，一旦设计完成，实现部分就会非常简单。</p>\n<p>使用动态规划求解问题，最重要的就是确定动态规划三要素：</p>\n<p>  （1）问题的阶段<br>  （2）每个阶段的状态<br>  （3）从前一个阶段转化到后一个阶段之间的递推关系。</p>\n<p>递推关系必须是从次小的问题开始到较大的问题之间的转化，从这个角度来说，动态规划往往可以用递归程序来实现，不过因为递推可以充分利用前面保存的子问题的解来减少重复计算，所以对于大规模问题来说，有递归不可比拟的优势，这也是动态规划算法的核心之处。<br>确定了动态规划的这三要素，整个求解过程就可以用一个最优决策表来描述，最优决策表是一个二维表，其中行表示决策的阶段，列表示问题状态，表格需要填写的数据一般对应此问题的在某个阶段某个状态下的最优值（如最短路径，最长公共子序列，最大价值等），填表的过程就是根据递推关系，从1行1列开始，以行或者列优先的顺序，依次填写表格，最后根据整个表格的数据通过简单的取舍或者运算求得问题的最优解。</p>\n<p>具体分析<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1159\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=1159</a></p>\n<h4 id=\"案例分析-Common-Subsequence-最长公共子序列问题\"><a href=\"#案例分析-Common-Subsequence-最长公共子序列问题\" class=\"headerlink\" title=\"案例分析:Common Subsequence(最长公共子序列问题)\"></a>案例分析:Common Subsequence(最长公共子序列问题)</h4><p><img src=\"/assets/images/path.png\" alt=\"动态规划路径\"></p>\n<h4 id=\"算法实现code\"><a href=\"#算法实现code\" class=\"headerlink\" title=\"算法实现code\"></a>算法实现code</h4><pre><code>#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;stdio.h&gt;\n#define Max 100\nusing namespace std;\nint size(char *s)\n{\n  int len=0;\n  while(*s!=&apos;\\0&apos;)\n  {\n     len++;\n     s=s+1;\n  }\n  return len;\n}\nint main(int argc, char* argv[])\n{\n  int i,j;\n  int len1,len2;\n  int matricx[Max][Max];\n  char s1[80],s2[80];\n  while(scanf(&quot;%s %s&quot;,s1,s2) != EOF)\n  {\n    len1=size(s1);\n    len2=size(s2);\n    for(i=0;i&lt;=len2;i++)\n    {\n      matricx[i][0]=0;\n    }\n    for(i=0;i&lt;=len1;i++)\n    {\n        matricx[i][0]=0;\n    }\n    for(i=1;i&lt;=len1;i++)\n    {\n      for(j=1;j&lt;=len2;j++)\n      {\n          if(s1[i-1]==s2[j-1])\n          {\n              matricx[i][j]=matricx[i-1][j-1]+1;\n          }\n          else\n          {\n              matricx[i][j]=(matricx[i-1][j]&gt;matricx[i][j-1])?matricx[i-1][j]:matricx[i][j-1];\n          }\n      }\n    }\n    cout&lt;&lt;matricx[len1][len2]&lt;&lt;endl;\n  }\n}\n</code></pre>"},{"title":"图的遍历算法———BFS和DFS算法","date":"2014-06-20T00:00:00.000Z","_content":"\n### 深度优先遍历和广度优先遍历\n从图的某顶点出发，访问图中所有顶点，并且每个顶点仅访问一次。图中可能有回路，遍历可能沿回路又回到已遍历过的结点。\n为避免同一顶点被多次访问，必须为每个被访问的顶点作一标志。为此引入一辅助数组,记录每个顶点是否被访问过。\n\n#### 1.使用邻接表来储存图的节点关系\n\n![邻接表](/assets/images/Adjlist.png)\n\n#### 2. 深度优先遍历\n  \n  思路:从图的某一顶点V0出发，访问此顶点；然后依次从V0的未被访问的邻接点出发，深度优先遍历图，直至图中所有和V0相通的顶点都被访问到；\n\n  若此时图中尚有顶点未被访问，则另选图中一个未被访问的顶点作起点，重复上述过程，直至图中所有顶点都被访问为止\n\n![邻接表](/assets/images/Dft.png)\n    \n#### 3.广度优先遍历\n\n  思路：从图中的某个顶点V0出发，并在访问此顶点之后依次访问V0的所有未被访问过的邻接点，之后按这些顶点被访问的先后次序依次访问它们的邻接点，直至图中所有和V0有路径相通的顶点都被访问到。\n\n  若此时图中尚有顶点未被访问，则另选图中一个未曾被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止\n\n![邻接表](/assets/images/Bft.png)\n\n#### 4.BFS和DFS算法实现c++版\n\n``` c++\n\n    #include<iostream>\n    #include<queue>\n    #include<memory.h>\n    using namespace std;\n    const int n=9;\n    int visit[100];//访问标志\n    void BFS(int a[][n] , int n) //宽度优先遍历\n    {\n      queue<int> g;\n      int i;\n      memset(visit,0,sizeof(visit));\n      g.push(0);\n      cout<<0<<\" \";\n      visit[0]=1;\n      while(!g.empty())\n      {\n         int vexnum=g.front();\n        g.pop();\n        for(i=0;i<n;i++)\n        {\n           if(a[vexnum][i]!=0&&!visit[i])\n           {\n               g.push(i);\n               visit[i]=1;//设置进栈标志\n               cout<<i<<\" \";\n           }\n        }\n      }\n    }\n    void DFS(int a[][n], int v)\n    {\n        visit[v]=1;\n        cout<<v<<\" \";\n        for(int i=0;i<n;i++)\n        {\n            if(a[v][i]!=0&&!visit[i])\n            {\n                DFS(a, i);\n            }\n        }\n    }\n    int main(int argc, char* argv[])\n    {\n        //邻接矩阵9*9，节点0~8\n        int a[n][n]={\n        1,1,0,0,1,1,1,1,0,\n        1,1,0,1,0,0,1,1,1,\n        0,0,1,1,0,1,1,0,1,\n        0,1,1,1,1,1,1,0,0,\n        1,0,0,1,1,0,1,1,0,\n        1,0,1,1,0,1,1,1,1,\n        1,1,1,1,1,1,1,0,1,\n        1,1,0,0,1,1,0,1,1,\n        0,1,1,0,0,1,1,1,1\n    };\n    for(int i=0;i<n;i++)\n    {\n        cout<<i<<\":\";\n        for(int j=0;j<n;j++)\n        {\n            if(a[i][j]!=0&&i!=j)\n            {\n                cout<<j;\n            }\n        }\n        cout<<endl;\n    }\n    cout<<\"广度优先遍历：\"<<endl;\n    BFS(a,n);\n    cout<<endl;\n    memset(visit,0,sizeof(visit));\n    cout<<\"深度优先遍历：\"<<endl;\n    DFS(a,0);\n    return 0;\n    }\n ```","source":"_posts/图的遍历算法———BFS和DFS算法.md","raw":"---\ntitle: 图的遍历算法———BFS和DFS算法\ntags: []\ndate: 2014-06-20 08:00:00\n---\n\n### 深度优先遍历和广度优先遍历\n从图的某顶点出发，访问图中所有顶点，并且每个顶点仅访问一次。图中可能有回路，遍历可能沿回路又回到已遍历过的结点。\n为避免同一顶点被多次访问，必须为每个被访问的顶点作一标志。为此引入一辅助数组,记录每个顶点是否被访问过。\n\n#### 1.使用邻接表来储存图的节点关系\n\n![邻接表](/assets/images/Adjlist.png)\n\n#### 2. 深度优先遍历\n  \n  思路:从图的某一顶点V0出发，访问此顶点；然后依次从V0的未被访问的邻接点出发，深度优先遍历图，直至图中所有和V0相通的顶点都被访问到；\n\n  若此时图中尚有顶点未被访问，则另选图中一个未被访问的顶点作起点，重复上述过程，直至图中所有顶点都被访问为止\n\n![邻接表](/assets/images/Dft.png)\n    \n#### 3.广度优先遍历\n\n  思路：从图中的某个顶点V0出发，并在访问此顶点之后依次访问V0的所有未被访问过的邻接点，之后按这些顶点被访问的先后次序依次访问它们的邻接点，直至图中所有和V0有路径相通的顶点都被访问到。\n\n  若此时图中尚有顶点未被访问，则另选图中一个未曾被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止\n\n![邻接表](/assets/images/Bft.png)\n\n#### 4.BFS和DFS算法实现c++版\n\n``` c++\n\n    #include<iostream>\n    #include<queue>\n    #include<memory.h>\n    using namespace std;\n    const int n=9;\n    int visit[100];//访问标志\n    void BFS(int a[][n] , int n) //宽度优先遍历\n    {\n      queue<int> g;\n      int i;\n      memset(visit,0,sizeof(visit));\n      g.push(0);\n      cout<<0<<\" \";\n      visit[0]=1;\n      while(!g.empty())\n      {\n         int vexnum=g.front();\n        g.pop();\n        for(i=0;i<n;i++)\n        {\n           if(a[vexnum][i]!=0&&!visit[i])\n           {\n               g.push(i);\n               visit[i]=1;//设置进栈标志\n               cout<<i<<\" \";\n           }\n        }\n      }\n    }\n    void DFS(int a[][n], int v)\n    {\n        visit[v]=1;\n        cout<<v<<\" \";\n        for(int i=0;i<n;i++)\n        {\n            if(a[v][i]!=0&&!visit[i])\n            {\n                DFS(a, i);\n            }\n        }\n    }\n    int main(int argc, char* argv[])\n    {\n        //邻接矩阵9*9，节点0~8\n        int a[n][n]={\n        1,1,0,0,1,1,1,1,0,\n        1,1,0,1,0,0,1,1,1,\n        0,0,1,1,0,1,1,0,1,\n        0,1,1,1,1,1,1,0,0,\n        1,0,0,1,1,0,1,1,0,\n        1,0,1,1,0,1,1,1,1,\n        1,1,1,1,1,1,1,0,1,\n        1,1,0,0,1,1,0,1,1,\n        0,1,1,0,0,1,1,1,1\n    };\n    for(int i=0;i<n;i++)\n    {\n        cout<<i<<\":\";\n        for(int j=0;j<n;j++)\n        {\n            if(a[i][j]!=0&&i!=j)\n            {\n                cout<<j;\n            }\n        }\n        cout<<endl;\n    }\n    cout<<\"广度优先遍历：\"<<endl;\n    BFS(a,n);\n    cout<<endl;\n    memset(visit,0,sizeof(visit));\n    cout<<\"深度优先遍历：\"<<endl;\n    DFS(a,0);\n    return 0;\n    }\n ```","slug":"图的遍历算法———BFS和DFS算法","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwtl001r2o5p74ywfp02","content":"<h3 id=\"深度优先遍历和广度优先遍历\"><a href=\"#深度优先遍历和广度优先遍历\" class=\"headerlink\" title=\"深度优先遍历和广度优先遍历\"></a>深度优先遍历和广度优先遍历</h3><p>从图的某顶点出发，访问图中所有顶点，并且每个顶点仅访问一次。图中可能有回路，遍历可能沿回路又回到已遍历过的结点。<br>为避免同一顶点被多次访问，必须为每个被访问的顶点作一标志。为此引入一辅助数组,记录每个顶点是否被访问过。</p>\n<h4 id=\"1-使用邻接表来储存图的节点关系\"><a href=\"#1-使用邻接表来储存图的节点关系\" class=\"headerlink\" title=\"1.使用邻接表来储存图的节点关系\"></a>1.使用邻接表来储存图的节点关系</h4><p><img src=\"/assets/images/Adjlist.png\" alt=\"邻接表\"></p>\n<h4 id=\"2-深度优先遍历\"><a href=\"#2-深度优先遍历\" class=\"headerlink\" title=\"2. 深度优先遍历\"></a>2. 深度优先遍历</h4><p>  思路:从图的某一顶点V0出发，访问此顶点；然后依次从V0的未被访问的邻接点出发，深度优先遍历图，直至图中所有和V0相通的顶点都被访问到；</p>\n<p>  若此时图中尚有顶点未被访问，则另选图中一个未被访问的顶点作起点，重复上述过程，直至图中所有顶点都被访问为止</p>\n<p><img src=\"/assets/images/Dft.png\" alt=\"邻接表\"></p>\n<h4 id=\"3-广度优先遍历\"><a href=\"#3-广度优先遍历\" class=\"headerlink\" title=\"3.广度优先遍历\"></a>3.广度优先遍历</h4><p>  思路：从图中的某个顶点V0出发，并在访问此顶点之后依次访问V0的所有未被访问过的邻接点，之后按这些顶点被访问的先后次序依次访问它们的邻接点，直至图中所有和V0有路径相通的顶点都被访问到。</p>\n<p>  若此时图中尚有顶点未被访问，则另选图中一个未曾被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止</p>\n<p><img src=\"/assets/images/Bft.png\" alt=\"邻接表\"></p>\n<h4 id=\"4-BFS和DFS算法实现c-版\"><a href=\"#4-BFS和DFS算法实现c-版\" class=\"headerlink\" title=\"4.BFS和DFS算法实现c++版\"></a>4.BFS和DFS算法实现c++版</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;memory.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> n=<span class=\"number\">9</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> visit[<span class=\"number\">100</span>];<span class=\"comment\">//访问标志</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BFS</span><span class=\"params\">(<span class=\"keyword\">int</span> a[][n] , <span class=\"keyword\">int</span> n)</span> <span class=\"comment\">//宽度优先遍历</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; g;</div><div class=\"line\">  <span class=\"keyword\">int</span> i;</div><div class=\"line\">  <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(visit));</div><div class=\"line\">  g.push(<span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"string\">\" \"</span>;</div><div class=\"line\">  visit[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span>(!g.empty())</div><div class=\"line\">  &#123;</div><div class=\"line\">     <span class=\"keyword\">int</span> vexnum=g.front();</div><div class=\"line\">    g.pop();</div><div class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span>(a[vexnum][i]!=<span class=\"number\">0</span>&amp;&amp;!visit[i])</div><div class=\"line\">       &#123;</div><div class=\"line\">           g.push(i);</div><div class=\"line\">           visit[i]=<span class=\"number\">1</span>;<span class=\"comment\">//设置进栈标志</span></div><div class=\"line\">           <span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"string\">\" \"</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFS</span><span class=\"params\">(<span class=\"keyword\">int</span> a[][n], <span class=\"keyword\">int</span> v)</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    visit[v]=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;v&lt;&lt;<span class=\"string\">\" \"</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a[v][i]!=<span class=\"number\">0</span>&amp;&amp;!visit[i])</div><div class=\"line\">        &#123;</div><div class=\"line\">            DFS(a, i);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//邻接矩阵9*9，节点0~8</span></div><div class=\"line\">    <span class=\"keyword\">int</span> a[n][n]=&#123;</div><div class=\"line\">    <span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"string\">\":\"</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a[i][j]!=<span class=\"number\">0</span>&amp;&amp;i!=j)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;j;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"广度优先遍历：\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">BFS(a,n);</div><div class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(visit));</div><div class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"深度优先遍历：\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">DFS(a,<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"深度优先遍历和广度优先遍历\"><a href=\"#深度优先遍历和广度优先遍历\" class=\"headerlink\" title=\"深度优先遍历和广度优先遍历\"></a>深度优先遍历和广度优先遍历</h3><p>从图的某顶点出发，访问图中所有顶点，并且每个顶点仅访问一次。图中可能有回路，遍历可能沿回路又回到已遍历过的结点。<br>为避免同一顶点被多次访问，必须为每个被访问的顶点作一标志。为此引入一辅助数组,记录每个顶点是否被访问过。</p>\n<h4 id=\"1-使用邻接表来储存图的节点关系\"><a href=\"#1-使用邻接表来储存图的节点关系\" class=\"headerlink\" title=\"1.使用邻接表来储存图的节点关系\"></a>1.使用邻接表来储存图的节点关系</h4><p><img src=\"/assets/images/Adjlist.png\" alt=\"邻接表\"></p>\n<h4 id=\"2-深度优先遍历\"><a href=\"#2-深度优先遍历\" class=\"headerlink\" title=\"2. 深度优先遍历\"></a>2. 深度优先遍历</h4><p>  思路:从图的某一顶点V0出发，访问此顶点；然后依次从V0的未被访问的邻接点出发，深度优先遍历图，直至图中所有和V0相通的顶点都被访问到；</p>\n<p>  若此时图中尚有顶点未被访问，则另选图中一个未被访问的顶点作起点，重复上述过程，直至图中所有顶点都被访问为止</p>\n<p><img src=\"/assets/images/Dft.png\" alt=\"邻接表\"></p>\n<h4 id=\"3-广度优先遍历\"><a href=\"#3-广度优先遍历\" class=\"headerlink\" title=\"3.广度优先遍历\"></a>3.广度优先遍历</h4><p>  思路：从图中的某个顶点V0出发，并在访问此顶点之后依次访问V0的所有未被访问过的邻接点，之后按这些顶点被访问的先后次序依次访问它们的邻接点，直至图中所有和V0有路径相通的顶点都被访问到。</p>\n<p>  若此时图中尚有顶点未被访问，则另选图中一个未曾被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止</p>\n<p><img src=\"/assets/images/Bft.png\" alt=\"邻接表\"></p>\n<h4 id=\"4-BFS和DFS算法实现c-版\"><a href=\"#4-BFS和DFS算法实现c-版\" class=\"headerlink\" title=\"4.BFS和DFS算法实现c++版\"></a>4.BFS和DFS算法实现c++版</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;memory.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> n=<span class=\"number\">9</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> visit[<span class=\"number\">100</span>];<span class=\"comment\">//访问标志</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BFS</span><span class=\"params\">(<span class=\"keyword\">int</span> a[][n] , <span class=\"keyword\">int</span> n)</span> <span class=\"comment\">//宽度优先遍历</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">  <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; g;</div><div class=\"line\">  <span class=\"keyword\">int</span> i;</div><div class=\"line\">  <span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(visit));</div><div class=\"line\">  g.push(<span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"string\">\" \"</span>;</div><div class=\"line\">  visit[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span>(!g.empty())</div><div class=\"line\">  &#123;</div><div class=\"line\">     <span class=\"keyword\">int</span> vexnum=g.front();</div><div class=\"line\">    g.pop();</div><div class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">       <span class=\"keyword\">if</span>(a[vexnum][i]!=<span class=\"number\">0</span>&amp;&amp;!visit[i])</div><div class=\"line\">       &#123;</div><div class=\"line\">           g.push(i);</div><div class=\"line\">           visit[i]=<span class=\"number\">1</span>;<span class=\"comment\">//设置进栈标志</span></div><div class=\"line\">           <span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"string\">\" \"</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFS</span><span class=\"params\">(<span class=\"keyword\">int</span> a[][n], <span class=\"keyword\">int</span> v)</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    visit[v]=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;v&lt;&lt;<span class=\"string\">\" \"</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a[v][i]!=<span class=\"number\">0</span>&amp;&amp;!visit[i])</div><div class=\"line\">        &#123;</div><div class=\"line\">            DFS(a, i);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//邻接矩阵9*9，节点0~8</span></div><div class=\"line\">    <span class=\"keyword\">int</span> a[n][n]=&#123;</div><div class=\"line\">    <span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;i&lt;&lt;<span class=\"string\">\":\"</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a[i][j]!=<span class=\"number\">0</span>&amp;&amp;i!=j)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;j;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"广度优先遍历：\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">BFS(a,n);</div><div class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\"><span class=\"built_in\">memset</span>(visit,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(visit));</div><div class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"深度优先遍历：\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">DFS(a,<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"图论之最短路算法","date":"2014-06-21T00:00:00.000Z","_content":"\n### Dijkstra算法\n\nDijkstra算法解决了有向加权图的最短路径问题，该算法的条件是该图所有边的权值非负，对于每条边(u,v) E，w(u,v)>=0。\nDijkstra算法中设置了一结点集合S，从源结点s到集合S中结点的最终最短路径的权均已确定，即对所有结点v S，有d[v]= (s,v)。\n算法反复挑选出其最短路径估计为最小的结点u V-S，把u插入集合S中，并对离开u的所有边进行松弛。\n在下列算法实现中设置了优先队列Q，该队列包含所有属于V-S的结点，且队列中各结点都有相应的d值。\nDijkstra算法如图所示对边进行松弛操作，最左结点为源结点，每个结点内为其最短路径估计。\n\n\n![邻接表](/assets/images/Djs.png)\n\n因为Dijkstra算法总是在集合V-S中选择“最轻”或“最近”的结点插入集合S中，因此我们说它使用了贪心策略。需要指出的是，贪心策略并非总能获得全局意义上的最理想结果。但Dijkstra算法确实计算出了最短路径。\n\n### Bellman—Ford算法\n\nBellman-Ford算法能在更一般的情况下解决单源点最短路径问题，在该算法下边的权可以为负。正如Dijkstra算法一样，Bellman-Ford算法运用了松弛技术，对每一结点vV，逐步减小从源s到v的最短路径的估计值d[v]直至其达到实际最短路径的权(s,v)，如果图中存在负权回路，算法将会报告最短路不存在。\n\n源结点为z。每个结点内为该结点的d值，阴影覆盖的边说明了值。在该实例中，Bellman-Ford算法返回TRUE。在进行了通常的初始化后，算法对图的边执行|V|-1次操作。每次均为第2-4行For循环的一次迭代，在迭代过程中对图的每条边松弛一次，图(b)-(c)说明了全部四次操作的每一次后算法的状态,在进行完|V|-1次操作后,算法5-8行检查是否存在负权的回路并返回正确的布尔值。\n\nBellman-Ford算法的运行时间为O(VE)。因为第1行的初始化占用时间为O(V)，第2-4行对边进行的|V|-1次操作的每一次运行时间为O(E)，第5-7行的For循环的运行时间为O(E)。\n\n![邻接表](/assets/images/Ford.png)\n\nBellman-Ford算法的思想基于以下事实：“两点间如果有最短路，那么每个结点最多经过一次。也就是说，这条路不超过n-1条边。”（如果一个结点经过了两次，那么我们走了一个圈。如果这个圈的权为正，显然不划算；如果是负圈，那么最短路不存在；如果是零圈，去掉不影响最优值）\n\n### SPFA算法\n\n求单源最短路的SPFA算法的全称是：Shortest Path Faster Algorithm。\n从名字我们就可以看出，这种算法在效率上一定有过人之处。\n\n很多时候，给定的图存在负权边，这时类似Dijkstra等算法便没有了用武之地，而Bellman-Ford算法的复杂度又过高，SPFA算法便派上用场了。\n\n简洁起见，我们约定有向加权图G不存在负权回路，即最短路径一定存在。当然，我们可以在执行该算法前做一次拓扑排序，以判断是否存在负权回路。\n\n和上文一样，我们用数组d记录每个结点的最短路径估计值，而且用邻接表来存储图G。我们采取的方法是动态逼近法：设立一个先进先出的队列用来保存待优化的结点，优化时每次取出队首结点u，并且用u点当前的最短路径估计值对离开u点所指向的结点v进行松弛操作，如果v点的最短路径估计值有所调整，且v点不在当前的队列中，就将v点放入队尾。这样不断从队\n列为空。\n\n### 案例分析\n\n畅通工程续 SPFA||dijkstra||floyd\n\n题目链接：http://acm.hdu.edu.cn/showproblem.php?pid=1874\n\nDijkstra算法实现c++代码\n\n    #include <iostream>\n    #include<memory.h>\n    using namespace std;\n    #define MAX 200\n    #define INF 1000000\n    int map[MAX][MAX];\n    int dist[MAX];\n    int visit[MAX];\n    int n,m;\n    void dfs(int s)\n    {\n       int vexnum=s;\n        int i,j;\n        memset(visit,0,sizeof(visit));\n        dist[vexnum]=0;\n        visit[vexnum]=1;\n        for(i=0;i<n;i++)\n        {\n           for(j=0;j<n;j++)\n           {\n              if(!visit[j]&&dist[j]>(dist[vexnum]+map[vexnum][j]))\n              {\n                 dist[j]=dist[vexnum]+map[vexnum][j];\n              }\n         }\n         int min=INF;\n         for(j=0;j<n;j++)\n         {\n             if(!visit[j]&&dist[j]<min)\n             {\n                 min=dist[vexnum=j];\n             }\n         }\n         visit[vexnum]=1;\n       }\n    }\n    int main()\n    {\n      int i,j;\n      int a,b,x;\n      int s,t;\n      while(cin>>n>>m)\n      {\n        for(i=0;i<n;i++)\n        {\n            dist[i]=INF;\n            for(int j=0;j<n;j++)\n                map[i][j]=INF;\n        }\n        for(i=0;i<m;i++)\n        {\n            cin>>a>>b>>x;\n            if(map[a][b]>x)\n            {\n                map[a][b]=map[b][a]=x;\n            }\n        }\n        cin>>s>>t;\n        dfs(s);\n        if(dist[t]!=INF)\n        {\n            cout<<dist[t]<<endl;\n        }\n        else\n        {\n            cout<<\"-1\"<<endl;\n        }\n     }\n    return 0;\n    }\n\n \n### 案例分析：Wormholes\n\n题目链接http://poj.org/problem?id=3259\n\nSPFA算法+邻接表实现版本：\n\n    #include<iostream>\n    #include<stdio.h>\n    using namespace std;\n    struct node\n    {\n      int u,v,w;\n    }edge[6000];\n    int dis[505];\n    int n,m,w,index;\n    const int inf=0x7ffffff;\n    void add(int u,int v,int c)\n    {\n        index++;\n        edge[index].u=u;\n        edge[index].v=v;\n        edge[index].w=c;\n    }\n    bool bellman()\n    {\n      int u,v,w,i,j,flag;\n      for(i=1;i<=n;i++)\n      {\n          dis[i]=inf;\n      }\n      dis[1]=0;flag=0;\n      for(i=1;i<=n;i++)\n      {\n        for(j=1;j<=index;j++)\n        {\n            if(dis[edge[j].v]>dis[edge[j].u]+edge[j].w)\n            {\n              dis[edge[j].v]=dis[edge[j].u]+edge[j].w;\n            }\n       }\n      }\n      for(i=1;i<=index;i++)\n          if(dis[edge[i].v]>dis[edge[i].u]+edge[i].w) return true;\n      return false;\n      }\n    int main()\n    {\n        int i,j,t,u,v,c;\n        scanf(\"%d\",&t);\n        while(t--)\n        {\n           scanf(\"%d%d%d\",&n,&m,&w);\n          index=0;\n          for(i=0;i<m;i++)\n          {\n            scanf(\"%d%d%d\",&u,&v,&c);\n            add(u,v,c);\n            add(v,u,c);\n          }\n          for(i=0;i<w;i++)\n          {\n            scanf(\"%d%d%d\",&u,&v,&c);\n            add(u,v,-1*c);\n          }\n          if(bellman()) printf(\"YES\\n\");\n              else printf(\"NO\\n\");\n          }\n          return 0;\n    }\n\n### SPFA算法+队列实现版本：\n\n    #include<cstdio>\n    #include<string>\n    #include<queue>\n    using namespace std;\n    const int INF=9999999;\n    const int MAXN=520;\n    const int MAXM=5200;\n    struct edge\n    {\n      int to;\n      int val;\n      int next;\n    }e[MAXM];\n    int len,head[MAXN];\n    int dis[MAXN];\n    int n,m,w;\n    bool SPFA()\n    {\n        for(int i=1;i<=n;i++)\n        dis[i]=INF;\n        bool vis[MAXN]={0};\n        int cnt[MAXN]={0};\n        int cur=1;\n        queue<int> q;\n        q.push(cur);\n        vis[cur]=true;\n        cnt[cur]=1;\n        dis[cur]=0;\n        while(!q.empty())  \n        {\n           cur=q.front();\n            q.pop();\n            vis[cur]=false;\n            for(int i=head[cur]  ;i!=-1; i=e[i].next)\n            {\n                int id=e[i].to;\n                if( dis[cur] + e[i].val < dis[ id ] )\n                {\n                  dis[ id ] = dis[cur] + e[ i ].val;\n                  if(!vis[id])\n                  {\n                    cnt[id]++;\n                    vis[id]=true;\n                    q.push(id);\n                    if(cnt[cur]>n)\n                    return true;\n                  }\n                }\n            }\n        }\n        return false;\n    }\n    void add(int from,int to,int val)\n    {\n      e[len].to=to;\n      e[len].val=val;\n      e[len].next= head[from];\n      head[from]=len++;\n    }\n    int main()\n    {\n      int T;\n      scanf(\"%d\",&T);\n      while(T--)\n      {\n        memset(head,-1,sizeof(head));\n        len=0;\n        scanf(\"%d%d%d\",&n,&m,&w);\n        for(int i=0;i<m;i++)\n        {\n          int from,to,val;\n          scanf(\"%d%d%d\",&from,&to,&val);\n          add(from,to,val);\n          add(to,from,val); //双向的\n        }\n        for(int i=0;i<w;i++)\n        {\n          int from,to,val;\n          scanf(\"%d%d%d\",&from,&to,&val);\n          add(from,to,-val);\n        }\n        if( SPFA())\n          puts(\"YES\");\n        else\n          puts(\"NO\");\n      }\n      return 0;\n    }\n","source":"_posts/图论之最短路算法.md","raw":"---\ntitle: 图论之最短路算法\ntags: []\ndate: 2014-06-21 08:00:00\n---\n\n### Dijkstra算法\n\nDijkstra算法解决了有向加权图的最短路径问题，该算法的条件是该图所有边的权值非负，对于每条边(u,v) E，w(u,v)>=0。\nDijkstra算法中设置了一结点集合S，从源结点s到集合S中结点的最终最短路径的权均已确定，即对所有结点v S，有d[v]= (s,v)。\n算法反复挑选出其最短路径估计为最小的结点u V-S，把u插入集合S中，并对离开u的所有边进行松弛。\n在下列算法实现中设置了优先队列Q，该队列包含所有属于V-S的结点，且队列中各结点都有相应的d值。\nDijkstra算法如图所示对边进行松弛操作，最左结点为源结点，每个结点内为其最短路径估计。\n\n\n![邻接表](/assets/images/Djs.png)\n\n因为Dijkstra算法总是在集合V-S中选择“最轻”或“最近”的结点插入集合S中，因此我们说它使用了贪心策略。需要指出的是，贪心策略并非总能获得全局意义上的最理想结果。但Dijkstra算法确实计算出了最短路径。\n\n### Bellman—Ford算法\n\nBellman-Ford算法能在更一般的情况下解决单源点最短路径问题，在该算法下边的权可以为负。正如Dijkstra算法一样，Bellman-Ford算法运用了松弛技术，对每一结点vV，逐步减小从源s到v的最短路径的估计值d[v]直至其达到实际最短路径的权(s,v)，如果图中存在负权回路，算法将会报告最短路不存在。\n\n源结点为z。每个结点内为该结点的d值，阴影覆盖的边说明了值。在该实例中，Bellman-Ford算法返回TRUE。在进行了通常的初始化后，算法对图的边执行|V|-1次操作。每次均为第2-4行For循环的一次迭代，在迭代过程中对图的每条边松弛一次，图(b)-(c)说明了全部四次操作的每一次后算法的状态,在进行完|V|-1次操作后,算法5-8行检查是否存在负权的回路并返回正确的布尔值。\n\nBellman-Ford算法的运行时间为O(VE)。因为第1行的初始化占用时间为O(V)，第2-4行对边进行的|V|-1次操作的每一次运行时间为O(E)，第5-7行的For循环的运行时间为O(E)。\n\n![邻接表](/assets/images/Ford.png)\n\nBellman-Ford算法的思想基于以下事实：“两点间如果有最短路，那么每个结点最多经过一次。也就是说，这条路不超过n-1条边。”（如果一个结点经过了两次，那么我们走了一个圈。如果这个圈的权为正，显然不划算；如果是负圈，那么最短路不存在；如果是零圈，去掉不影响最优值）\n\n### SPFA算法\n\n求单源最短路的SPFA算法的全称是：Shortest Path Faster Algorithm。\n从名字我们就可以看出，这种算法在效率上一定有过人之处。\n\n很多时候，给定的图存在负权边，这时类似Dijkstra等算法便没有了用武之地，而Bellman-Ford算法的复杂度又过高，SPFA算法便派上用场了。\n\n简洁起见，我们约定有向加权图G不存在负权回路，即最短路径一定存在。当然，我们可以在执行该算法前做一次拓扑排序，以判断是否存在负权回路。\n\n和上文一样，我们用数组d记录每个结点的最短路径估计值，而且用邻接表来存储图G。我们采取的方法是动态逼近法：设立一个先进先出的队列用来保存待优化的结点，优化时每次取出队首结点u，并且用u点当前的最短路径估计值对离开u点所指向的结点v进行松弛操作，如果v点的最短路径估计值有所调整，且v点不在当前的队列中，就将v点放入队尾。这样不断从队\n列为空。\n\n### 案例分析\n\n畅通工程续 SPFA||dijkstra||floyd\n\n题目链接：http://acm.hdu.edu.cn/showproblem.php?pid=1874\n\nDijkstra算法实现c++代码\n\n    #include <iostream>\n    #include<memory.h>\n    using namespace std;\n    #define MAX 200\n    #define INF 1000000\n    int map[MAX][MAX];\n    int dist[MAX];\n    int visit[MAX];\n    int n,m;\n    void dfs(int s)\n    {\n       int vexnum=s;\n        int i,j;\n        memset(visit,0,sizeof(visit));\n        dist[vexnum]=0;\n        visit[vexnum]=1;\n        for(i=0;i<n;i++)\n        {\n           for(j=0;j<n;j++)\n           {\n              if(!visit[j]&&dist[j]>(dist[vexnum]+map[vexnum][j]))\n              {\n                 dist[j]=dist[vexnum]+map[vexnum][j];\n              }\n         }\n         int min=INF;\n         for(j=0;j<n;j++)\n         {\n             if(!visit[j]&&dist[j]<min)\n             {\n                 min=dist[vexnum=j];\n             }\n         }\n         visit[vexnum]=1;\n       }\n    }\n    int main()\n    {\n      int i,j;\n      int a,b,x;\n      int s,t;\n      while(cin>>n>>m)\n      {\n        for(i=0;i<n;i++)\n        {\n            dist[i]=INF;\n            for(int j=0;j<n;j++)\n                map[i][j]=INF;\n        }\n        for(i=0;i<m;i++)\n        {\n            cin>>a>>b>>x;\n            if(map[a][b]>x)\n            {\n                map[a][b]=map[b][a]=x;\n            }\n        }\n        cin>>s>>t;\n        dfs(s);\n        if(dist[t]!=INF)\n        {\n            cout<<dist[t]<<endl;\n        }\n        else\n        {\n            cout<<\"-1\"<<endl;\n        }\n     }\n    return 0;\n    }\n\n \n### 案例分析：Wormholes\n\n题目链接http://poj.org/problem?id=3259\n\nSPFA算法+邻接表实现版本：\n\n    #include<iostream>\n    #include<stdio.h>\n    using namespace std;\n    struct node\n    {\n      int u,v,w;\n    }edge[6000];\n    int dis[505];\n    int n,m,w,index;\n    const int inf=0x7ffffff;\n    void add(int u,int v,int c)\n    {\n        index++;\n        edge[index].u=u;\n        edge[index].v=v;\n        edge[index].w=c;\n    }\n    bool bellman()\n    {\n      int u,v,w,i,j,flag;\n      for(i=1;i<=n;i++)\n      {\n          dis[i]=inf;\n      }\n      dis[1]=0;flag=0;\n      for(i=1;i<=n;i++)\n      {\n        for(j=1;j<=index;j++)\n        {\n            if(dis[edge[j].v]>dis[edge[j].u]+edge[j].w)\n            {\n              dis[edge[j].v]=dis[edge[j].u]+edge[j].w;\n            }\n       }\n      }\n      for(i=1;i<=index;i++)\n          if(dis[edge[i].v]>dis[edge[i].u]+edge[i].w) return true;\n      return false;\n      }\n    int main()\n    {\n        int i,j,t,u,v,c;\n        scanf(\"%d\",&t);\n        while(t--)\n        {\n           scanf(\"%d%d%d\",&n,&m,&w);\n          index=0;\n          for(i=0;i<m;i++)\n          {\n            scanf(\"%d%d%d\",&u,&v,&c);\n            add(u,v,c);\n            add(v,u,c);\n          }\n          for(i=0;i<w;i++)\n          {\n            scanf(\"%d%d%d\",&u,&v,&c);\n            add(u,v,-1*c);\n          }\n          if(bellman()) printf(\"YES\\n\");\n              else printf(\"NO\\n\");\n          }\n          return 0;\n    }\n\n### SPFA算法+队列实现版本：\n\n    #include<cstdio>\n    #include<string>\n    #include<queue>\n    using namespace std;\n    const int INF=9999999;\n    const int MAXN=520;\n    const int MAXM=5200;\n    struct edge\n    {\n      int to;\n      int val;\n      int next;\n    }e[MAXM];\n    int len,head[MAXN];\n    int dis[MAXN];\n    int n,m,w;\n    bool SPFA()\n    {\n        for(int i=1;i<=n;i++)\n        dis[i]=INF;\n        bool vis[MAXN]={0};\n        int cnt[MAXN]={0};\n        int cur=1;\n        queue<int> q;\n        q.push(cur);\n        vis[cur]=true;\n        cnt[cur]=1;\n        dis[cur]=0;\n        while(!q.empty())  \n        {\n           cur=q.front();\n            q.pop();\n            vis[cur]=false;\n            for(int i=head[cur]  ;i!=-1; i=e[i].next)\n            {\n                int id=e[i].to;\n                if( dis[cur] + e[i].val < dis[ id ] )\n                {\n                  dis[ id ] = dis[cur] + e[ i ].val;\n                  if(!vis[id])\n                  {\n                    cnt[id]++;\n                    vis[id]=true;\n                    q.push(id);\n                    if(cnt[cur]>n)\n                    return true;\n                  }\n                }\n            }\n        }\n        return false;\n    }\n    void add(int from,int to,int val)\n    {\n      e[len].to=to;\n      e[len].val=val;\n      e[len].next= head[from];\n      head[from]=len++;\n    }\n    int main()\n    {\n      int T;\n      scanf(\"%d\",&T);\n      while(T--)\n      {\n        memset(head,-1,sizeof(head));\n        len=0;\n        scanf(\"%d%d%d\",&n,&m,&w);\n        for(int i=0;i<m;i++)\n        {\n          int from,to,val;\n          scanf(\"%d%d%d\",&from,&to,&val);\n          add(from,to,val);\n          add(to,from,val); //双向的\n        }\n        for(int i=0;i<w;i++)\n        {\n          int from,to,val;\n          scanf(\"%d%d%d\",&from,&to,&val);\n          add(from,to,-val);\n        }\n        if( SPFA())\n          puts(\"YES\");\n        else\n          puts(\"NO\");\n      }\n      return 0;\n    }\n","slug":"图论之最短路算法","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwtn001t2o5p8n33aro7","content":"<h3 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a>Dijkstra算法</h3><p>Dijkstra算法解决了有向加权图的最短路径问题，该算法的条件是该图所有边的权值非负，对于每条边(u,v) E，w(u,v)&gt;=0。<br>Dijkstra算法中设置了一结点集合S，从源结点s到集合S中结点的最终最短路径的权均已确定，即对所有结点v S，有d[v]= (s,v)。<br>算法反复挑选出其最短路径估计为最小的结点u V-S，把u插入集合S中，并对离开u的所有边进行松弛。<br>在下列算法实现中设置了优先队列Q，该队列包含所有属于V-S的结点，且队列中各结点都有相应的d值。<br>Dijkstra算法如图所示对边进行松弛操作，最左结点为源结点，每个结点内为其最短路径估计。</p>\n<p><img src=\"/assets/images/Djs.png\" alt=\"邻接表\"></p>\n<p>因为Dijkstra算法总是在集合V-S中选择“最轻”或“最近”的结点插入集合S中，因此我们说它使用了贪心策略。需要指出的是，贪心策略并非总能获得全局意义上的最理想结果。但Dijkstra算法确实计算出了最短路径。</p>\n<h3 id=\"Bellman—Ford算法\"><a href=\"#Bellman—Ford算法\" class=\"headerlink\" title=\"Bellman—Ford算法\"></a>Bellman—Ford算法</h3><p>Bellman-Ford算法能在更一般的情况下解决单源点最短路径问题，在该算法下边的权可以为负。正如Dijkstra算法一样，Bellman-Ford算法运用了松弛技术，对每一结点vV，逐步减小从源s到v的最短路径的估计值d[v]直至其达到实际最短路径的权(s,v)，如果图中存在负权回路，算法将会报告最短路不存在。</p>\n<p>源结点为z。每个结点内为该结点的d值，阴影覆盖的边说明了值。在该实例中，Bellman-Ford算法返回TRUE。在进行了通常的初始化后，算法对图的边执行|V|-1次操作。每次均为第2-4行For循环的一次迭代，在迭代过程中对图的每条边松弛一次，图(b)-(c)说明了全部四次操作的每一次后算法的状态,在进行完|V|-1次操作后,算法5-8行检查是否存在负权的回路并返回正确的布尔值。</p>\n<p>Bellman-Ford算法的运行时间为O(VE)。因为第1行的初始化占用时间为O(V)，第2-4行对边进行的|V|-1次操作的每一次运行时间为O(E)，第5-7行的For循环的运行时间为O(E)。</p>\n<p><img src=\"/assets/images/Ford.png\" alt=\"邻接表\"></p>\n<p>Bellman-Ford算法的思想基于以下事实：“两点间如果有最短路，那么每个结点最多经过一次。也就是说，这条路不超过n-1条边。”（如果一个结点经过了两次，那么我们走了一个圈。如果这个圈的权为正，显然不划算；如果是负圈，那么最短路不存在；如果是零圈，去掉不影响最优值）</p>\n<h3 id=\"SPFA算法\"><a href=\"#SPFA算法\" class=\"headerlink\" title=\"SPFA算法\"></a>SPFA算法</h3><p>求单源最短路的SPFA算法的全称是：Shortest Path Faster Algorithm。<br>从名字我们就可以看出，这种算法在效率上一定有过人之处。</p>\n<p>很多时候，给定的图存在负权边，这时类似Dijkstra等算法便没有了用武之地，而Bellman-Ford算法的复杂度又过高，SPFA算法便派上用场了。</p>\n<p>简洁起见，我们约定有向加权图G不存在负权回路，即最短路径一定存在。当然，我们可以在执行该算法前做一次拓扑排序，以判断是否存在负权回路。</p>\n<p>和上文一样，我们用数组d记录每个结点的最短路径估计值，而且用邻接表来存储图G。我们采取的方法是动态逼近法：设立一个先进先出的队列用来保存待优化的结点，优化时每次取出队首结点u，并且用u点当前的最短路径估计值对离开u点所指向的结点v进行松弛操作，如果v点的最短路径估计值有所调整，且v点不在当前的队列中，就将v点放入队尾。这样不断从队<br>列为空。</p>\n<h3 id=\"案例分析\"><a href=\"#案例分析\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h3><p>畅通工程续 SPFA||dijkstra||floyd</p>\n<p>题目链接：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1874\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=1874</a></p>\n<p>Dijkstra算法实现c++代码</p>\n<pre><code>#include &lt;iostream&gt;\n#include&lt;memory.h&gt;\nusing namespace std;\n#define MAX 200\n#define INF 1000000\nint map[MAX][MAX];\nint dist[MAX];\nint visit[MAX];\nint n,m;\nvoid dfs(int s)\n{\n   int vexnum=s;\n    int i,j;\n    memset(visit,0,sizeof(visit));\n    dist[vexnum]=0;\n    visit[vexnum]=1;\n    for(i=0;i&lt;n;i++)\n    {\n       for(j=0;j&lt;n;j++)\n       {\n          if(!visit[j]&amp;&amp;dist[j]&gt;(dist[vexnum]+map[vexnum][j]))\n          {\n             dist[j]=dist[vexnum]+map[vexnum][j];\n          }\n     }\n     int min=INF;\n     for(j=0;j&lt;n;j++)\n     {\n         if(!visit[j]&amp;&amp;dist[j]&lt;min)\n         {\n             min=dist[vexnum=j];\n         }\n     }\n     visit[vexnum]=1;\n   }\n}\nint main()\n{\n  int i,j;\n  int a,b,x;\n  int s,t;\n  while(cin&gt;&gt;n&gt;&gt;m)\n  {\n    for(i=0;i&lt;n;i++)\n    {\n        dist[i]=INF;\n        for(int j=0;j&lt;n;j++)\n            map[i][j]=INF;\n    }\n    for(i=0;i&lt;m;i++)\n    {\n        cin&gt;&gt;a&gt;&gt;b&gt;&gt;x;\n        if(map[a][b]&gt;x)\n        {\n            map[a][b]=map[b][a]=x;\n        }\n    }\n    cin&gt;&gt;s&gt;&gt;t;\n    dfs(s);\n    if(dist[t]!=INF)\n    {\n        cout&lt;&lt;dist[t]&lt;&lt;endl;\n    }\n    else\n    {\n        cout&lt;&lt;&quot;-1&quot;&lt;&lt;endl;\n    }\n }\nreturn 0;\n}\n</code></pre><h3 id=\"案例分析：Wormholes\"><a href=\"#案例分析：Wormholes\" class=\"headerlink\" title=\"案例分析：Wormholes\"></a>案例分析：Wormholes</h3><p>题目链接<a href=\"http://poj.org/problem?id=3259\" target=\"_blank\" rel=\"external\">http://poj.org/problem?id=3259</a></p>\n<p>SPFA算法+邻接表实现版本：</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;stdio.h&gt;\nusing namespace std;\nstruct node\n{\n  int u,v,w;\n}edge[6000];\nint dis[505];\nint n,m,w,index;\nconst int inf=0x7ffffff;\nvoid add(int u,int v,int c)\n{\n    index++;\n    edge[index].u=u;\n    edge[index].v=v;\n    edge[index].w=c;\n}\nbool bellman()\n{\n  int u,v,w,i,j,flag;\n  for(i=1;i&lt;=n;i++)\n  {\n      dis[i]=inf;\n  }\n  dis[1]=0;flag=0;\n  for(i=1;i&lt;=n;i++)\n  {\n    for(j=1;j&lt;=index;j++)\n    {\n        if(dis[edge[j].v]&gt;dis[edge[j].u]+edge[j].w)\n        {\n          dis[edge[j].v]=dis[edge[j].u]+edge[j].w;\n        }\n   }\n  }\n  for(i=1;i&lt;=index;i++)\n      if(dis[edge[i].v]&gt;dis[edge[i].u]+edge[i].w) return true;\n  return false;\n  }\nint main()\n{\n    int i,j,t,u,v,c;\n    scanf(&quot;%d&quot;,&amp;t);\n    while(t--)\n    {\n       scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;w);\n      index=0;\n      for(i=0;i&lt;m;i++)\n      {\n        scanf(&quot;%d%d%d&quot;,&amp;u,&amp;v,&amp;c);\n        add(u,v,c);\n        add(v,u,c);\n      }\n      for(i=0;i&lt;w;i++)\n      {\n        scanf(&quot;%d%d%d&quot;,&amp;u,&amp;v,&amp;c);\n        add(u,v,-1*c);\n      }\n      if(bellman()) printf(&quot;YES\\n&quot;);\n          else printf(&quot;NO\\n&quot;);\n      }\n      return 0;\n}\n</code></pre><h3 id=\"SPFA算法-队列实现版本：\"><a href=\"#SPFA算法-队列实现版本：\" class=\"headerlink\" title=\"SPFA算法+队列实现版本：\"></a>SPFA算法+队列实现版本：</h3><pre><code>#include&lt;cstdio&gt;\n#include&lt;string&gt;\n#include&lt;queue&gt;\nusing namespace std;\nconst int INF=9999999;\nconst int MAXN=520;\nconst int MAXM=5200;\nstruct edge\n{\n  int to;\n  int val;\n  int next;\n}e[MAXM];\nint len,head[MAXN];\nint dis[MAXN];\nint n,m,w;\nbool SPFA()\n{\n    for(int i=1;i&lt;=n;i++)\n    dis[i]=INF;\n    bool vis[MAXN]={0};\n    int cnt[MAXN]={0};\n    int cur=1;\n    queue&lt;int&gt; q;\n    q.push(cur);\n    vis[cur]=true;\n    cnt[cur]=1;\n    dis[cur]=0;\n    while(!q.empty())  \n    {\n       cur=q.front();\n        q.pop();\n        vis[cur]=false;\n        for(int i=head[cur]  ;i!=-1; i=e[i].next)\n        {\n            int id=e[i].to;\n            if( dis[cur] + e[i].val &lt; dis[ id ] )\n            {\n              dis[ id ] = dis[cur] + e[ i ].val;\n              if(!vis[id])\n              {\n                cnt[id]++;\n                vis[id]=true;\n                q.push(id);\n                if(cnt[cur]&gt;n)\n                return true;\n              }\n            }\n        }\n    }\n    return false;\n}\nvoid add(int from,int to,int val)\n{\n  e[len].to=to;\n  e[len].val=val;\n  e[len].next= head[from];\n  head[from]=len++;\n}\nint main()\n{\n  int T;\n  scanf(&quot;%d&quot;,&amp;T);\n  while(T--)\n  {\n    memset(head,-1,sizeof(head));\n    len=0;\n    scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;w);\n    for(int i=0;i&lt;m;i++)\n    {\n      int from,to,val;\n      scanf(&quot;%d%d%d&quot;,&amp;from,&amp;to,&amp;val);\n      add(from,to,val);\n      add(to,from,val); //双向的\n    }\n    for(int i=0;i&lt;w;i++)\n    {\n      int from,to,val;\n      scanf(&quot;%d%d%d&quot;,&amp;from,&amp;to,&amp;val);\n      add(from,to,-val);\n    }\n    if( SPFA())\n      puts(&quot;YES&quot;);\n    else\n      puts(&quot;NO&quot;);\n  }\n  return 0;\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a>Dijkstra算法</h3><p>Dijkstra算法解决了有向加权图的最短路径问题，该算法的条件是该图所有边的权值非负，对于每条边(u,v) E，w(u,v)&gt;=0。<br>Dijkstra算法中设置了一结点集合S，从源结点s到集合S中结点的最终最短路径的权均已确定，即对所有结点v S，有d[v]= (s,v)。<br>算法反复挑选出其最短路径估计为最小的结点u V-S，把u插入集合S中，并对离开u的所有边进行松弛。<br>在下列算法实现中设置了优先队列Q，该队列包含所有属于V-S的结点，且队列中各结点都有相应的d值。<br>Dijkstra算法如图所示对边进行松弛操作，最左结点为源结点，每个结点内为其最短路径估计。</p>\n<p><img src=\"/assets/images/Djs.png\" alt=\"邻接表\"></p>\n<p>因为Dijkstra算法总是在集合V-S中选择“最轻”或“最近”的结点插入集合S中，因此我们说它使用了贪心策略。需要指出的是，贪心策略并非总能获得全局意义上的最理想结果。但Dijkstra算法确实计算出了最短路径。</p>\n<h3 id=\"Bellman—Ford算法\"><a href=\"#Bellman—Ford算法\" class=\"headerlink\" title=\"Bellman—Ford算法\"></a>Bellman—Ford算法</h3><p>Bellman-Ford算法能在更一般的情况下解决单源点最短路径问题，在该算法下边的权可以为负。正如Dijkstra算法一样，Bellman-Ford算法运用了松弛技术，对每一结点vV，逐步减小从源s到v的最短路径的估计值d[v]直至其达到实际最短路径的权(s,v)，如果图中存在负权回路，算法将会报告最短路不存在。</p>\n<p>源结点为z。每个结点内为该结点的d值，阴影覆盖的边说明了值。在该实例中，Bellman-Ford算法返回TRUE。在进行了通常的初始化后，算法对图的边执行|V|-1次操作。每次均为第2-4行For循环的一次迭代，在迭代过程中对图的每条边松弛一次，图(b)-(c)说明了全部四次操作的每一次后算法的状态,在进行完|V|-1次操作后,算法5-8行检查是否存在负权的回路并返回正确的布尔值。</p>\n<p>Bellman-Ford算法的运行时间为O(VE)。因为第1行的初始化占用时间为O(V)，第2-4行对边进行的|V|-1次操作的每一次运行时间为O(E)，第5-7行的For循环的运行时间为O(E)。</p>\n<p><img src=\"/assets/images/Ford.png\" alt=\"邻接表\"></p>\n<p>Bellman-Ford算法的思想基于以下事实：“两点间如果有最短路，那么每个结点最多经过一次。也就是说，这条路不超过n-1条边。”（如果一个结点经过了两次，那么我们走了一个圈。如果这个圈的权为正，显然不划算；如果是负圈，那么最短路不存在；如果是零圈，去掉不影响最优值）</p>\n<h3 id=\"SPFA算法\"><a href=\"#SPFA算法\" class=\"headerlink\" title=\"SPFA算法\"></a>SPFA算法</h3><p>求单源最短路的SPFA算法的全称是：Shortest Path Faster Algorithm。<br>从名字我们就可以看出，这种算法在效率上一定有过人之处。</p>\n<p>很多时候，给定的图存在负权边，这时类似Dijkstra等算法便没有了用武之地，而Bellman-Ford算法的复杂度又过高，SPFA算法便派上用场了。</p>\n<p>简洁起见，我们约定有向加权图G不存在负权回路，即最短路径一定存在。当然，我们可以在执行该算法前做一次拓扑排序，以判断是否存在负权回路。</p>\n<p>和上文一样，我们用数组d记录每个结点的最短路径估计值，而且用邻接表来存储图G。我们采取的方法是动态逼近法：设立一个先进先出的队列用来保存待优化的结点，优化时每次取出队首结点u，并且用u点当前的最短路径估计值对离开u点所指向的结点v进行松弛操作，如果v点的最短路径估计值有所调整，且v点不在当前的队列中，就将v点放入队尾。这样不断从队<br>列为空。</p>\n<h3 id=\"案例分析\"><a href=\"#案例分析\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h3><p>畅通工程续 SPFA||dijkstra||floyd</p>\n<p>题目链接：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=1874\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=1874</a></p>\n<p>Dijkstra算法实现c++代码</p>\n<pre><code>#include &lt;iostream&gt;\n#include&lt;memory.h&gt;\nusing namespace std;\n#define MAX 200\n#define INF 1000000\nint map[MAX][MAX];\nint dist[MAX];\nint visit[MAX];\nint n,m;\nvoid dfs(int s)\n{\n   int vexnum=s;\n    int i,j;\n    memset(visit,0,sizeof(visit));\n    dist[vexnum]=0;\n    visit[vexnum]=1;\n    for(i=0;i&lt;n;i++)\n    {\n       for(j=0;j&lt;n;j++)\n       {\n          if(!visit[j]&amp;&amp;dist[j]&gt;(dist[vexnum]+map[vexnum][j]))\n          {\n             dist[j]=dist[vexnum]+map[vexnum][j];\n          }\n     }\n     int min=INF;\n     for(j=0;j&lt;n;j++)\n     {\n         if(!visit[j]&amp;&amp;dist[j]&lt;min)\n         {\n             min=dist[vexnum=j];\n         }\n     }\n     visit[vexnum]=1;\n   }\n}\nint main()\n{\n  int i,j;\n  int a,b,x;\n  int s,t;\n  while(cin&gt;&gt;n&gt;&gt;m)\n  {\n    for(i=0;i&lt;n;i++)\n    {\n        dist[i]=INF;\n        for(int j=0;j&lt;n;j++)\n            map[i][j]=INF;\n    }\n    for(i=0;i&lt;m;i++)\n    {\n        cin&gt;&gt;a&gt;&gt;b&gt;&gt;x;\n        if(map[a][b]&gt;x)\n        {\n            map[a][b]=map[b][a]=x;\n        }\n    }\n    cin&gt;&gt;s&gt;&gt;t;\n    dfs(s);\n    if(dist[t]!=INF)\n    {\n        cout&lt;&lt;dist[t]&lt;&lt;endl;\n    }\n    else\n    {\n        cout&lt;&lt;&quot;-1&quot;&lt;&lt;endl;\n    }\n }\nreturn 0;\n}\n</code></pre><h3 id=\"案例分析：Wormholes\"><a href=\"#案例分析：Wormholes\" class=\"headerlink\" title=\"案例分析：Wormholes\"></a>案例分析：Wormholes</h3><p>题目链接<a href=\"http://poj.org/problem?id=3259\" target=\"_blank\" rel=\"external\">http://poj.org/problem?id=3259</a></p>\n<p>SPFA算法+邻接表实现版本：</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;stdio.h&gt;\nusing namespace std;\nstruct node\n{\n  int u,v,w;\n}edge[6000];\nint dis[505];\nint n,m,w,index;\nconst int inf=0x7ffffff;\nvoid add(int u,int v,int c)\n{\n    index++;\n    edge[index].u=u;\n    edge[index].v=v;\n    edge[index].w=c;\n}\nbool bellman()\n{\n  int u,v,w,i,j,flag;\n  for(i=1;i&lt;=n;i++)\n  {\n      dis[i]=inf;\n  }\n  dis[1]=0;flag=0;\n  for(i=1;i&lt;=n;i++)\n  {\n    for(j=1;j&lt;=index;j++)\n    {\n        if(dis[edge[j].v]&gt;dis[edge[j].u]+edge[j].w)\n        {\n          dis[edge[j].v]=dis[edge[j].u]+edge[j].w;\n        }\n   }\n  }\n  for(i=1;i&lt;=index;i++)\n      if(dis[edge[i].v]&gt;dis[edge[i].u]+edge[i].w) return true;\n  return false;\n  }\nint main()\n{\n    int i,j,t,u,v,c;\n    scanf(&quot;%d&quot;,&amp;t);\n    while(t--)\n    {\n       scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;w);\n      index=0;\n      for(i=0;i&lt;m;i++)\n      {\n        scanf(&quot;%d%d%d&quot;,&amp;u,&amp;v,&amp;c);\n        add(u,v,c);\n        add(v,u,c);\n      }\n      for(i=0;i&lt;w;i++)\n      {\n        scanf(&quot;%d%d%d&quot;,&amp;u,&amp;v,&amp;c);\n        add(u,v,-1*c);\n      }\n      if(bellman()) printf(&quot;YES\\n&quot;);\n          else printf(&quot;NO\\n&quot;);\n      }\n      return 0;\n}\n</code></pre><h3 id=\"SPFA算法-队列实现版本：\"><a href=\"#SPFA算法-队列实现版本：\" class=\"headerlink\" title=\"SPFA算法+队列实现版本：\"></a>SPFA算法+队列实现版本：</h3><pre><code>#include&lt;cstdio&gt;\n#include&lt;string&gt;\n#include&lt;queue&gt;\nusing namespace std;\nconst int INF=9999999;\nconst int MAXN=520;\nconst int MAXM=5200;\nstruct edge\n{\n  int to;\n  int val;\n  int next;\n}e[MAXM];\nint len,head[MAXN];\nint dis[MAXN];\nint n,m,w;\nbool SPFA()\n{\n    for(int i=1;i&lt;=n;i++)\n    dis[i]=INF;\n    bool vis[MAXN]={0};\n    int cnt[MAXN]={0};\n    int cur=1;\n    queue&lt;int&gt; q;\n    q.push(cur);\n    vis[cur]=true;\n    cnt[cur]=1;\n    dis[cur]=0;\n    while(!q.empty())  \n    {\n       cur=q.front();\n        q.pop();\n        vis[cur]=false;\n        for(int i=head[cur]  ;i!=-1; i=e[i].next)\n        {\n            int id=e[i].to;\n            if( dis[cur] + e[i].val &lt; dis[ id ] )\n            {\n              dis[ id ] = dis[cur] + e[ i ].val;\n              if(!vis[id])\n              {\n                cnt[id]++;\n                vis[id]=true;\n                q.push(id);\n                if(cnt[cur]&gt;n)\n                return true;\n              }\n            }\n        }\n    }\n    return false;\n}\nvoid add(int from,int to,int val)\n{\n  e[len].to=to;\n  e[len].val=val;\n  e[len].next= head[from];\n  head[from]=len++;\n}\nint main()\n{\n  int T;\n  scanf(&quot;%d&quot;,&amp;T);\n  while(T--)\n  {\n    memset(head,-1,sizeof(head));\n    len=0;\n    scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;w);\n    for(int i=0;i&lt;m;i++)\n    {\n      int from,to,val;\n      scanf(&quot;%d%d%d&quot;,&amp;from,&amp;to,&amp;val);\n      add(from,to,val);\n      add(to,from,val); //双向的\n    }\n    for(int i=0;i&lt;w;i++)\n    {\n      int from,to,val;\n      scanf(&quot;%d%d%d&quot;,&amp;from,&amp;to,&amp;val);\n      add(from,to,-val);\n    }\n    if( SPFA())\n      puts(&quot;YES&quot;);\n    else\n      puts(&quot;NO&quot;);\n  }\n  return 0;\n}\n</code></pre>"},{"title":"学习新技术","date":"2014-12-14T00:00:00.000Z","_content":"\n### 如何快速学习一门新技术?\n\n此文主要写给和我弟弟一样非计算机专业想学习编程的人，都是个人参考各位大牛给出的意见整理的一些意见。本人能力还有限，写出来的东西写得可能肤浅，但可能让他们受益，这就够了。\n\n#### 学习技术的路线\n\n每个人只要努力，都可以学会一门技术，只是时间和效率的问题。关于如何学习一门技术，初学者会带着很多疑问，很多时候由于环境配置打击了学习我们技术的激情。\n\n所以对于一般的编程环境，我们采取集成环境一键安装，这样能够快速上手，我们不需要过分关心软件用什么方式安装的，软件只是工具，我们只要知道如何利用工具达到我们的目的，这就够了。当然自己有能力了，感兴趣的话可以再去研究。\n\n学习成长过程就好比如下一张图，懂得把握技术特点并充分利用其技术特点做一些不同的事情的人更知道活学活用，这或许才是最重要的吧。\n\n![学习技术](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/learn.png)","source":"_posts/学习新技术.md","raw":"---\ntitle: 学习新技术\ntags: []\ndate: 2014-12-14 08:00:00\n---\n\n### 如何快速学习一门新技术?\n\n此文主要写给和我弟弟一样非计算机专业想学习编程的人，都是个人参考各位大牛给出的意见整理的一些意见。本人能力还有限，写出来的东西写得可能肤浅，但可能让他们受益，这就够了。\n\n#### 学习技术的路线\n\n每个人只要努力，都可以学会一门技术，只是时间和效率的问题。关于如何学习一门技术，初学者会带着很多疑问，很多时候由于环境配置打击了学习我们技术的激情。\n\n所以对于一般的编程环境，我们采取集成环境一键安装，这样能够快速上手，我们不需要过分关心软件用什么方式安装的，软件只是工具，我们只要知道如何利用工具达到我们的目的，这就够了。当然自己有能力了，感兴趣的话可以再去研究。\n\n学习成长过程就好比如下一张图，懂得把握技术特点并充分利用其技术特点做一些不同的事情的人更知道活学活用，这或许才是最重要的吧。\n\n![学习技术](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/learn.png)","slug":"学习新技术","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwtq001v2o5pzmbzz5vq","content":"<h3 id=\"如何快速学习一门新技术\"><a href=\"#如何快速学习一门新技术\" class=\"headerlink\" title=\"如何快速学习一门新技术?\"></a>如何快速学习一门新技术?</h3><p>此文主要写给和我弟弟一样非计算机专业想学习编程的人，都是个人参考各位大牛给出的意见整理的一些意见。本人能力还有限，写出来的东西写得可能肤浅，但可能让他们受益，这就够了。</p>\n<h4 id=\"学习技术的路线\"><a href=\"#学习技术的路线\" class=\"headerlink\" title=\"学习技术的路线\"></a>学习技术的路线</h4><p>每个人只要努力，都可以学会一门技术，只是时间和效率的问题。关于如何学习一门技术，初学者会带着很多疑问，很多时候由于环境配置打击了学习我们技术的激情。</p>\n<p>所以对于一般的编程环境，我们采取集成环境一键安装，这样能够快速上手，我们不需要过分关心软件用什么方式安装的，软件只是工具，我们只要知道如何利用工具达到我们的目的，这就够了。当然自己有能力了，感兴趣的话可以再去研究。</p>\n<p>学习成长过程就好比如下一张图，懂得把握技术特点并充分利用其技术特点做一些不同的事情的人更知道活学活用，这或许才是最重要的吧。</p>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/learn.png\" alt=\"学习技术\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"如何快速学习一门新技术\"><a href=\"#如何快速学习一门新技术\" class=\"headerlink\" title=\"如何快速学习一门新技术?\"></a>如何快速学习一门新技术?</h3><p>此文主要写给和我弟弟一样非计算机专业想学习编程的人，都是个人参考各位大牛给出的意见整理的一些意见。本人能力还有限，写出来的东西写得可能肤浅，但可能让他们受益，这就够了。</p>\n<h4 id=\"学习技术的路线\"><a href=\"#学习技术的路线\" class=\"headerlink\" title=\"学习技术的路线\"></a>学习技术的路线</h4><p>每个人只要努力，都可以学会一门技术，只是时间和效率的问题。关于如何学习一门技术，初学者会带着很多疑问，很多时候由于环境配置打击了学习我们技术的激情。</p>\n<p>所以对于一般的编程环境，我们采取集成环境一键安装，这样能够快速上手，我们不需要过分关心软件用什么方式安装的，软件只是工具，我们只要知道如何利用工具达到我们的目的，这就够了。当然自己有能力了，感兴趣的话可以再去研究。</p>\n<p>学习成长过程就好比如下一张图，懂得把握技术特点并充分利用其技术特点做一些不同的事情的人更知道活学活用，这或许才是最重要的吧。</p>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/learn.png\" alt=\"学习技术\"></p>\n"},{"title":"快速找到段错误的core方法","date":"2014-08-15T00:00:00.000Z","_content":"\n### 内存分配\n\n#### 计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量\n\n<!-- more -->\n\n![蔡金林的博客](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/neicun.png)","source":"_posts/快速找到段错误的core方法.md","raw":"---\ntitle: 快速找到段错误的core方法\ntags: []\ndate: 2014-08-15 08:00:00\n---\n\n### 内存分配\n\n#### 计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量\n\n<!-- more -->\n\n![蔡金林的博客](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/neicun.png)","slug":"快速找到段错误的core方法","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwts001w2o5ppjt0yggu","content":"<h3 id=\"内存分配\"><a href=\"#内存分配\" class=\"headerlink\" title=\"内存分配\"></a>内存分配</h3><h4 id=\"计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量\"><a href=\"#计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量\" class=\"headerlink\" title=\"计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量\"></a>计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量</h4><a id=\"more\"></a>\n<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/neicun.png\" alt=\"蔡金林的博客\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"内存分配\"><a href=\"#内存分配\" class=\"headerlink\" title=\"内存分配\"></a>内存分配</h3><h4 id=\"计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量\"><a href=\"#计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量\" class=\"headerlink\" title=\"计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量\"></a>计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量</h4>","more":"<p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/neicun.png\" alt=\"蔡金林的博客\"></p>"},{"title":"快速排序代码总结","date":"2014-08-17T00:00:00.000Z","_content":"\n### 段错误\n\n#### 段错误一般表现为段吐核，随着程序的运行，如果边界考虑不全，非法引用了无效成员等，会导致此种情况\n\n\t\n\t/*段吐核问题解决演示*/\n\t#include <stdio.h>\n\n\ttypedef struct stu\n\t{\n\t    int age;\n\t    char sex;\n\t}STU;\n\n\tint main()\n\t{\n\t    STU *stu1=NULL;\n\t    printf(\"%d\\n\",stu1->age);\n\t    return 0;\n\t}\n\n![蔡金林的博客](/assets/images/error.png)\n\n####解决方法\n\n\t1.ulimit -c unlimited  (解除生成核心转储信息文件的大小限制)\n\n\t2.gcc test.c -g (加入-g选项生成调试信息)\n\n\t3. ./a.out(有段错误，就会出现core文件)\n\n\t4.gdb ./a.out -c core (gdb调试)\n\n\t5.在gdb调试命令行下输入bt(back trace),它会显示出现错误的地方","source":"_posts/快速排序代码总结.md","raw":"---\ntitle: 快速排序代码总结\ntags: []\ndate: 2014-08-17 08:00:00\n---\n\n### 段错误\n\n#### 段错误一般表现为段吐核，随着程序的运行，如果边界考虑不全，非法引用了无效成员等，会导致此种情况\n\n\t\n\t/*段吐核问题解决演示*/\n\t#include <stdio.h>\n\n\ttypedef struct stu\n\t{\n\t    int age;\n\t    char sex;\n\t}STU;\n\n\tint main()\n\t{\n\t    STU *stu1=NULL;\n\t    printf(\"%d\\n\",stu1->age);\n\t    return 0;\n\t}\n\n![蔡金林的博客](/assets/images/error.png)\n\n####解决方法\n\n\t1.ulimit -c unlimited  (解除生成核心转储信息文件的大小限制)\n\n\t2.gcc test.c -g (加入-g选项生成调试信息)\n\n\t3. ./a.out(有段错误，就会出现core文件)\n\n\t4.gdb ./a.out -c core (gdb调试)\n\n\t5.在gdb调试命令行下输入bt(back trace),它会显示出现错误的地方","slug":"快速排序代码总结","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwtv001x2o5pwb0xcpln","content":"<h3 id=\"段错误\"><a href=\"#段错误\" class=\"headerlink\" title=\"段错误\"></a>段错误</h3><h4 id=\"段错误一般表现为段吐核，随着程序的运行，如果边界考虑不全，非法引用了无效成员等，会导致此种情况\"><a href=\"#段错误一般表现为段吐核，随着程序的运行，如果边界考虑不全，非法引用了无效成员等，会导致此种情况\" class=\"headerlink\" title=\"段错误一般表现为段吐核，随着程序的运行，如果边界考虑不全，非法引用了无效成员等，会导致此种情况\"></a>段错误一般表现为段吐核，随着程序的运行，如果边界考虑不全，非法引用了无效成员等，会导致此种情况</h4><pre><code>/*段吐核问题解决演示*/\n#include &lt;stdio.h&gt;\n\ntypedef struct stu\n{\n    int age;\n    char sex;\n}STU;\n\nint main()\n{\n    STU *stu1=NULL;\n    printf(&quot;%d\\n&quot;,stu1-&gt;age);\n    return 0;\n}\n</code></pre><p><img src=\"/assets/images/error.png\" alt=\"蔡金林的博客\"></p>\n<p>####解决方法</p>\n<pre><code>1.ulimit -c unlimited  (解除生成核心转储信息文件的大小限制)\n\n2.gcc test.c -g (加入-g选项生成调试信息)\n\n3. ./a.out(有段错误，就会出现core文件)\n\n4.gdb ./a.out -c core (gdb调试)\n\n5.在gdb调试命令行下输入bt(back trace),它会显示出现错误的地方\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"段错误\"><a href=\"#段错误\" class=\"headerlink\" title=\"段错误\"></a>段错误</h3><h4 id=\"段错误一般表现为段吐核，随着程序的运行，如果边界考虑不全，非法引用了无效成员等，会导致此种情况\"><a href=\"#段错误一般表现为段吐核，随着程序的运行，如果边界考虑不全，非法引用了无效成员等，会导致此种情况\" class=\"headerlink\" title=\"段错误一般表现为段吐核，随着程序的运行，如果边界考虑不全，非法引用了无效成员等，会导致此种情况\"></a>段错误一般表现为段吐核，随着程序的运行，如果边界考虑不全，非法引用了无效成员等，会导致此种情况</h4><pre><code>/*段吐核问题解决演示*/\n#include &lt;stdio.h&gt;\n\ntypedef struct stu\n{\n    int age;\n    char sex;\n}STU;\n\nint main()\n{\n    STU *stu1=NULL;\n    printf(&quot;%d\\n&quot;,stu1-&gt;age);\n    return 0;\n}\n</code></pre><p><img src=\"/assets/images/error.png\" alt=\"蔡金林的博客\"></p>\n<p>####解决方法</p>\n<pre><code>1.ulimit -c unlimited  (解除生成核心转储信息文件的大小限制)\n\n2.gcc test.c -g (加入-g选项生成调试信息)\n\n3. ./a.out(有段错误，就会出现core文件)\n\n4.gdb ./a.out -c core (gdb调试)\n\n5.在gdb调试命令行下输入bt(back trace),它会显示出现错误的地方\n</code></pre>"},{"title":"我们眼中的计算机学院毕业生——男会修电脑，女会上淘宝？","date":"2014-06-19T00:00:00.000Z","_content":"\n### 川理计算机学院毕业生\n\n长亭就在古道的旁边，那首曲子听起来太缠绵。大学过了三年而今要和你们说再见，上铺的被子都还没折叠，那个昨天的功课都还没做完。\n\n食堂打的饭还是那么一点点，怎么还花掉我那六块6毛钱。曾经年少爱追梦，一心只想往前飞。\n\n梦早已做完还要怎么飞，青春多少伤悲有留给谁,宿舍的窗外繁星点点,那熄灯后的故事都还没讲完。\n\n我们眼中的计算机专业学生是这样的吗？\n\n敲不完的代码一行又一行，改不完的bug一个又一个\n\n比赛神马最喜欢，起早贪黑苦逼鸟\n\n大口小苹果，无事看美女男会修电脑，女会上淘宝。\n\n小k想说，他们并不是这样，他们可以更接地气，他们甚至希望这个世界，因为他们的存在，开始有了一点点的不一样。\n\n分享四川理工计算机学院2014届毕业生采访视频《再见，同桌的你》\n<embed src=\"http://player.youku.com/player.php/sid/XNzI1Njg5MTc2/v.swf\" allowfullscreen=\"true\" quality=\"high\" width=\"650\" height=\"500\" align=\"middle\" allowscriptaccess=\"always\" type=\"application/x-shockwave-flash\" /></embed>","source":"_posts/我们眼中的计算机学院毕业生——男会修电脑，女会上淘宝？.md","raw":"---\ntitle: 我们眼中的计算机学院毕业生——男会修电脑，女会上淘宝？\ntags: []\ndate: 2014-06-19 08:00:00\n---\n\n### 川理计算机学院毕业生\n\n长亭就在古道的旁边，那首曲子听起来太缠绵。大学过了三年而今要和你们说再见，上铺的被子都还没折叠，那个昨天的功课都还没做完。\n\n食堂打的饭还是那么一点点，怎么还花掉我那六块6毛钱。曾经年少爱追梦，一心只想往前飞。\n\n梦早已做完还要怎么飞，青春多少伤悲有留给谁,宿舍的窗外繁星点点,那熄灯后的故事都还没讲完。\n\n我们眼中的计算机专业学生是这样的吗？\n\n敲不完的代码一行又一行，改不完的bug一个又一个\n\n比赛神马最喜欢，起早贪黑苦逼鸟\n\n大口小苹果，无事看美女男会修电脑，女会上淘宝。\n\n小k想说，他们并不是这样，他们可以更接地气，他们甚至希望这个世界，因为他们的存在，开始有了一点点的不一样。\n\n分享四川理工计算机学院2014届毕业生采访视频《再见，同桌的你》\n<embed src=\"http://player.youku.com/player.php/sid/XNzI1Njg5MTc2/v.swf\" allowfullscreen=\"true\" quality=\"high\" width=\"650\" height=\"500\" align=\"middle\" allowscriptaccess=\"always\" type=\"application/x-shockwave-flash\" /></embed>","slug":"我们眼中的计算机学院毕业生——男会修电脑，女会上淘宝？","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwtx001y2o5pg37nofdq","content":"<h3 id=\"川理计算机学院毕业生\"><a href=\"#川理计算机学院毕业生\" class=\"headerlink\" title=\"川理计算机学院毕业生\"></a>川理计算机学院毕业生</h3><p>长亭就在古道的旁边，那首曲子听起来太缠绵。大学过了三年而今要和你们说再见，上铺的被子都还没折叠，那个昨天的功课都还没做完。</p>\n<p>食堂打的饭还是那么一点点，怎么还花掉我那六块6毛钱。曾经年少爱追梦，一心只想往前飞。</p>\n<p>梦早已做完还要怎么飞，青春多少伤悲有留给谁,宿舍的窗外繁星点点,那熄灯后的故事都还没讲完。</p>\n<p>我们眼中的计算机专业学生是这样的吗？</p>\n<p>敲不完的代码一行又一行，改不完的bug一个又一个</p>\n<p>比赛神马最喜欢，起早贪黑苦逼鸟</p>\n<p>大口小苹果，无事看美女男会修电脑，女会上淘宝。</p>\n<p>小k想说，他们并不是这样，他们可以更接地气，他们甚至希望这个世界，因为他们的存在，开始有了一点点的不一样。</p>\n<p>分享四川理工计算机学院2014届毕业生采访视频《再见，同桌的你》</p>\n<embed src=\"http://player.youku.com/player.php/sid/XNzI1Njg5MTc2/v.swf\" allowfullscreen=\"true\" quality=\"high\" width=\"650\" height=\"500\" align=\"middle\" allowscriptaccess=\"always\" type=\"application/x-shockwave-flash\">","site":{"data":{}},"excerpt":"","more":"<h3 id=\"川理计算机学院毕业生\"><a href=\"#川理计算机学院毕业生\" class=\"headerlink\" title=\"川理计算机学院毕业生\"></a>川理计算机学院毕业生</h3><p>长亭就在古道的旁边，那首曲子听起来太缠绵。大学过了三年而今要和你们说再见，上铺的被子都还没折叠，那个昨天的功课都还没做完。</p>\n<p>食堂打的饭还是那么一点点，怎么还花掉我那六块6毛钱。曾经年少爱追梦，一心只想往前飞。</p>\n<p>梦早已做完还要怎么飞，青春多少伤悲有留给谁,宿舍的窗外繁星点点,那熄灯后的故事都还没讲完。</p>\n<p>我们眼中的计算机专业学生是这样的吗？</p>\n<p>敲不完的代码一行又一行，改不完的bug一个又一个</p>\n<p>比赛神马最喜欢，起早贪黑苦逼鸟</p>\n<p>大口小苹果，无事看美女男会修电脑，女会上淘宝。</p>\n<p>小k想说，他们并不是这样，他们可以更接地气，他们甚至希望这个世界，因为他们的存在，开始有了一点点的不一样。</p>\n<p>分享四川理工计算机学院2014届毕业生采访视频《再见，同桌的你》</p>\n<embed src=\"http://player.youku.com/player.php/sid/XNzI1Njg5MTc2/v.swf\" allowfullscreen=\"true\" quality=\"high\" width=\"650\" height=\"500\" align=\"middle\" allowscriptaccess=\"always\" type=\"application/x-shockwave-flash\">"},{"title":"我的数模之路","date":"2014-08-11T00:00:00.000Z","_content":"\n### ﻿两年数模暑期培训过程\n\n我参加过两年的数学建模暑期器培训，虽然也取得过一些还不错的奖，但还不至于能够有资格评论数学建模暑期培训过程。\n写这篇文章的目的是希望把自己在数学建模的经历写出来，后来的学弟学妹看到后能够有所收获。\n\n#### 第一次暑期培训前\n\t\n大一的暑假，七月底我就来到学校了，和所有准备参加数模暑期培训的同学一样，迎接一个月艰苦的培训过程。来的那天，\n协会就召开了数模暑期集结会议，来的人差不多90个了。开完会后所有没有组队的同学都留下来了，这里面就有我，\n那时候我还只是很普通的一名会员，也不认识多少人。但我庆幸的是，没组队的人里面有一个我老乡的朋友\n桃子，之前就见过几面，桃子也没组队，于是我们一拍即合，决定组成一队，共战数模，此时我们队就我和他，还却一个\n人，我们又不认识别人，协会干部说后面会给我们再安排一个人。那天晚上，我们一起去汇北吃了晚饭，聊了一会儿，就\n散去。\n\n#### 第一次暑期培训中\n\n一个月的数学建模暑期培训就开始了，第一天一来到机房，找到位置，发现我们被安排在最后一排，同样在最后\n一排还有当时的会长组。每一天都是上午老师讲课，下午上机，晚上还是上机。那时的我们根本不敢偷玩，因为感觉那时\n后面有眼睛看着我们。第一周，我们两个人一起吃饭，一起学习，虽然我们都是搞编程的，没有搞建模的，也没有搞论文\n的，但那时我们互相安慰自己，我们两个人既可以搞编程又可以搞建模，后面只要再来一个搞论文的就行。所以于是乎，\n我们都分担了更多的责任，那时我和桃子也不喜欢说话，给人的感觉还是比较安静，也很普通。印象深刻的是，我和桃子\n在协会的第一次自我介绍，因为ppt做得不错，可能一些人已经记住了普通的我们，但会经常把我们两个人的名字记反。\n那一周以来，别人中午休息的时候，我们不休息，听会儿歌，看会儿好声音,继续学习。我和他很多地方相似，\n总会有相见一顾的感觉，有时都会忍不住对笑。培训过了一周了，可我们组还是我和桃子两个人，所以我和他两个人完成了\n第一次模拟赛,熬了两个通宵，都编程，都写论文，都建模，这样的组合可能是比较少见的。第一次模拟赛结束后，我们拿了个第一名，\n当时真的很兴奋。当时我们还被安排讲解我们的论文，此时，我们进入了大众的视线，协会为我们安排的队友也来了。是一\n个妹子，毫无疑问，她主要负责写论文。我和桃子都是属于比较不太会说话，也不太爱说话，所以很少与她沟通，但我们\n吃饭还是在一起，有时也会觉得有些尴尬。但后来慢慢都习惯了，就这样我们三个人一起组合，度过了第二次模拟赛，第\n三次模拟赛，每次模拟赛，我和桃子都熬了差不多两个通宵。我们在建模的时候，会把自己的思路和方法写下来，整理后\n再传给她。三次模拟赛我们都取得了不错的成绩，这个暑期培训过得很充实，没有很多杂质，确实学到了一些东西。\n到了国赛的时候，最艰难的时刻到了，第二天女队友就生病了，要打针。所以就只剩下我和桃子并肩作战了，三天\n我们几乎没有合眼过，因为时间真的很有限，我们要承担所有的任务。虽然女队友打完针后，会过来一下，但我和桃子都知道，\n我们并不能指望她能够做些什么，我们只能安慰她病早点好。就这样，我们还是很艰难地完成第一次国赛。\n\n#### 第一次答辩\n\n国赛过去了几天，有一天晚上睡得特别晚，大概是凌晨3点多，刚睡下，就接到老大的电话，告诉我们组后天要去成都答辩，当时那个兴奋啊，简直睡不着睡觉，由于太晚，我决定第二天再告诉队友这个好消息。第二天要答辩的队伍被叫到机房作准备，相当于答辩前的预热，当时要\n每个队要选一个主辩手，我想要么就是我要么就是桃子，我觉得自己不会表达，就建议桃子去当主辩。就这样愉快地决定了，这一天\n我们熟悉了我们的论文，并打印了一些要点。第三天就去成都答辩了，早上在校门口集合的时候，桃子说他嗓子有点不舒服，我说没影响\n只要说出来就好了。去答辩的队伍中，只有我们这个队伍是大一的，还有些骄傲。去答辩的那天，我们起得特别早，中午就到成都了。\n在成都吃了一顿丰盛的午餐，吃完饭后歇了会儿，就去答辩。我们队是我们学校第一支答辩的队伍，当时很紧张，但还是硬着头皮上了。\n我们进去答辩了，下面的老师问了很多问题，有两个问题没有表达好，觉得不太好。出来后，才知道我们已进去差不多30分钟，所有人都很诧异，一般进去答辩的队伍时间都会低于15分钟，我们心里仿佛已经知道了什么，所有队伍答辩完后，合影后，回学校。当时已经是下午5点了。回来的时候车子在眉山停了，我们又在那吃了一顿大餐。吃完后，继续奔向回学校的路上，后面气氛似乎不太对，好像成绩已经出来了，但始终没有公布。我和桃子都仿佛意识到了什么，到学校的时候已经是晚上10点多了。回到寝室后，接到了桃子的电话，他告诉我我们组的国奖资格被取消了，原因是被怀疑是抄袭。\n\n![蔡金林的博客之数模之路](/assets/images/shumo.png)\n\n我们当时就很无语，我们也想过找老师，但是根本就没有用。在接下来的一周多，我们都很不爽，郁闷沮丧，有些自暴自弃了，协会的干部也找了我们，作我们的心理工作。随着时间慢慢推移，我们只能无奈地接受这个结果。第一次暑期培训就这样结束了。\n\n\n\n#### 第二次暑期培训前\n\n那个暑假我没有回家，7月份在学校练车，8月份就参加了第二次暑期培训。8月初，我和桃子再聚首，那个女队友没参加了，我们依然面临\n分组问题，当时也是在召开暑期培训集结大会的时候，有一个干部也没有组队，他就是后来的小三（男）。小三想和我们组队，我和桃子就答应了，就这样我，桃子，小三征战第二次暑期培训了。\n\n#### 第二次暑期培训中\n\n第二次与第一次暑期培训最大的不同在于，我们三个都是干部，成为了协会当时的骨干。当然心态也变得不一样了，上午面对老师上课，我们基本都会坐在最后面，我们没有听老师讲课，但我们会带本书，学习新的算法。下午我们会给他们布置一些作业，晚上给他们批改作业，任务量变大了，但却能收获到不少东西。自从和小三组队后，我和桃子性情大变，一切都变得非常有趣。我们的那个机房，有一组学长很不矜持，堪比逗比，没错，那就是我们三人。但说实话，我们学习的时候还是很认真，我觉得心态很重要，我是个自我调节能力相当强的人，秉承着开心就好的理念，奋战第二次数模。或许由于我这个特点，我成为了小大了，桃子成为了小二了，桃园三结义似乎在数模上演了。周围的人似乎有被我们感染到，我们为何总是那么开心，看上去是那么傻逼。三次模拟赛，我们却三夺第一，这不能不说是奇迹。这个暑期培训感觉过得特别快，也是我大学生涯中最开心的时候。从来没有那么开心，我和桃子原来不太爱开玩笑，自从遇到了三，性情大变，喜欢互相调侃，称对方为傻逼。又到了国赛，我和桃子知道那对我们意味着什么，心里都高兴不起来了，神经一刻都不敢放松。三天三夜，我们又熬过来了，几乎没有睡几个小时。\n\n\n#### 第二次答辩\n\n过了几天，情况还算乐观，我们又可以去成都答辩了。这次我成为主辩手，去之前理了个发，当时还调侃说，上次没理发，这次理个发再去。很幸运的是，这次通过答辩，我们也拿到了全国一等奖，那一刻，我和桃子相互拥抱，我们一起风风雨雨走过了两年，患难与共。我们终于没有遗憾了。第二次暑期培训圆满结束。\n\n#### 结语\n\n我不知道看到这篇文章的学弟学妹，会作何感想，我希望你们能够好好珍惜暑期培训的时光，真的很宝贵，该学习的时候加倍学习，该放松的时候好好放松。“海鸥不再眷念大海，可以飞更远”是我现在比较喜欢的一句话，我把它送给你们，希望你们能够在数模有所收获，取得佳绩。当然大学不仅仅有数学建模，其它方面也要有所突破。\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t数学建模小大  2014-08-11\n","source":"_posts/我的数模之路.md","raw":"---\ntitle: 我的数模之路\ntags: []\ndate: 2014-08-11 08:00:00\n---\n\n### ﻿两年数模暑期培训过程\n\n我参加过两年的数学建模暑期器培训，虽然也取得过一些还不错的奖，但还不至于能够有资格评论数学建模暑期培训过程。\n写这篇文章的目的是希望把自己在数学建模的经历写出来，后来的学弟学妹看到后能够有所收获。\n\n#### 第一次暑期培训前\n\t\n大一的暑假，七月底我就来到学校了，和所有准备参加数模暑期培训的同学一样，迎接一个月艰苦的培训过程。来的那天，\n协会就召开了数模暑期集结会议，来的人差不多90个了。开完会后所有没有组队的同学都留下来了，这里面就有我，\n那时候我还只是很普通的一名会员，也不认识多少人。但我庆幸的是，没组队的人里面有一个我老乡的朋友\n桃子，之前就见过几面，桃子也没组队，于是我们一拍即合，决定组成一队，共战数模，此时我们队就我和他，还却一个\n人，我们又不认识别人，协会干部说后面会给我们再安排一个人。那天晚上，我们一起去汇北吃了晚饭，聊了一会儿，就\n散去。\n\n#### 第一次暑期培训中\n\n一个月的数学建模暑期培训就开始了，第一天一来到机房，找到位置，发现我们被安排在最后一排，同样在最后\n一排还有当时的会长组。每一天都是上午老师讲课，下午上机，晚上还是上机。那时的我们根本不敢偷玩，因为感觉那时\n后面有眼睛看着我们。第一周，我们两个人一起吃饭，一起学习，虽然我们都是搞编程的，没有搞建模的，也没有搞论文\n的，但那时我们互相安慰自己，我们两个人既可以搞编程又可以搞建模，后面只要再来一个搞论文的就行。所以于是乎，\n我们都分担了更多的责任，那时我和桃子也不喜欢说话，给人的感觉还是比较安静，也很普通。印象深刻的是，我和桃子\n在协会的第一次自我介绍，因为ppt做得不错，可能一些人已经记住了普通的我们，但会经常把我们两个人的名字记反。\n那一周以来，别人中午休息的时候，我们不休息，听会儿歌，看会儿好声音,继续学习。我和他很多地方相似，\n总会有相见一顾的感觉，有时都会忍不住对笑。培训过了一周了，可我们组还是我和桃子两个人，所以我和他两个人完成了\n第一次模拟赛,熬了两个通宵，都编程，都写论文，都建模，这样的组合可能是比较少见的。第一次模拟赛结束后，我们拿了个第一名，\n当时真的很兴奋。当时我们还被安排讲解我们的论文，此时，我们进入了大众的视线，协会为我们安排的队友也来了。是一\n个妹子，毫无疑问，她主要负责写论文。我和桃子都是属于比较不太会说话，也不太爱说话，所以很少与她沟通，但我们\n吃饭还是在一起，有时也会觉得有些尴尬。但后来慢慢都习惯了，就这样我们三个人一起组合，度过了第二次模拟赛，第\n三次模拟赛，每次模拟赛，我和桃子都熬了差不多两个通宵。我们在建模的时候，会把自己的思路和方法写下来，整理后\n再传给她。三次模拟赛我们都取得了不错的成绩，这个暑期培训过得很充实，没有很多杂质，确实学到了一些东西。\n到了国赛的时候，最艰难的时刻到了，第二天女队友就生病了，要打针。所以就只剩下我和桃子并肩作战了，三天\n我们几乎没有合眼过，因为时间真的很有限，我们要承担所有的任务。虽然女队友打完针后，会过来一下，但我和桃子都知道，\n我们并不能指望她能够做些什么，我们只能安慰她病早点好。就这样，我们还是很艰难地完成第一次国赛。\n\n#### 第一次答辩\n\n国赛过去了几天，有一天晚上睡得特别晚，大概是凌晨3点多，刚睡下，就接到老大的电话，告诉我们组后天要去成都答辩，当时那个兴奋啊，简直睡不着睡觉，由于太晚，我决定第二天再告诉队友这个好消息。第二天要答辩的队伍被叫到机房作准备，相当于答辩前的预热，当时要\n每个队要选一个主辩手，我想要么就是我要么就是桃子，我觉得自己不会表达，就建议桃子去当主辩。就这样愉快地决定了，这一天\n我们熟悉了我们的论文，并打印了一些要点。第三天就去成都答辩了，早上在校门口集合的时候，桃子说他嗓子有点不舒服，我说没影响\n只要说出来就好了。去答辩的队伍中，只有我们这个队伍是大一的，还有些骄傲。去答辩的那天，我们起得特别早，中午就到成都了。\n在成都吃了一顿丰盛的午餐，吃完饭后歇了会儿，就去答辩。我们队是我们学校第一支答辩的队伍，当时很紧张，但还是硬着头皮上了。\n我们进去答辩了，下面的老师问了很多问题，有两个问题没有表达好，觉得不太好。出来后，才知道我们已进去差不多30分钟，所有人都很诧异，一般进去答辩的队伍时间都会低于15分钟，我们心里仿佛已经知道了什么，所有队伍答辩完后，合影后，回学校。当时已经是下午5点了。回来的时候车子在眉山停了，我们又在那吃了一顿大餐。吃完后，继续奔向回学校的路上，后面气氛似乎不太对，好像成绩已经出来了，但始终没有公布。我和桃子都仿佛意识到了什么，到学校的时候已经是晚上10点多了。回到寝室后，接到了桃子的电话，他告诉我我们组的国奖资格被取消了，原因是被怀疑是抄袭。\n\n![蔡金林的博客之数模之路](/assets/images/shumo.png)\n\n我们当时就很无语，我们也想过找老师，但是根本就没有用。在接下来的一周多，我们都很不爽，郁闷沮丧，有些自暴自弃了，协会的干部也找了我们，作我们的心理工作。随着时间慢慢推移，我们只能无奈地接受这个结果。第一次暑期培训就这样结束了。\n\n\n\n#### 第二次暑期培训前\n\n那个暑假我没有回家，7月份在学校练车，8月份就参加了第二次暑期培训。8月初，我和桃子再聚首，那个女队友没参加了，我们依然面临\n分组问题，当时也是在召开暑期培训集结大会的时候，有一个干部也没有组队，他就是后来的小三（男）。小三想和我们组队，我和桃子就答应了，就这样我，桃子，小三征战第二次暑期培训了。\n\n#### 第二次暑期培训中\n\n第二次与第一次暑期培训最大的不同在于，我们三个都是干部，成为了协会当时的骨干。当然心态也变得不一样了，上午面对老师上课，我们基本都会坐在最后面，我们没有听老师讲课，但我们会带本书，学习新的算法。下午我们会给他们布置一些作业，晚上给他们批改作业，任务量变大了，但却能收获到不少东西。自从和小三组队后，我和桃子性情大变，一切都变得非常有趣。我们的那个机房，有一组学长很不矜持，堪比逗比，没错，那就是我们三人。但说实话，我们学习的时候还是很认真，我觉得心态很重要，我是个自我调节能力相当强的人，秉承着开心就好的理念，奋战第二次数模。或许由于我这个特点，我成为了小大了，桃子成为了小二了，桃园三结义似乎在数模上演了。周围的人似乎有被我们感染到，我们为何总是那么开心，看上去是那么傻逼。三次模拟赛，我们却三夺第一，这不能不说是奇迹。这个暑期培训感觉过得特别快，也是我大学生涯中最开心的时候。从来没有那么开心，我和桃子原来不太爱开玩笑，自从遇到了三，性情大变，喜欢互相调侃，称对方为傻逼。又到了国赛，我和桃子知道那对我们意味着什么，心里都高兴不起来了，神经一刻都不敢放松。三天三夜，我们又熬过来了，几乎没有睡几个小时。\n\n\n#### 第二次答辩\n\n过了几天，情况还算乐观，我们又可以去成都答辩了。这次我成为主辩手，去之前理了个发，当时还调侃说，上次没理发，这次理个发再去。很幸运的是，这次通过答辩，我们也拿到了全国一等奖，那一刻，我和桃子相互拥抱，我们一起风风雨雨走过了两年，患难与共。我们终于没有遗憾了。第二次暑期培训圆满结束。\n\n#### 结语\n\n我不知道看到这篇文章的学弟学妹，会作何感想，我希望你们能够好好珍惜暑期培训的时光，真的很宝贵，该学习的时候加倍学习，该放松的时候好好放松。“海鸥不再眷念大海，可以飞更远”是我现在比较喜欢的一句话，我把它送给你们，希望你们能够在数模有所收获，取得佳绩。当然大学不仅仅有数学建模，其它方面也要有所突破。\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t数学建模小大  2014-08-11\n","slug":"我的数模之路","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwtz001z2o5p22fxwsj6","content":"<h3 id=\"两年数模暑期培训过程\"><a href=\"#两年数模暑期培训过程\" class=\"headerlink\" title=\"﻿两年数模暑期培训过程\"></a>﻿两年数模暑期培训过程</h3><p>我参加过两年的数学建模暑期器培训，虽然也取得过一些还不错的奖，但还不至于能够有资格评论数学建模暑期培训过程。<br>写这篇文章的目的是希望把自己在数学建模的经历写出来，后来的学弟学妹看到后能够有所收获。</p>\n<h4 id=\"第一次暑期培训前\"><a href=\"#第一次暑期培训前\" class=\"headerlink\" title=\"第一次暑期培训前\"></a>第一次暑期培训前</h4><p>大一的暑假，七月底我就来到学校了，和所有准备参加数模暑期培训的同学一样，迎接一个月艰苦的培训过程。来的那天，<br>协会就召开了数模暑期集结会议，来的人差不多90个了。开完会后所有没有组队的同学都留下来了，这里面就有我，<br>那时候我还只是很普通的一名会员，也不认识多少人。但我庆幸的是，没组队的人里面有一个我老乡的朋友<br>桃子，之前就见过几面，桃子也没组队，于是我们一拍即合，决定组成一队，共战数模，此时我们队就我和他，还却一个<br>人，我们又不认识别人，协会干部说后面会给我们再安排一个人。那天晚上，我们一起去汇北吃了晚饭，聊了一会儿，就<br>散去。</p>\n<h4 id=\"第一次暑期培训中\"><a href=\"#第一次暑期培训中\" class=\"headerlink\" title=\"第一次暑期培训中\"></a>第一次暑期培训中</h4><p>一个月的数学建模暑期培训就开始了，第一天一来到机房，找到位置，发现我们被安排在最后一排，同样在最后<br>一排还有当时的会长组。每一天都是上午老师讲课，下午上机，晚上还是上机。那时的我们根本不敢偷玩，因为感觉那时<br>后面有眼睛看着我们。第一周，我们两个人一起吃饭，一起学习，虽然我们都是搞编程的，没有搞建模的，也没有搞论文<br>的，但那时我们互相安慰自己，我们两个人既可以搞编程又可以搞建模，后面只要再来一个搞论文的就行。所以于是乎，<br>我们都分担了更多的责任，那时我和桃子也不喜欢说话，给人的感觉还是比较安静，也很普通。印象深刻的是，我和桃子<br>在协会的第一次自我介绍，因为ppt做得不错，可能一些人已经记住了普通的我们，但会经常把我们两个人的名字记反。<br>那一周以来，别人中午休息的时候，我们不休息，听会儿歌，看会儿好声音,继续学习。我和他很多地方相似，<br>总会有相见一顾的感觉，有时都会忍不住对笑。培训过了一周了，可我们组还是我和桃子两个人，所以我和他两个人完成了<br>第一次模拟赛,熬了两个通宵，都编程，都写论文，都建模，这样的组合可能是比较少见的。第一次模拟赛结束后，我们拿了个第一名，<br>当时真的很兴奋。当时我们还被安排讲解我们的论文，此时，我们进入了大众的视线，协会为我们安排的队友也来了。是一<br>个妹子，毫无疑问，她主要负责写论文。我和桃子都是属于比较不太会说话，也不太爱说话，所以很少与她沟通，但我们<br>吃饭还是在一起，有时也会觉得有些尴尬。但后来慢慢都习惯了，就这样我们三个人一起组合，度过了第二次模拟赛，第<br>三次模拟赛，每次模拟赛，我和桃子都熬了差不多两个通宵。我们在建模的时候，会把自己的思路和方法写下来，整理后<br>再传给她。三次模拟赛我们都取得了不错的成绩，这个暑期培训过得很充实，没有很多杂质，确实学到了一些东西。<br>到了国赛的时候，最艰难的时刻到了，第二天女队友就生病了，要打针。所以就只剩下我和桃子并肩作战了，三天<br>我们几乎没有合眼过，因为时间真的很有限，我们要承担所有的任务。虽然女队友打完针后，会过来一下，但我和桃子都知道，<br>我们并不能指望她能够做些什么，我们只能安慰她病早点好。就这样，我们还是很艰难地完成第一次国赛。</p>\n<h4 id=\"第一次答辩\"><a href=\"#第一次答辩\" class=\"headerlink\" title=\"第一次答辩\"></a>第一次答辩</h4><p>国赛过去了几天，有一天晚上睡得特别晚，大概是凌晨3点多，刚睡下，就接到老大的电话，告诉我们组后天要去成都答辩，当时那个兴奋啊，简直睡不着睡觉，由于太晚，我决定第二天再告诉队友这个好消息。第二天要答辩的队伍被叫到机房作准备，相当于答辩前的预热，当时要<br>每个队要选一个主辩手，我想要么就是我要么就是桃子，我觉得自己不会表达，就建议桃子去当主辩。就这样愉快地决定了，这一天<br>我们熟悉了我们的论文，并打印了一些要点。第三天就去成都答辩了，早上在校门口集合的时候，桃子说他嗓子有点不舒服，我说没影响<br>只要说出来就好了。去答辩的队伍中，只有我们这个队伍是大一的，还有些骄傲。去答辩的那天，我们起得特别早，中午就到成都了。<br>在成都吃了一顿丰盛的午餐，吃完饭后歇了会儿，就去答辩。我们队是我们学校第一支答辩的队伍，当时很紧张，但还是硬着头皮上了。<br>我们进去答辩了，下面的老师问了很多问题，有两个问题没有表达好，觉得不太好。出来后，才知道我们已进去差不多30分钟，所有人都很诧异，一般进去答辩的队伍时间都会低于15分钟，我们心里仿佛已经知道了什么，所有队伍答辩完后，合影后，回学校。当时已经是下午5点了。回来的时候车子在眉山停了，我们又在那吃了一顿大餐。吃完后，继续奔向回学校的路上，后面气氛似乎不太对，好像成绩已经出来了，但始终没有公布。我和桃子都仿佛意识到了什么，到学校的时候已经是晚上10点多了。回到寝室后，接到了桃子的电话，他告诉我我们组的国奖资格被取消了，原因是被怀疑是抄袭。</p>\n<p><img src=\"/assets/images/shumo.png\" alt=\"蔡金林的博客之数模之路\"></p>\n<p>我们当时就很无语，我们也想过找老师，但是根本就没有用。在接下来的一周多，我们都很不爽，郁闷沮丧，有些自暴自弃了，协会的干部也找了我们，作我们的心理工作。随着时间慢慢推移，我们只能无奈地接受这个结果。第一次暑期培训就这样结束了。</p>\n<h4 id=\"第二次暑期培训前\"><a href=\"#第二次暑期培训前\" class=\"headerlink\" title=\"第二次暑期培训前\"></a>第二次暑期培训前</h4><p>那个暑假我没有回家，7月份在学校练车，8月份就参加了第二次暑期培训。8月初，我和桃子再聚首，那个女队友没参加了，我们依然面临<br>分组问题，当时也是在召开暑期培训集结大会的时候，有一个干部也没有组队，他就是后来的小三（男）。小三想和我们组队，我和桃子就答应了，就这样我，桃子，小三征战第二次暑期培训了。</p>\n<h4 id=\"第二次暑期培训中\"><a href=\"#第二次暑期培训中\" class=\"headerlink\" title=\"第二次暑期培训中\"></a>第二次暑期培训中</h4><p>第二次与第一次暑期培训最大的不同在于，我们三个都是干部，成为了协会当时的骨干。当然心态也变得不一样了，上午面对老师上课，我们基本都会坐在最后面，我们没有听老师讲课，但我们会带本书，学习新的算法。下午我们会给他们布置一些作业，晚上给他们批改作业，任务量变大了，但却能收获到不少东西。自从和小三组队后，我和桃子性情大变，一切都变得非常有趣。我们的那个机房，有一组学长很不矜持，堪比逗比，没错，那就是我们三人。但说实话，我们学习的时候还是很认真，我觉得心态很重要，我是个自我调节能力相当强的人，秉承着开心就好的理念，奋战第二次数模。或许由于我这个特点，我成为了小大了，桃子成为了小二了，桃园三结义似乎在数模上演了。周围的人似乎有被我们感染到，我们为何总是那么开心，看上去是那么傻逼。三次模拟赛，我们却三夺第一，这不能不说是奇迹。这个暑期培训感觉过得特别快，也是我大学生涯中最开心的时候。从来没有那么开心，我和桃子原来不太爱开玩笑，自从遇到了三，性情大变，喜欢互相调侃，称对方为傻逼。又到了国赛，我和桃子知道那对我们意味着什么，心里都高兴不起来了，神经一刻都不敢放松。三天三夜，我们又熬过来了，几乎没有睡几个小时。</p>\n<h4 id=\"第二次答辩\"><a href=\"#第二次答辩\" class=\"headerlink\" title=\"第二次答辩\"></a>第二次答辩</h4><p>过了几天，情况还算乐观，我们又可以去成都答辩了。这次我成为主辩手，去之前理了个发，当时还调侃说，上次没理发，这次理个发再去。很幸运的是，这次通过答辩，我们也拿到了全国一等奖，那一刻，我和桃子相互拥抱，我们一起风风雨雨走过了两年，患难与共。我们终于没有遗憾了。第二次暑期培训圆满结束。</p>\n<h4 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h4><p>我不知道看到这篇文章的学弟学妹，会作何感想，我希望你们能够好好珍惜暑期培训的时光，真的很宝贵，该学习的时候加倍学习，该放松的时候好好放松。“海鸥不再眷念大海，可以飞更远”是我现在比较喜欢的一句话，我把它送给你们，希望你们能够在数模有所收获，取得佳绩。当然大学不仅仅有数学建模，其它方面也要有所突破。</p>\n<pre><code>数学建模小大  2014-08-11\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"两年数模暑期培训过程\"><a href=\"#两年数模暑期培训过程\" class=\"headerlink\" title=\"﻿两年数模暑期培训过程\"></a>﻿两年数模暑期培训过程</h3><p>我参加过两年的数学建模暑期器培训，虽然也取得过一些还不错的奖，但还不至于能够有资格评论数学建模暑期培训过程。<br>写这篇文章的目的是希望把自己在数学建模的经历写出来，后来的学弟学妹看到后能够有所收获。</p>\n<h4 id=\"第一次暑期培训前\"><a href=\"#第一次暑期培训前\" class=\"headerlink\" title=\"第一次暑期培训前\"></a>第一次暑期培训前</h4><p>大一的暑假，七月底我就来到学校了，和所有准备参加数模暑期培训的同学一样，迎接一个月艰苦的培训过程。来的那天，<br>协会就召开了数模暑期集结会议，来的人差不多90个了。开完会后所有没有组队的同学都留下来了，这里面就有我，<br>那时候我还只是很普通的一名会员，也不认识多少人。但我庆幸的是，没组队的人里面有一个我老乡的朋友<br>桃子，之前就见过几面，桃子也没组队，于是我们一拍即合，决定组成一队，共战数模，此时我们队就我和他，还却一个<br>人，我们又不认识别人，协会干部说后面会给我们再安排一个人。那天晚上，我们一起去汇北吃了晚饭，聊了一会儿，就<br>散去。</p>\n<h4 id=\"第一次暑期培训中\"><a href=\"#第一次暑期培训中\" class=\"headerlink\" title=\"第一次暑期培训中\"></a>第一次暑期培训中</h4><p>一个月的数学建模暑期培训就开始了，第一天一来到机房，找到位置，发现我们被安排在最后一排，同样在最后<br>一排还有当时的会长组。每一天都是上午老师讲课，下午上机，晚上还是上机。那时的我们根本不敢偷玩，因为感觉那时<br>后面有眼睛看着我们。第一周，我们两个人一起吃饭，一起学习，虽然我们都是搞编程的，没有搞建模的，也没有搞论文<br>的，但那时我们互相安慰自己，我们两个人既可以搞编程又可以搞建模，后面只要再来一个搞论文的就行。所以于是乎，<br>我们都分担了更多的责任，那时我和桃子也不喜欢说话，给人的感觉还是比较安静，也很普通。印象深刻的是，我和桃子<br>在协会的第一次自我介绍，因为ppt做得不错，可能一些人已经记住了普通的我们，但会经常把我们两个人的名字记反。<br>那一周以来，别人中午休息的时候，我们不休息，听会儿歌，看会儿好声音,继续学习。我和他很多地方相似，<br>总会有相见一顾的感觉，有时都会忍不住对笑。培训过了一周了，可我们组还是我和桃子两个人，所以我和他两个人完成了<br>第一次模拟赛,熬了两个通宵，都编程，都写论文，都建模，这样的组合可能是比较少见的。第一次模拟赛结束后，我们拿了个第一名，<br>当时真的很兴奋。当时我们还被安排讲解我们的论文，此时，我们进入了大众的视线，协会为我们安排的队友也来了。是一<br>个妹子，毫无疑问，她主要负责写论文。我和桃子都是属于比较不太会说话，也不太爱说话，所以很少与她沟通，但我们<br>吃饭还是在一起，有时也会觉得有些尴尬。但后来慢慢都习惯了，就这样我们三个人一起组合，度过了第二次模拟赛，第<br>三次模拟赛，每次模拟赛，我和桃子都熬了差不多两个通宵。我们在建模的时候，会把自己的思路和方法写下来，整理后<br>再传给她。三次模拟赛我们都取得了不错的成绩，这个暑期培训过得很充实，没有很多杂质，确实学到了一些东西。<br>到了国赛的时候，最艰难的时刻到了，第二天女队友就生病了，要打针。所以就只剩下我和桃子并肩作战了，三天<br>我们几乎没有合眼过，因为时间真的很有限，我们要承担所有的任务。虽然女队友打完针后，会过来一下，但我和桃子都知道，<br>我们并不能指望她能够做些什么，我们只能安慰她病早点好。就这样，我们还是很艰难地完成第一次国赛。</p>\n<h4 id=\"第一次答辩\"><a href=\"#第一次答辩\" class=\"headerlink\" title=\"第一次答辩\"></a>第一次答辩</h4><p>国赛过去了几天，有一天晚上睡得特别晚，大概是凌晨3点多，刚睡下，就接到老大的电话，告诉我们组后天要去成都答辩，当时那个兴奋啊，简直睡不着睡觉，由于太晚，我决定第二天再告诉队友这个好消息。第二天要答辩的队伍被叫到机房作准备，相当于答辩前的预热，当时要<br>每个队要选一个主辩手，我想要么就是我要么就是桃子，我觉得自己不会表达，就建议桃子去当主辩。就这样愉快地决定了，这一天<br>我们熟悉了我们的论文，并打印了一些要点。第三天就去成都答辩了，早上在校门口集合的时候，桃子说他嗓子有点不舒服，我说没影响<br>只要说出来就好了。去答辩的队伍中，只有我们这个队伍是大一的，还有些骄傲。去答辩的那天，我们起得特别早，中午就到成都了。<br>在成都吃了一顿丰盛的午餐，吃完饭后歇了会儿，就去答辩。我们队是我们学校第一支答辩的队伍，当时很紧张，但还是硬着头皮上了。<br>我们进去答辩了，下面的老师问了很多问题，有两个问题没有表达好，觉得不太好。出来后，才知道我们已进去差不多30分钟，所有人都很诧异，一般进去答辩的队伍时间都会低于15分钟，我们心里仿佛已经知道了什么，所有队伍答辩完后，合影后，回学校。当时已经是下午5点了。回来的时候车子在眉山停了，我们又在那吃了一顿大餐。吃完后，继续奔向回学校的路上，后面气氛似乎不太对，好像成绩已经出来了，但始终没有公布。我和桃子都仿佛意识到了什么，到学校的时候已经是晚上10点多了。回到寝室后，接到了桃子的电话，他告诉我我们组的国奖资格被取消了，原因是被怀疑是抄袭。</p>\n<p><img src=\"/assets/images/shumo.png\" alt=\"蔡金林的博客之数模之路\"></p>\n<p>我们当时就很无语，我们也想过找老师，但是根本就没有用。在接下来的一周多，我们都很不爽，郁闷沮丧，有些自暴自弃了，协会的干部也找了我们，作我们的心理工作。随着时间慢慢推移，我们只能无奈地接受这个结果。第一次暑期培训就这样结束了。</p>\n<h4 id=\"第二次暑期培训前\"><a href=\"#第二次暑期培训前\" class=\"headerlink\" title=\"第二次暑期培训前\"></a>第二次暑期培训前</h4><p>那个暑假我没有回家，7月份在学校练车，8月份就参加了第二次暑期培训。8月初，我和桃子再聚首，那个女队友没参加了，我们依然面临<br>分组问题，当时也是在召开暑期培训集结大会的时候，有一个干部也没有组队，他就是后来的小三（男）。小三想和我们组队，我和桃子就答应了，就这样我，桃子，小三征战第二次暑期培训了。</p>\n<h4 id=\"第二次暑期培训中\"><a href=\"#第二次暑期培训中\" class=\"headerlink\" title=\"第二次暑期培训中\"></a>第二次暑期培训中</h4><p>第二次与第一次暑期培训最大的不同在于，我们三个都是干部，成为了协会当时的骨干。当然心态也变得不一样了，上午面对老师上课，我们基本都会坐在最后面，我们没有听老师讲课，但我们会带本书，学习新的算法。下午我们会给他们布置一些作业，晚上给他们批改作业，任务量变大了，但却能收获到不少东西。自从和小三组队后，我和桃子性情大变，一切都变得非常有趣。我们的那个机房，有一组学长很不矜持，堪比逗比，没错，那就是我们三人。但说实话，我们学习的时候还是很认真，我觉得心态很重要，我是个自我调节能力相当强的人，秉承着开心就好的理念，奋战第二次数模。或许由于我这个特点，我成为了小大了，桃子成为了小二了，桃园三结义似乎在数模上演了。周围的人似乎有被我们感染到，我们为何总是那么开心，看上去是那么傻逼。三次模拟赛，我们却三夺第一，这不能不说是奇迹。这个暑期培训感觉过得特别快，也是我大学生涯中最开心的时候。从来没有那么开心，我和桃子原来不太爱开玩笑，自从遇到了三，性情大变，喜欢互相调侃，称对方为傻逼。又到了国赛，我和桃子知道那对我们意味着什么，心里都高兴不起来了，神经一刻都不敢放松。三天三夜，我们又熬过来了，几乎没有睡几个小时。</p>\n<h4 id=\"第二次答辩\"><a href=\"#第二次答辩\" class=\"headerlink\" title=\"第二次答辩\"></a>第二次答辩</h4><p>过了几天，情况还算乐观，我们又可以去成都答辩了。这次我成为主辩手，去之前理了个发，当时还调侃说，上次没理发，这次理个发再去。很幸运的是，这次通过答辩，我们也拿到了全国一等奖，那一刻，我和桃子相互拥抱，我们一起风风雨雨走过了两年，患难与共。我们终于没有遗憾了。第二次暑期培训圆满结束。</p>\n<h4 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h4><p>我不知道看到这篇文章的学弟学妹，会作何感想，我希望你们能够好好珍惜暑期培训的时光，真的很宝贵，该学习的时候加倍学习，该放松的时候好好放松。“海鸥不再眷念大海，可以飞更远”是我现在比较喜欢的一句话，我把它送给你们，希望你们能够在数模有所收获，取得佳绩。当然大学不仅仅有数学建模，其它方面也要有所突破。</p>\n<pre><code>数学建模小大  2014-08-11\n</code></pre>"},{"title":"搭建git服务器","date":"2015-02-11T00:00:00.000Z","_content":"\n\n### centos搭建git服务器\n\n一些公司或者某些项目不适合放入github中，希望能有一个完全私有的仓库，如果有一台服务器，可以搭建git服务器，专门用于git服务。\n\n#### centos搭建git服务器\n\n\nstep1. 安装git(如果没有就安装)\n\n\n    yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel\n    yum install git\n\n\nstep2.创建一个git用户，用来运行git服务\n\n\n    groupadd git\n    adduser git -g git\n    passwd git  /**设定密码*/\n\n\nstep3.密钥管理\n\n    收集所有需要登录的用户的公钥，公钥位于id_rsa.pub文件中，把我们的公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。\n    cd /home/git/\n    mkdir .ssh\n    chmod 700 .ssh\n    touch .ssh/authorized_keys\n    chmod 600 .ssh/authorized_keys\n\nstep4.初始化git仓库\n\n    cd /srv\n    mkdir learngit.git\n    chown git:git learngit.git\n    git init --bare learngit.git\n\nstep5.客户端clone仓库\n\n    git clone git@192.168.45.4:/srv/learngit.git\n\nstep6. 客户端push操作\n\n    cd learngit\n    touch readme.txt\n    git add .\n    git commit -m 'init'\n    git push origin master\n\n【Notice】由于远程git服务器远程仓库里只是一个代码库，所以push代码到git服务器上，也看不到刚push过来的内容，这是正常的，可以进行pull等操作。","source":"_posts/搭建git服务器.md","raw":"---\ntitle: 搭建git服务器\ntags: []\ndate: 2015-02-11 08:00:00\n---\n\n\n### centos搭建git服务器\n\n一些公司或者某些项目不适合放入github中，希望能有一个完全私有的仓库，如果有一台服务器，可以搭建git服务器，专门用于git服务。\n\n#### centos搭建git服务器\n\n\nstep1. 安装git(如果没有就安装)\n\n\n    yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel\n    yum install git\n\n\nstep2.创建一个git用户，用来运行git服务\n\n\n    groupadd git\n    adduser git -g git\n    passwd git  /**设定密码*/\n\n\nstep3.密钥管理\n\n    收集所有需要登录的用户的公钥，公钥位于id_rsa.pub文件中，把我们的公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。\n    cd /home/git/\n    mkdir .ssh\n    chmod 700 .ssh\n    touch .ssh/authorized_keys\n    chmod 600 .ssh/authorized_keys\n\nstep4.初始化git仓库\n\n    cd /srv\n    mkdir learngit.git\n    chown git:git learngit.git\n    git init --bare learngit.git\n\nstep5.客户端clone仓库\n\n    git clone git@192.168.45.4:/srv/learngit.git\n\nstep6. 客户端push操作\n\n    cd learngit\n    touch readme.txt\n    git add .\n    git commit -m 'init'\n    git push origin master\n\n【Notice】由于远程git服务器远程仓库里只是一个代码库，所以push代码到git服务器上，也看不到刚push过来的内容，这是正常的，可以进行pull等操作。","slug":"搭建git服务器","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwu000202o5p5pxpubxv","content":"<h3 id=\"centos搭建git服务器\"><a href=\"#centos搭建git服务器\" class=\"headerlink\" title=\"centos搭建git服务器\"></a>centos搭建git服务器</h3><p>一些公司或者某些项目不适合放入github中，希望能有一个完全私有的仓库，如果有一台服务器，可以搭建git服务器，专门用于git服务。</p>\n<h4 id=\"centos搭建git服务器-1\"><a href=\"#centos搭建git服务器-1\" class=\"headerlink\" title=\"centos搭建git服务器\"></a>centos搭建git服务器</h4><p>step1. 安装git(如果没有就安装)</p>\n<pre><code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel\nyum install git\n</code></pre><p>step2.创建一个git用户，用来运行git服务</p>\n<pre><code>groupadd git\nadduser git -g git\npasswd git  /**设定密码*/\n</code></pre><p>step3.密钥管理</p>\n<pre><code>收集所有需要登录的用户的公钥，公钥位于id_rsa.pub文件中，把我们的公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。\ncd /home/git/\nmkdir .ssh\nchmod 700 .ssh\ntouch .ssh/authorized_keys\nchmod 600 .ssh/authorized_keys\n</code></pre><p>step4.初始化git仓库</p>\n<pre><code>cd /srv\nmkdir learngit.git\nchown git:git learngit.git\ngit init --bare learngit.git\n</code></pre><p>step5.客户端clone仓库</p>\n<pre><code>git clone git@192.168.45.4:/srv/learngit.git\n</code></pre><p>step6. 客户端push操作</p>\n<pre><code>cd learngit\ntouch readme.txt\ngit add .\ngit commit -m &apos;init&apos;\ngit push origin master\n</code></pre><p>【Notice】由于远程git服务器远程仓库里只是一个代码库，所以push代码到git服务器上，也看不到刚push过来的内容，这是正常的，可以进行pull等操作。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"centos搭建git服务器\"><a href=\"#centos搭建git服务器\" class=\"headerlink\" title=\"centos搭建git服务器\"></a>centos搭建git服务器</h3><p>一些公司或者某些项目不适合放入github中，希望能有一个完全私有的仓库，如果有一台服务器，可以搭建git服务器，专门用于git服务。</p>\n<h4 id=\"centos搭建git服务器-1\"><a href=\"#centos搭建git服务器-1\" class=\"headerlink\" title=\"centos搭建git服务器\"></a>centos搭建git服务器</h4><p>step1. 安装git(如果没有就安装)</p>\n<pre><code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel\nyum install git\n</code></pre><p>step2.创建一个git用户，用来运行git服务</p>\n<pre><code>groupadd git\nadduser git -g git\npasswd git  /**设定密码*/\n</code></pre><p>step3.密钥管理</p>\n<pre><code>收集所有需要登录的用户的公钥，公钥位于id_rsa.pub文件中，把我们的公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。\ncd /home/git/\nmkdir .ssh\nchmod 700 .ssh\ntouch .ssh/authorized_keys\nchmod 600 .ssh/authorized_keys\n</code></pre><p>step4.初始化git仓库</p>\n<pre><code>cd /srv\nmkdir learngit.git\nchown git:git learngit.git\ngit init --bare learngit.git\n</code></pre><p>step5.客户端clone仓库</p>\n<pre><code>git clone git@192.168.45.4:/srv/learngit.git\n</code></pre><p>step6. 客户端push操作</p>\n<pre><code>cd learngit\ntouch readme.txt\ngit add .\ngit commit -m &apos;init&apos;\ngit push origin master\n</code></pre><p>【Notice】由于远程git服务器远程仓库里只是一个代码库，所以push代码到git服务器上，也看不到刚push过来的内容，这是正常的，可以进行pull等操作。</p>\n"},{"title":"最小生成树","date":"2014-05-06T00:00:00.000Z","_content":"\n### 图论之最小生成树(Prim算法和Kruskal算法)\n\n所有顶点均由边连接在一起，但不存在回路的图叫生成树,在一给定的无向图G = (V, E) 中，(u, v) 代表连接顶点 u 与顶点 v 的边（即），而 w(u, v) 代表此边的权重，若存在 T 为 E 的子集（即）且为无循环图，使得的 w(T) 最小，则此 T 为 G 的最小生成树。最小生成树其实是最小权重生成树的简称\n\n<!-- more -->\n\n#### 生成树的遍历方式\n\n    深度优先生成树\n    广度优先生成树\n\n![生成树的遍历方式](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/tree.png)\n\n#### 生成树的特点\n    \n    生成树的顶点个数与图的顶点个数相同\n    生成树是图的极小连通子图\n    一个有n个顶点的连通图的生成树有n-1条边\n    生成树中任意两个顶点间的路径是唯一的\n    在生成树中再加一条边必然形成回路\n\n#### 构造最小生成树的方法\n\n##### prim算法基本思想\n\n取图中任意一个顶点 v 作为生成树的根，之后往生成树上添加新的顶点 w。在添加的顶点 w 和已经在生成树上的顶点v 之间必定存在一条边，并且该边的权值在所有连通顶点 v 和 w 之间的边中取值最小。之后继续往生成树上添加顶点，直至生成树上含有 n-1 个顶点为止。\n\n一般情况下所添加的顶点应满足下列条件:\n\n    在生成树的构造过程中，图中 n 个顶点分属两个集合\n    已落在生成树上的顶点集 U 和尚未落在生成树上的顶点集V-U ，则应在所有连通U中顶点和V-U中顶点的边中选取权值最小的边。\n\n##### prim方法实现过程原理图\n\n![prim算法原理图](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/prim.png)\n\n##### prim算法描述\n\n    Prim(Mgraph G, VexsType v0)\n    { \n    // v0－初始出发点，T－生成对中边的集合\n    // U－生成树中顶点的集合\n    T=Φ\n    U={v0}\n    while(U<>V)\n    {\n        求u,v,使得 c(u,v)最小，u €U, v €V-U\n        T=TU{(u,v)}\n        U=UU{v}\n    }\n    ｝\n\n##### kruskal算法基本思想\n\n具体做法：\n\n先构造一个只含 n 个顶点的子图 SG，然后从权值最小的边开始，若它的添加不使SG 中产生回路，则在 SG 上加上这条边，如此重复，直至加上 n-1 条边为止考虑问题的出发点：\n\n为使生成树上边的权值之和达到最小，则应使生成树中每一条边的权值尽可能地小\n\n##### kruskal算法实现过程原理图\n\n![kruskal算法原理图](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/kruskal.png)\n\n#### prim和Kruskal算法具体实现c++版(官方)\n\n    #include<iostream>\n    #include<cstdlib>\n    #include<cstdio>\n    #define MAX_VERTEX_NUM 20 //保存节点个数\n    #define OK 1\n    #define ERROR 0\n    #define MAX 1000\n    using namespace std;\n    typedef struct Arcell//保存邻接矩阵\n    {\n    double adj;//边的权值\n    }Arcell,AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];\n    typedef struct MGraph\n    {\n    char vexs[MAX_VERTEX_NUM];//节点数组\n    AdjMatrix arcs;//邻接矩阵\n    int vexnum,arcnum;//图的节点个数和边或弧数\n    }MGraph;\n    typedef struct Pnode//用于普利姆prim算法\n    {\n    char adjvex;//节点\n    double lowcost;//权值\n    }Pnode,Closedge[MAX_VERTEX_NUM];//记录顶点集U到V-U的代价最小的边的辅助数组定义\n    typedef struct Knode//用于克鲁斯卡尔算法中存储一条边及其对应的2个节点\n    {\n    char ch1;//节点1\n    char ch2;//节点2\n    double value;//权值\n    }Knode,Dgevalue[MAX_VERTEX_NUM];\n\n    //-------------------------------------------------------------------------------\n    int CreateUDG(MGraph &G,Dgevalue &dgevalue);\n    int LocateVex(MGraph G,char ch);\n    int Minimum(MGraph G,Closedge closedge);\n    void MiniSpanTree_PRIM(MGraph G,char u);\n    void Sortdge(Dgevalue &dgevalue,MGraph G);\n\n    //-------------------------------------------------------------------------------\n    int CreateUDG(MGraph &G,Dgevalue &dgevalue)//构造无向加权图的邻接矩阵\n    {\n    int i,j,k;\n    cout<<\"请输入图中节点个数和边/弧的条数：\"; cin>>G.vexnum>>G.arcnum;\n    cout<>G.vexs[i];\n    for(i=0;i<G.vexnum;++i)//初始化数组\n    {\n    for(j=0;j>dgevalue[k].ch1>>dgevalue[k].ch2>>dgevalue[k].value;\n    i=LocateVex(G,dgevalue[k].ch1);\n    j=LocateVex(G,dgevalue[k].ch2);\n    G.arcs[i][j].adj=dgevalue[k].value;\n    G.arcs[j][i].adj=G.arcs[i][j].adj;\n    }\n    return OK;\n    }\n    int LocateVex(MGraph G,char ch)//确定节点ch在图G.vexs中的位置\n    {\n    int a;\n    for(int i=0;idgevalue[j].value)\n    {\n    temp=dgevalue[i].value;\n    dgevalue[i].value=dgevalue[j].value;\n    dgevalue[j].value=temp;\n    ch1=dgevalue[i].ch1;\n    dgevalue[i].ch1=dgevalue[j].ch1;\n    dgevalue[j].ch1=ch1;\n    ch2=dgevalue[i].ch2;\n    dgevalue[i].ch2=dgevalue[j].ch2;\n    dgevalue[j].ch2=ch2;\n    }\n    }\n    }\n    }\n    int main()\n    {\n    int i,j;\n    MGraph G;\n    char u;\n    Dgevalue dgevalue;\n    CreateUDG(G,dgevalue);\n    cout<<\"图的邻接矩阵为：\"<<endl;\n    for(i=0;i<G.vexnum;i++)\n    {\n    for(j=0;j<&G.vexnum;j++)\n    cout<<G.arcs[i][j].adj<<\"   \";\n    cout<<endl;\n    }\n    cout<<\"=============普利姆Prim算法===============\\n\";\n    cout<<\"请输入起始点：\";\n    cin>>u;\n    cout<<\"构成最小代价生成树的边集为：\\n\";\n    MiniSpanTree_PRIM(G,u);\n    cout<<\"============克鲁斯科尔Kruskal算法=============\\n\";\n    cout<<\"构成最小代价生成树的边集为：\\n\";\n    MiniSpanTree_KRSL(G,dgevalue);\n    return 0;\n    }\n\n#### 案例分析:：Constructing Roads\n\n题目链接：http://poj.org/problem?id=2421\n\n算法思想：运用prim方法构造最小生成树\n\n    #include<iostream>\n    #include<cstdio>\n    #include<cstring>\n    using namespace std;\n    #define INF 0xffffff\n    int arics[105][105];\n    int visit[105],dis[105],sum,n;\n    void prim()\n    {\n        memset(visit,0,sizeof(visit));\n        int i,j;\n        for(i=1;i<=n;i++)\n        {\n            dis[i]=arics[1][i];\n        }\n        visit[1]=1;\n        for(i=1;i<=n;i++)\n        {\n            int temp=INF;\n            int k;//记录最小边的顶点序号\n            for(j=1;j<=n;j++)\n            {\n                if((!visit[j])&&(temp>dis[j]))\n                {\n                    temp=dis[j];\n                    k=j;\n                }\n            }\n            if(temp==INF)\n            {\n                break;\n            }\n            visit[k]=1;//置为已访问标志\n            sum+=dis[k];\n            for(j=1;j<=n;j++)\n            {\n                if(!visit[j])\n                {\n                    if(dis[j]>arics[k][j])\n                    {\n                        dis[j]=arics[k][j];//更新值\n                    }\n                }\n            }\n        }\n\n    }\n    int main()\n    {\n        int i,j,a,b,q;\n        cin>>n;//输入节点个数\n        for(i=1;i<=n;i++) //输入带权邻接矩阵\n        {\n            for(j=1;j<=n;j++)\n            {\n                cin>>arics[i][j];\n            }\n        }\n        cin>>q;//已经建了公路的个数\n        for(i=1;i<=q;i++)\n        {\n             cin>>a>>b;//输入公路的两端（节点）\n             arics[a][b]=arics[b][a]=0;\n        }\n        sum=0;\n        prim();\n        cout<<sum<<endl;\n        return 0;\n    }","source":"_posts/最小生成树.md","raw":"---\ntitle: 最小生成树\ntags: []\ndate: 2014-05-06 08:00:00\n---\n\n### 图论之最小生成树(Prim算法和Kruskal算法)\n\n所有顶点均由边连接在一起，但不存在回路的图叫生成树,在一给定的无向图G = (V, E) 中，(u, v) 代表连接顶点 u 与顶点 v 的边（即），而 w(u, v) 代表此边的权重，若存在 T 为 E 的子集（即）且为无循环图，使得的 w(T) 最小，则此 T 为 G 的最小生成树。最小生成树其实是最小权重生成树的简称\n\n<!-- more -->\n\n#### 生成树的遍历方式\n\n    深度优先生成树\n    广度优先生成树\n\n![生成树的遍历方式](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/tree.png)\n\n#### 生成树的特点\n    \n    生成树的顶点个数与图的顶点个数相同\n    生成树是图的极小连通子图\n    一个有n个顶点的连通图的生成树有n-1条边\n    生成树中任意两个顶点间的路径是唯一的\n    在生成树中再加一条边必然形成回路\n\n#### 构造最小生成树的方法\n\n##### prim算法基本思想\n\n取图中任意一个顶点 v 作为生成树的根，之后往生成树上添加新的顶点 w。在添加的顶点 w 和已经在生成树上的顶点v 之间必定存在一条边，并且该边的权值在所有连通顶点 v 和 w 之间的边中取值最小。之后继续往生成树上添加顶点，直至生成树上含有 n-1 个顶点为止。\n\n一般情况下所添加的顶点应满足下列条件:\n\n    在生成树的构造过程中，图中 n 个顶点分属两个集合\n    已落在生成树上的顶点集 U 和尚未落在生成树上的顶点集V-U ，则应在所有连通U中顶点和V-U中顶点的边中选取权值最小的边。\n\n##### prim方法实现过程原理图\n\n![prim算法原理图](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/prim.png)\n\n##### prim算法描述\n\n    Prim(Mgraph G, VexsType v0)\n    { \n    // v0－初始出发点，T－生成对中边的集合\n    // U－生成树中顶点的集合\n    T=Φ\n    U={v0}\n    while(U<>V)\n    {\n        求u,v,使得 c(u,v)最小，u €U, v €V-U\n        T=TU{(u,v)}\n        U=UU{v}\n    }\n    ｝\n\n##### kruskal算法基本思想\n\n具体做法：\n\n先构造一个只含 n 个顶点的子图 SG，然后从权值最小的边开始，若它的添加不使SG 中产生回路，则在 SG 上加上这条边，如此重复，直至加上 n-1 条边为止考虑问题的出发点：\n\n为使生成树上边的权值之和达到最小，则应使生成树中每一条边的权值尽可能地小\n\n##### kruskal算法实现过程原理图\n\n![kruskal算法原理图](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/kruskal.png)\n\n#### prim和Kruskal算法具体实现c++版(官方)\n\n    #include<iostream>\n    #include<cstdlib>\n    #include<cstdio>\n    #define MAX_VERTEX_NUM 20 //保存节点个数\n    #define OK 1\n    #define ERROR 0\n    #define MAX 1000\n    using namespace std;\n    typedef struct Arcell//保存邻接矩阵\n    {\n    double adj;//边的权值\n    }Arcell,AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];\n    typedef struct MGraph\n    {\n    char vexs[MAX_VERTEX_NUM];//节点数组\n    AdjMatrix arcs;//邻接矩阵\n    int vexnum,arcnum;//图的节点个数和边或弧数\n    }MGraph;\n    typedef struct Pnode//用于普利姆prim算法\n    {\n    char adjvex;//节点\n    double lowcost;//权值\n    }Pnode,Closedge[MAX_VERTEX_NUM];//记录顶点集U到V-U的代价最小的边的辅助数组定义\n    typedef struct Knode//用于克鲁斯卡尔算法中存储一条边及其对应的2个节点\n    {\n    char ch1;//节点1\n    char ch2;//节点2\n    double value;//权值\n    }Knode,Dgevalue[MAX_VERTEX_NUM];\n\n    //-------------------------------------------------------------------------------\n    int CreateUDG(MGraph &G,Dgevalue &dgevalue);\n    int LocateVex(MGraph G,char ch);\n    int Minimum(MGraph G,Closedge closedge);\n    void MiniSpanTree_PRIM(MGraph G,char u);\n    void Sortdge(Dgevalue &dgevalue,MGraph G);\n\n    //-------------------------------------------------------------------------------\n    int CreateUDG(MGraph &G,Dgevalue &dgevalue)//构造无向加权图的邻接矩阵\n    {\n    int i,j,k;\n    cout<<\"请输入图中节点个数和边/弧的条数：\"; cin>>G.vexnum>>G.arcnum;\n    cout<>G.vexs[i];\n    for(i=0;i<G.vexnum;++i)//初始化数组\n    {\n    for(j=0;j>dgevalue[k].ch1>>dgevalue[k].ch2>>dgevalue[k].value;\n    i=LocateVex(G,dgevalue[k].ch1);\n    j=LocateVex(G,dgevalue[k].ch2);\n    G.arcs[i][j].adj=dgevalue[k].value;\n    G.arcs[j][i].adj=G.arcs[i][j].adj;\n    }\n    return OK;\n    }\n    int LocateVex(MGraph G,char ch)//确定节点ch在图G.vexs中的位置\n    {\n    int a;\n    for(int i=0;idgevalue[j].value)\n    {\n    temp=dgevalue[i].value;\n    dgevalue[i].value=dgevalue[j].value;\n    dgevalue[j].value=temp;\n    ch1=dgevalue[i].ch1;\n    dgevalue[i].ch1=dgevalue[j].ch1;\n    dgevalue[j].ch1=ch1;\n    ch2=dgevalue[i].ch2;\n    dgevalue[i].ch2=dgevalue[j].ch2;\n    dgevalue[j].ch2=ch2;\n    }\n    }\n    }\n    }\n    int main()\n    {\n    int i,j;\n    MGraph G;\n    char u;\n    Dgevalue dgevalue;\n    CreateUDG(G,dgevalue);\n    cout<<\"图的邻接矩阵为：\"<<endl;\n    for(i=0;i<G.vexnum;i++)\n    {\n    for(j=0;j<&G.vexnum;j++)\n    cout<<G.arcs[i][j].adj<<\"   \";\n    cout<<endl;\n    }\n    cout<<\"=============普利姆Prim算法===============\\n\";\n    cout<<\"请输入起始点：\";\n    cin>>u;\n    cout<<\"构成最小代价生成树的边集为：\\n\";\n    MiniSpanTree_PRIM(G,u);\n    cout<<\"============克鲁斯科尔Kruskal算法=============\\n\";\n    cout<<\"构成最小代价生成树的边集为：\\n\";\n    MiniSpanTree_KRSL(G,dgevalue);\n    return 0;\n    }\n\n#### 案例分析:：Constructing Roads\n\n题目链接：http://poj.org/problem?id=2421\n\n算法思想：运用prim方法构造最小生成树\n\n    #include<iostream>\n    #include<cstdio>\n    #include<cstring>\n    using namespace std;\n    #define INF 0xffffff\n    int arics[105][105];\n    int visit[105],dis[105],sum,n;\n    void prim()\n    {\n        memset(visit,0,sizeof(visit));\n        int i,j;\n        for(i=1;i<=n;i++)\n        {\n            dis[i]=arics[1][i];\n        }\n        visit[1]=1;\n        for(i=1;i<=n;i++)\n        {\n            int temp=INF;\n            int k;//记录最小边的顶点序号\n            for(j=1;j<=n;j++)\n            {\n                if((!visit[j])&&(temp>dis[j]))\n                {\n                    temp=dis[j];\n                    k=j;\n                }\n            }\n            if(temp==INF)\n            {\n                break;\n            }\n            visit[k]=1;//置为已访问标志\n            sum+=dis[k];\n            for(j=1;j<=n;j++)\n            {\n                if(!visit[j])\n                {\n                    if(dis[j]>arics[k][j])\n                    {\n                        dis[j]=arics[k][j];//更新值\n                    }\n                }\n            }\n        }\n\n    }\n    int main()\n    {\n        int i,j,a,b,q;\n        cin>>n;//输入节点个数\n        for(i=1;i<=n;i++) //输入带权邻接矩阵\n        {\n            for(j=1;j<=n;j++)\n            {\n                cin>>arics[i][j];\n            }\n        }\n        cin>>q;//已经建了公路的个数\n        for(i=1;i<=q;i++)\n        {\n             cin>>a>>b;//输入公路的两端（节点）\n             arics[a][b]=arics[b][a]=0;\n        }\n        sum=0;\n        prim();\n        cout<<sum<<endl;\n        return 0;\n    }","slug":"最小生成树","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwu300212o5plm7g71dq","content":"<h3 id=\"图论之最小生成树-Prim算法和Kruskal算法\"><a href=\"#图论之最小生成树-Prim算法和Kruskal算法\" class=\"headerlink\" title=\"图论之最小生成树(Prim算法和Kruskal算法)\"></a>图论之最小生成树(Prim算法和Kruskal算法)</h3><p>所有顶点均由边连接在一起，但不存在回路的图叫生成树,在一给定的无向图G = (V, E) 中，(u, v) 代表连接顶点 u 与顶点 v 的边（即），而 w(u, v) 代表此边的权重，若存在 T 为 E 的子集（即）且为无循环图，使得的 w(T) 最小，则此 T 为 G 的最小生成树。最小生成树其实是最小权重生成树的简称</p>\n<a id=\"more\"></a>\n<h4 id=\"生成树的遍历方式\"><a href=\"#生成树的遍历方式\" class=\"headerlink\" title=\"生成树的遍历方式\"></a>生成树的遍历方式</h4><pre><code>深度优先生成树\n广度优先生成树\n</code></pre><p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/tree.png\" alt=\"生成树的遍历方式\"></p>\n<h4 id=\"生成树的特点\"><a href=\"#生成树的特点\" class=\"headerlink\" title=\"生成树的特点\"></a>生成树的特点</h4><pre><code>生成树的顶点个数与图的顶点个数相同\n生成树是图的极小连通子图\n一个有n个顶点的连通图的生成树有n-1条边\n生成树中任意两个顶点间的路径是唯一的\n在生成树中再加一条边必然形成回路\n</code></pre><h4 id=\"构造最小生成树的方法\"><a href=\"#构造最小生成树的方法\" class=\"headerlink\" title=\"构造最小生成树的方法\"></a>构造最小生成树的方法</h4><h5 id=\"prim算法基本思想\"><a href=\"#prim算法基本思想\" class=\"headerlink\" title=\"prim算法基本思想\"></a>prim算法基本思想</h5><p>取图中任意一个顶点 v 作为生成树的根，之后往生成树上添加新的顶点 w。在添加的顶点 w 和已经在生成树上的顶点v 之间必定存在一条边，并且该边的权值在所有连通顶点 v 和 w 之间的边中取值最小。之后继续往生成树上添加顶点，直至生成树上含有 n-1 个顶点为止。</p>\n<p>一般情况下所添加的顶点应满足下列条件:</p>\n<pre><code>在生成树的构造过程中，图中 n 个顶点分属两个集合\n已落在生成树上的顶点集 U 和尚未落在生成树上的顶点集V-U ，则应在所有连通U中顶点和V-U中顶点的边中选取权值最小的边。\n</code></pre><h5 id=\"prim方法实现过程原理图\"><a href=\"#prim方法实现过程原理图\" class=\"headerlink\" title=\"prim方法实现过程原理图\"></a>prim方法实现过程原理图</h5><p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/prim.png\" alt=\"prim算法原理图\"></p>\n<h5 id=\"prim算法描述\"><a href=\"#prim算法描述\" class=\"headerlink\" title=\"prim算法描述\"></a>prim算法描述</h5><pre><code>Prim(Mgraph G, VexsType v0)\n{ \n// v0－初始出发点，T－生成对中边的集合\n// U－生成树中顶点的集合\nT=Φ\nU={v0}\nwhile(U&lt;&gt;V)\n{\n    求u,v,使得 c(u,v)最小，u €U, v €V-U\n    T=TU{(u,v)}\n    U=UU{v}\n}\n｝\n</code></pre><h5 id=\"kruskal算法基本思想\"><a href=\"#kruskal算法基本思想\" class=\"headerlink\" title=\"kruskal算法基本思想\"></a>kruskal算法基本思想</h5><p>具体做法：</p>\n<p>先构造一个只含 n 个顶点的子图 SG，然后从权值最小的边开始，若它的添加不使SG 中产生回路，则在 SG 上加上这条边，如此重复，直至加上 n-1 条边为止考虑问题的出发点：</p>\n<p>为使生成树上边的权值之和达到最小，则应使生成树中每一条边的权值尽可能地小</p>\n<h5 id=\"kruskal算法实现过程原理图\"><a href=\"#kruskal算法实现过程原理图\" class=\"headerlink\" title=\"kruskal算法实现过程原理图\"></a>kruskal算法实现过程原理图</h5><p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/kruskal.png\" alt=\"kruskal算法原理图\"></p>\n<h4 id=\"prim和Kruskal算法具体实现c-版-官方\"><a href=\"#prim和Kruskal算法具体实现c-版-官方\" class=\"headerlink\" title=\"prim和Kruskal算法具体实现c++版(官方)\"></a>prim和Kruskal算法具体实现c++版(官方)</h4><pre><code>#include&lt;iostream&gt;\n#include&lt;cstdlib&gt;\n#include&lt;cstdio&gt;\n#define MAX_VERTEX_NUM 20 //保存节点个数\n#define OK 1\n#define ERROR 0\n#define MAX 1000\nusing namespace std;\ntypedef struct Arcell//保存邻接矩阵\n{\ndouble adj;//边的权值\n}Arcell,AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];\ntypedef struct MGraph\n{\nchar vexs[MAX_VERTEX_NUM];//节点数组\nAdjMatrix arcs;//邻接矩阵\nint vexnum,arcnum;//图的节点个数和边或弧数\n}MGraph;\ntypedef struct Pnode//用于普利姆prim算法\n{\nchar adjvex;//节点\ndouble lowcost;//权值\n}Pnode,Closedge[MAX_VERTEX_NUM];//记录顶点集U到V-U的代价最小的边的辅助数组定义\ntypedef struct Knode//用于克鲁斯卡尔算法中存储一条边及其对应的2个节点\n{\nchar ch1;//节点1\nchar ch2;//节点2\ndouble value;//权值\n}Knode,Dgevalue[MAX_VERTEX_NUM];\n\n//-------------------------------------------------------------------------------\nint CreateUDG(MGraph &amp;G,Dgevalue &amp;dgevalue);\nint LocateVex(MGraph G,char ch);\nint Minimum(MGraph G,Closedge closedge);\nvoid MiniSpanTree_PRIM(MGraph G,char u);\nvoid Sortdge(Dgevalue &amp;dgevalue,MGraph G);\n\n//-------------------------------------------------------------------------------\nint CreateUDG(MGraph &amp;G,Dgevalue &amp;dgevalue)//构造无向加权图的邻接矩阵\n{\nint i,j,k;\ncout&lt;&lt;&quot;请输入图中节点个数和边/弧的条数：&quot;; cin&gt;&gt;G.vexnum&gt;&gt;G.arcnum;\ncout&lt;&gt;G.vexs[i];\nfor(i=0;i&lt;G.vexnum;++i)//初始化数组\n{\nfor(j=0;j&gt;dgevalue[k].ch1&gt;&gt;dgevalue[k].ch2&gt;&gt;dgevalue[k].value;\ni=LocateVex(G,dgevalue[k].ch1);\nj=LocateVex(G,dgevalue[k].ch2);\nG.arcs[i][j].adj=dgevalue[k].value;\nG.arcs[j][i].adj=G.arcs[i][j].adj;\n}\nreturn OK;\n}\nint LocateVex(MGraph G,char ch)//确定节点ch在图G.vexs中的位置\n{\nint a;\nfor(int i=0;idgevalue[j].value)\n{\ntemp=dgevalue[i].value;\ndgevalue[i].value=dgevalue[j].value;\ndgevalue[j].value=temp;\nch1=dgevalue[i].ch1;\ndgevalue[i].ch1=dgevalue[j].ch1;\ndgevalue[j].ch1=ch1;\nch2=dgevalue[i].ch2;\ndgevalue[i].ch2=dgevalue[j].ch2;\ndgevalue[j].ch2=ch2;\n}\n}\n}\n}\nint main()\n{\nint i,j;\nMGraph G;\nchar u;\nDgevalue dgevalue;\nCreateUDG(G,dgevalue);\ncout&lt;&lt;&quot;图的邻接矩阵为：&quot;&lt;&lt;endl;\nfor(i=0;i&lt;G.vexnum;i++)\n{\nfor(j=0;j&lt;&amp;G.vexnum;j++)\ncout&lt;&lt;G.arcs[i][j].adj&lt;&lt;&quot;   &quot;;\ncout&lt;&lt;endl;\n}\ncout&lt;&lt;&quot;=============普利姆Prim算法===============\\n&quot;;\ncout&lt;&lt;&quot;请输入起始点：&quot;;\ncin&gt;&gt;u;\ncout&lt;&lt;&quot;构成最小代价生成树的边集为：\\n&quot;;\nMiniSpanTree_PRIM(G,u);\ncout&lt;&lt;&quot;============克鲁斯科尔Kruskal算法=============\\n&quot;;\ncout&lt;&lt;&quot;构成最小代价生成树的边集为：\\n&quot;;\nMiniSpanTree_KRSL(G,dgevalue);\nreturn 0;\n}\n</code></pre><h4 id=\"案例分析-：Constructing-Roads\"><a href=\"#案例分析-：Constructing-Roads\" class=\"headerlink\" title=\"案例分析:：Constructing Roads\"></a>案例分析:：Constructing Roads</h4><p>题目链接：<a href=\"http://poj.org/problem?id=2421\" target=\"_blank\" rel=\"external\">http://poj.org/problem?id=2421</a></p>\n<p>算法思想：运用prim方法构造最小生成树</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\nusing namespace std;\n#define INF 0xffffff\nint arics[105][105];\nint visit[105],dis[105],sum,n;\nvoid prim()\n{\n    memset(visit,0,sizeof(visit));\n    int i,j;\n    for(i=1;i&lt;=n;i++)\n    {\n        dis[i]=arics[1][i];\n    }\n    visit[1]=1;\n    for(i=1;i&lt;=n;i++)\n    {\n        int temp=INF;\n        int k;//记录最小边的顶点序号\n        for(j=1;j&lt;=n;j++)\n        {\n            if((!visit[j])&amp;&amp;(temp&gt;dis[j]))\n            {\n                temp=dis[j];\n                k=j;\n            }\n        }\n        if(temp==INF)\n        {\n            break;\n        }\n        visit[k]=1;//置为已访问标志\n        sum+=dis[k];\n        for(j=1;j&lt;=n;j++)\n        {\n            if(!visit[j])\n            {\n                if(dis[j]&gt;arics[k][j])\n                {\n                    dis[j]=arics[k][j];//更新值\n                }\n            }\n        }\n    }\n\n}\nint main()\n{\n    int i,j,a,b,q;\n    cin&gt;&gt;n;//输入节点个数\n    for(i=1;i&lt;=n;i++) //输入带权邻接矩阵\n    {\n        for(j=1;j&lt;=n;j++)\n        {\n            cin&gt;&gt;arics[i][j];\n        }\n    }\n    cin&gt;&gt;q;//已经建了公路的个数\n    for(i=1;i&lt;=q;i++)\n    {\n         cin&gt;&gt;a&gt;&gt;b;//输入公路的两端（节点）\n         arics[a][b]=arics[b][a]=0;\n    }\n    sum=0;\n    prim();\n    cout&lt;&lt;sum&lt;&lt;endl;\n    return 0;\n}\n</code></pre>","site":{"data":{}},"excerpt":"<h3 id=\"图论之最小生成树-Prim算法和Kruskal算法\"><a href=\"#图论之最小生成树-Prim算法和Kruskal算法\" class=\"headerlink\" title=\"图论之最小生成树(Prim算法和Kruskal算法)\"></a>图论之最小生成树(Prim算法和Kruskal算法)</h3><p>所有顶点均由边连接在一起，但不存在回路的图叫生成树,在一给定的无向图G = (V, E) 中，(u, v) 代表连接顶点 u 与顶点 v 的边（即），而 w(u, v) 代表此边的权重，若存在 T 为 E 的子集（即）且为无循环图，使得的 w(T) 最小，则此 T 为 G 的最小生成树。最小生成树其实是最小权重生成树的简称</p>","more":"<h4 id=\"生成树的遍历方式\"><a href=\"#生成树的遍历方式\" class=\"headerlink\" title=\"生成树的遍历方式\"></a>生成树的遍历方式</h4><pre><code>深度优先生成树\n广度优先生成树\n</code></pre><p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/tree.png\" alt=\"生成树的遍历方式\"></p>\n<h4 id=\"生成树的特点\"><a href=\"#生成树的特点\" class=\"headerlink\" title=\"生成树的特点\"></a>生成树的特点</h4><pre><code>生成树的顶点个数与图的顶点个数相同\n生成树是图的极小连通子图\n一个有n个顶点的连通图的生成树有n-1条边\n生成树中任意两个顶点间的路径是唯一的\n在生成树中再加一条边必然形成回路\n</code></pre><h4 id=\"构造最小生成树的方法\"><a href=\"#构造最小生成树的方法\" class=\"headerlink\" title=\"构造最小生成树的方法\"></a>构造最小生成树的方法</h4><h5 id=\"prim算法基本思想\"><a href=\"#prim算法基本思想\" class=\"headerlink\" title=\"prim算法基本思想\"></a>prim算法基本思想</h5><p>取图中任意一个顶点 v 作为生成树的根，之后往生成树上添加新的顶点 w。在添加的顶点 w 和已经在生成树上的顶点v 之间必定存在一条边，并且该边的权值在所有连通顶点 v 和 w 之间的边中取值最小。之后继续往生成树上添加顶点，直至生成树上含有 n-1 个顶点为止。</p>\n<p>一般情况下所添加的顶点应满足下列条件:</p>\n<pre><code>在生成树的构造过程中，图中 n 个顶点分属两个集合\n已落在生成树上的顶点集 U 和尚未落在生成树上的顶点集V-U ，则应在所有连通U中顶点和V-U中顶点的边中选取权值最小的边。\n</code></pre><h5 id=\"prim方法实现过程原理图\"><a href=\"#prim方法实现过程原理图\" class=\"headerlink\" title=\"prim方法实现过程原理图\"></a>prim方法实现过程原理图</h5><p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/prim.png\" alt=\"prim算法原理图\"></p>\n<h5 id=\"prim算法描述\"><a href=\"#prim算法描述\" class=\"headerlink\" title=\"prim算法描述\"></a>prim算法描述</h5><pre><code>Prim(Mgraph G, VexsType v0)\n{ \n// v0－初始出发点，T－生成对中边的集合\n// U－生成树中顶点的集合\nT=Φ\nU={v0}\nwhile(U&lt;&gt;V)\n{\n    求u,v,使得 c(u,v)最小，u €U, v €V-U\n    T=TU{(u,v)}\n    U=UU{v}\n}\n｝\n</code></pre><h5 id=\"kruskal算法基本思想\"><a href=\"#kruskal算法基本思想\" class=\"headerlink\" title=\"kruskal算法基本思想\"></a>kruskal算法基本思想</h5><p>具体做法：</p>\n<p>先构造一个只含 n 个顶点的子图 SG，然后从权值最小的边开始，若它的添加不使SG 中产生回路，则在 SG 上加上这条边，如此重复，直至加上 n-1 条边为止考虑问题的出发点：</p>\n<p>为使生成树上边的权值之和达到最小，则应使生成树中每一条边的权值尽可能地小</p>\n<h5 id=\"kruskal算法实现过程原理图\"><a href=\"#kruskal算法实现过程原理图\" class=\"headerlink\" title=\"kruskal算法实现过程原理图\"></a>kruskal算法实现过程原理图</h5><p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/kruskal.png\" alt=\"kruskal算法原理图\"></p>\n<h4 id=\"prim和Kruskal算法具体实现c-版-官方\"><a href=\"#prim和Kruskal算法具体实现c-版-官方\" class=\"headerlink\" title=\"prim和Kruskal算法具体实现c++版(官方)\"></a>prim和Kruskal算法具体实现c++版(官方)</h4><pre><code>#include&lt;iostream&gt;\n#include&lt;cstdlib&gt;\n#include&lt;cstdio&gt;\n#define MAX_VERTEX_NUM 20 //保存节点个数\n#define OK 1\n#define ERROR 0\n#define MAX 1000\nusing namespace std;\ntypedef struct Arcell//保存邻接矩阵\n{\ndouble adj;//边的权值\n}Arcell,AdjMatrix[MAX_VERTEX_NUM][MAX_VERTEX_NUM];\ntypedef struct MGraph\n{\nchar vexs[MAX_VERTEX_NUM];//节点数组\nAdjMatrix arcs;//邻接矩阵\nint vexnum,arcnum;//图的节点个数和边或弧数\n}MGraph;\ntypedef struct Pnode//用于普利姆prim算法\n{\nchar adjvex;//节点\ndouble lowcost;//权值\n}Pnode,Closedge[MAX_VERTEX_NUM];//记录顶点集U到V-U的代价最小的边的辅助数组定义\ntypedef struct Knode//用于克鲁斯卡尔算法中存储一条边及其对应的2个节点\n{\nchar ch1;//节点1\nchar ch2;//节点2\ndouble value;//权值\n}Knode,Dgevalue[MAX_VERTEX_NUM];\n\n//-------------------------------------------------------------------------------\nint CreateUDG(MGraph &amp;G,Dgevalue &amp;dgevalue);\nint LocateVex(MGraph G,char ch);\nint Minimum(MGraph G,Closedge closedge);\nvoid MiniSpanTree_PRIM(MGraph G,char u);\nvoid Sortdge(Dgevalue &amp;dgevalue,MGraph G);\n\n//-------------------------------------------------------------------------------\nint CreateUDG(MGraph &amp;G,Dgevalue &amp;dgevalue)//构造无向加权图的邻接矩阵\n{\nint i,j,k;\ncout&lt;&lt;&quot;请输入图中节点个数和边/弧的条数：&quot;; cin&gt;&gt;G.vexnum&gt;&gt;G.arcnum;\ncout&lt;&gt;G.vexs[i];\nfor(i=0;i&lt;G.vexnum;++i)//初始化数组\n{\nfor(j=0;j&gt;dgevalue[k].ch1&gt;&gt;dgevalue[k].ch2&gt;&gt;dgevalue[k].value;\ni=LocateVex(G,dgevalue[k].ch1);\nj=LocateVex(G,dgevalue[k].ch2);\nG.arcs[i][j].adj=dgevalue[k].value;\nG.arcs[j][i].adj=G.arcs[i][j].adj;\n}\nreturn OK;\n}\nint LocateVex(MGraph G,char ch)//确定节点ch在图G.vexs中的位置\n{\nint a;\nfor(int i=0;idgevalue[j].value)\n{\ntemp=dgevalue[i].value;\ndgevalue[i].value=dgevalue[j].value;\ndgevalue[j].value=temp;\nch1=dgevalue[i].ch1;\ndgevalue[i].ch1=dgevalue[j].ch1;\ndgevalue[j].ch1=ch1;\nch2=dgevalue[i].ch2;\ndgevalue[i].ch2=dgevalue[j].ch2;\ndgevalue[j].ch2=ch2;\n}\n}\n}\n}\nint main()\n{\nint i,j;\nMGraph G;\nchar u;\nDgevalue dgevalue;\nCreateUDG(G,dgevalue);\ncout&lt;&lt;&quot;图的邻接矩阵为：&quot;&lt;&lt;endl;\nfor(i=0;i&lt;G.vexnum;i++)\n{\nfor(j=0;j&lt;&amp;G.vexnum;j++)\ncout&lt;&lt;G.arcs[i][j].adj&lt;&lt;&quot;   &quot;;\ncout&lt;&lt;endl;\n}\ncout&lt;&lt;&quot;=============普利姆Prim算法===============\\n&quot;;\ncout&lt;&lt;&quot;请输入起始点：&quot;;\ncin&gt;&gt;u;\ncout&lt;&lt;&quot;构成最小代价生成树的边集为：\\n&quot;;\nMiniSpanTree_PRIM(G,u);\ncout&lt;&lt;&quot;============克鲁斯科尔Kruskal算法=============\\n&quot;;\ncout&lt;&lt;&quot;构成最小代价生成树的边集为：\\n&quot;;\nMiniSpanTree_KRSL(G,dgevalue);\nreturn 0;\n}\n</code></pre><h4 id=\"案例分析-：Constructing-Roads\"><a href=\"#案例分析-：Constructing-Roads\" class=\"headerlink\" title=\"案例分析:：Constructing Roads\"></a>案例分析:：Constructing Roads</h4><p>题目链接：<a href=\"http://poj.org/problem?id=2421\" target=\"_blank\" rel=\"external\">http://poj.org/problem?id=2421</a></p>\n<p>算法思想：运用prim方法构造最小生成树</p>\n<pre><code>#include&lt;iostream&gt;\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\nusing namespace std;\n#define INF 0xffffff\nint arics[105][105];\nint visit[105],dis[105],sum,n;\nvoid prim()\n{\n    memset(visit,0,sizeof(visit));\n    int i,j;\n    for(i=1;i&lt;=n;i++)\n    {\n        dis[i]=arics[1][i];\n    }\n    visit[1]=1;\n    for(i=1;i&lt;=n;i++)\n    {\n        int temp=INF;\n        int k;//记录最小边的顶点序号\n        for(j=1;j&lt;=n;j++)\n        {\n            if((!visit[j])&amp;&amp;(temp&gt;dis[j]))\n            {\n                temp=dis[j];\n                k=j;\n            }\n        }\n        if(temp==INF)\n        {\n            break;\n        }\n        visit[k]=1;//置为已访问标志\n        sum+=dis[k];\n        for(j=1;j&lt;=n;j++)\n        {\n            if(!visit[j])\n            {\n                if(dis[j]&gt;arics[k][j])\n                {\n                    dis[j]=arics[k][j];//更新值\n                }\n            }\n        }\n    }\n\n}\nint main()\n{\n    int i,j,a,b,q;\n    cin&gt;&gt;n;//输入节点个数\n    for(i=1;i&lt;=n;i++) //输入带权邻接矩阵\n    {\n        for(j=1;j&lt;=n;j++)\n        {\n            cin&gt;&gt;arics[i][j];\n        }\n    }\n    cin&gt;&gt;q;//已经建了公路的个数\n    for(i=1;i&lt;=q;i++)\n    {\n         cin&gt;&gt;a&gt;&gt;b;//输入公路的两端（节点）\n         arics[a][b]=arics[b][a]=0;\n    }\n    sum=0;\n    prim();\n    cout&lt;&lt;sum&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"title":"砸向自己的巨人坑","date":"2014-12-17T00:00:00.000Z","_content":"\n### 不要乱写注释\n\n为了体现自己的专业，在写代码的时候，我会尽量写注释。可是今天却被自己写的注释整整坑了6个小时。当php注释风格遭遇html注释风格的时候，我想很少有像我这样的逗逼掉进了陷阱吧。\n\n#### 坑的来源(注释风格迥异)\n\n    php注释风格： // 单行注释 ; /**/ 多行注释\n    html注释风格：<!-- -->\n\n#### 开始挖坑\n\n今天我在写一个ajax异步请求的时候，主要是测试一段代码。\n    \n业务逻辑很简单： 入口页面填写用户名和密码，点击注册按钮，触发引入js文件中的ajax的异步请求，向远程数据库插入数据。\n\n连接数据库连接部分还是一如既往写了一个类，还写了4行注释，现在来看，这样来连数据库绝对是菜鸟。由于这4行不在<?php ?>标签内，所以是<b><color=\"red\">html注释</color></b>。\n\n    <!--\n        数据库类\n        author:caijl\n        date:2014/12/17;\n    -->\n    <?php\n        class ConnectionMySQL{\n            \n            //主机\n            private $host=\"localhost\";\n            \n            //数据库用户\n            private $name = \"root\";\n\n            //数据库服务器密码\n\n            private $password = \"root\";\n\n            //数据库名称\n\n            private $database = \"\"; \n\n            //连接\n\n            private $conn =\"\";\n\n            //构造函数\n\n            function __construct($host, $name, $password, $database){\n                $this->host = $host;\n                $this->name = $name;\n                $this->password = $password;\n                $this->database = $database;\n                $this->connect();\n            }\n\n            //连接函数\n            function connect()\n            {\n                $this->conn = mysql_connect($this->host, $this->name, $this->password);\n                mysql_select_db($this->database);\n                mysql_query(\"set names utf8\");\n            }\n\n            //处理函数\n            function query($sql)\n            {\n                return mysql_query($sql);\n            }\n            //关闭连接\n            function close()\n            {\n                mysql_close();\n            }\n            //获取连接\n            function getDb()\n            {\n                return $this->conn;\n            }\n        }   \n    ?>\n\n在处理请求的文件中，我是这样处理来自入口页面的请求的\n\n    <?php\n      require(\"conn.php\");\n      header('Content-type: text/html; charset=utf8');\n      //$user_info = json_encode($_POST);\n      $user_name = json_encode($_POST[\"name\"]); \n      $user_pwd =  json_encode($_POST[\"pwd\"]);\n      $db = new ConnectionMySQL(\"192.168.25.108\",\"root\",\"123456\",\"test\");\n      $sql = \"insert into user_info(user_name, user_pwd) values($user_name, $user_pwd)\";\n      $result = $db->query($sql);\n      echo json_encode($result);\n    ?>\n\n报错结果： object xmlHttprequest ,但是数据插入到数据库中了，相当纳闷。\n\n#### 爬出坑\n\n    为了解决这个问题,我用了echo,var_dump函数进行输出测试，但都石沉大海。不甘心就此结局。\n搬来google浏览器自带调试工具，开始学习ajax调试。看到<a href=\"http://www.cnblogs.com/mybest/archive/2011/12/13/2285730.html\" style=\"color:red;\">Jquery.Ajax之错误调试帮助信息</a>，开始了\n疯狂的调试之旅。在js文件中设置断点还不够，对错误信息进行全面分析。\n![Jquery.Ajax请求](/assets/images/JqueryAjax.png)\n\n单步调试一番后，错误详情为parseerror.难道是返回数据类型不是json,看下图\n![json数据错误](/assets/images/parseerror.png)\n\n终于找到错误:<B> <color=\"red\">Invalid Json</color></B>\n\n竟然还有我在数据库连接类中的注释信息？难道注释不起作用了？\n\n\n#### 脱离坑\n\n    原来是在类文件中，前四行是作为html注释，引入到处理请求的文件中，由于该段内容在php标签内，所以注释格式应该是/* */,看到此番注释，php当然不识别。\n\n#### 总结\n\n    之所以遇到坑，就是还太嫩了。不过收获的是：更加会利用google浏览器调试一些信息。\n\n\n\n\n","source":"_posts/砸向自己的巨人坑.md","raw":"---\ntitle: 砸向自己的巨人坑\ntags: []\ndate: 2014-12-17 08:00:00\n---\n\n### 不要乱写注释\n\n为了体现自己的专业，在写代码的时候，我会尽量写注释。可是今天却被自己写的注释整整坑了6个小时。当php注释风格遭遇html注释风格的时候，我想很少有像我这样的逗逼掉进了陷阱吧。\n\n#### 坑的来源(注释风格迥异)\n\n    php注释风格： // 单行注释 ; /**/ 多行注释\n    html注释风格：<!-- -->\n\n#### 开始挖坑\n\n今天我在写一个ajax异步请求的时候，主要是测试一段代码。\n    \n业务逻辑很简单： 入口页面填写用户名和密码，点击注册按钮，触发引入js文件中的ajax的异步请求，向远程数据库插入数据。\n\n连接数据库连接部分还是一如既往写了一个类，还写了4行注释，现在来看，这样来连数据库绝对是菜鸟。由于这4行不在<?php ?>标签内，所以是<b><color=\"red\">html注释</color></b>。\n\n    <!--\n        数据库类\n        author:caijl\n        date:2014/12/17;\n    -->\n    <?php\n        class ConnectionMySQL{\n            \n            //主机\n            private $host=\"localhost\";\n            \n            //数据库用户\n            private $name = \"root\";\n\n            //数据库服务器密码\n\n            private $password = \"root\";\n\n            //数据库名称\n\n            private $database = \"\"; \n\n            //连接\n\n            private $conn =\"\";\n\n            //构造函数\n\n            function __construct($host, $name, $password, $database){\n                $this->host = $host;\n                $this->name = $name;\n                $this->password = $password;\n                $this->database = $database;\n                $this->connect();\n            }\n\n            //连接函数\n            function connect()\n            {\n                $this->conn = mysql_connect($this->host, $this->name, $this->password);\n                mysql_select_db($this->database);\n                mysql_query(\"set names utf8\");\n            }\n\n            //处理函数\n            function query($sql)\n            {\n                return mysql_query($sql);\n            }\n            //关闭连接\n            function close()\n            {\n                mysql_close();\n            }\n            //获取连接\n            function getDb()\n            {\n                return $this->conn;\n            }\n        }   \n    ?>\n\n在处理请求的文件中，我是这样处理来自入口页面的请求的\n\n    <?php\n      require(\"conn.php\");\n      header('Content-type: text/html; charset=utf8');\n      //$user_info = json_encode($_POST);\n      $user_name = json_encode($_POST[\"name\"]); \n      $user_pwd =  json_encode($_POST[\"pwd\"]);\n      $db = new ConnectionMySQL(\"192.168.25.108\",\"root\",\"123456\",\"test\");\n      $sql = \"insert into user_info(user_name, user_pwd) values($user_name, $user_pwd)\";\n      $result = $db->query($sql);\n      echo json_encode($result);\n    ?>\n\n报错结果： object xmlHttprequest ,但是数据插入到数据库中了，相当纳闷。\n\n#### 爬出坑\n\n    为了解决这个问题,我用了echo,var_dump函数进行输出测试，但都石沉大海。不甘心就此结局。\n搬来google浏览器自带调试工具，开始学习ajax调试。看到<a href=\"http://www.cnblogs.com/mybest/archive/2011/12/13/2285730.html\" style=\"color:red;\">Jquery.Ajax之错误调试帮助信息</a>，开始了\n疯狂的调试之旅。在js文件中设置断点还不够，对错误信息进行全面分析。\n![Jquery.Ajax请求](/assets/images/JqueryAjax.png)\n\n单步调试一番后，错误详情为parseerror.难道是返回数据类型不是json,看下图\n![json数据错误](/assets/images/parseerror.png)\n\n终于找到错误:<B> <color=\"red\">Invalid Json</color></B>\n\n竟然还有我在数据库连接类中的注释信息？难道注释不起作用了？\n\n\n#### 脱离坑\n\n    原来是在类文件中，前四行是作为html注释，引入到处理请求的文件中，由于该段内容在php标签内，所以注释格式应该是/* */,看到此番注释，php当然不识别。\n\n#### 总结\n\n    之所以遇到坑，就是还太嫩了。不过收获的是：更加会利用google浏览器调试一些信息。\n\n\n\n\n","slug":"砸向自己的巨人坑","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwu500222o5pye5sd7s4","content":"<h3 id=\"不要乱写注释\"><a href=\"#不要乱写注释\" class=\"headerlink\" title=\"不要乱写注释\"></a>不要乱写注释</h3><p>为了体现自己的专业，在写代码的时候，我会尽量写注释。可是今天却被自己写的注释整整坑了6个小时。当php注释风格遭遇html注释风格的时候，我想很少有像我这样的逗逼掉进了陷阱吧。</p>\n<h4 id=\"坑的来源-注释风格迥异\"><a href=\"#坑的来源-注释风格迥异\" class=\"headerlink\" title=\"坑的来源(注释风格迥异)\"></a>坑的来源(注释风格迥异)</h4><pre><code>php注释风格： // 单行注释 ; /**/ 多行注释\nhtml注释风格：&lt;!-- --&gt;\n</code></pre><h4 id=\"开始挖坑\"><a href=\"#开始挖坑\" class=\"headerlink\" title=\"开始挖坑\"></a>开始挖坑</h4><p>今天我在写一个ajax异步请求的时候，主要是测试一段代码。</p>\n<p>业务逻辑很简单： 入口页面填写用户名和密码，点击注册按钮，触发引入js文件中的ajax的异步请求，向远程数据库插入数据。</p>\n<p>连接数据库连接部分还是一如既往写了一个类，还写了4行注释，现在来看，这样来连数据库绝对是菜鸟。由于这4行不在&lt;?php ?&gt;标签内，所以是<b><color=\"red\">html注释</color=\"red\"></b>。</p>\n<pre><code>&lt;!--\n    数据库类\n    author:caijl\n    date:2014/12/17;\n--&gt;\n&lt;?php\n    class ConnectionMySQL{\n\n        //主机\n        private $host=&quot;localhost&quot;;\n\n        //数据库用户\n        private $name = &quot;root&quot;;\n\n        //数据库服务器密码\n\n        private $password = &quot;root&quot;;\n\n        //数据库名称\n\n        private $database = &quot;&quot;; \n\n        //连接\n\n        private $conn =&quot;&quot;;\n\n        //构造函数\n\n        function __construct($host, $name, $password, $database){\n            $this-&gt;host = $host;\n            $this-&gt;name = $name;\n            $this-&gt;password = $password;\n            $this-&gt;database = $database;\n            $this-&gt;connect();\n        }\n\n        //连接函数\n        function connect()\n        {\n            $this-&gt;conn = mysql_connect($this-&gt;host, $this-&gt;name, $this-&gt;password);\n            mysql_select_db($this-&gt;database);\n            mysql_query(&quot;set names utf8&quot;);\n        }\n\n        //处理函数\n        function query($sql)\n        {\n            return mysql_query($sql);\n        }\n        //关闭连接\n        function close()\n        {\n            mysql_close();\n        }\n        //获取连接\n        function getDb()\n        {\n            return $this-&gt;conn;\n        }\n    }   \n?&gt;\n</code></pre><p>在处理请求的文件中，我是这样处理来自入口页面的请求的</p>\n<pre><code>&lt;?php\n  require(&quot;conn.php&quot;);\n  header(&apos;Content-type: text/html; charset=utf8&apos;);\n  //$user_info = json_encode($_POST);\n  $user_name = json_encode($_POST[&quot;name&quot;]); \n  $user_pwd =  json_encode($_POST[&quot;pwd&quot;]);\n  $db = new ConnectionMySQL(&quot;192.168.25.108&quot;,&quot;root&quot;,&quot;123456&quot;,&quot;test&quot;);\n  $sql = &quot;insert into user_info(user_name, user_pwd) values($user_name, $user_pwd)&quot;;\n  $result = $db-&gt;query($sql);\n  echo json_encode($result);\n?&gt;\n</code></pre><p>报错结果： object xmlHttprequest ,但是数据插入到数据库中了，相当纳闷。</p>\n<h4 id=\"爬出坑\"><a href=\"#爬出坑\" class=\"headerlink\" title=\"爬出坑\"></a>爬出坑</h4><pre><code>为了解决这个问题,我用了echo,var_dump函数进行输出测试，但都石沉大海。不甘心就此结局。\n</code></pre><p>搬来google浏览器自带调试工具，开始学习ajax调试。看到<a href=\"http://www.cnblogs.com/mybest/archive/2011/12/13/2285730.html\" style=\"color:red;\" target=\"_blank\" rel=\"external\">Jquery.Ajax之错误调试帮助信息</a>，开始了<br>疯狂的调试之旅。在js文件中设置断点还不够，对错误信息进行全面分析。<br><img src=\"/assets/images/JqueryAjax.png\" alt=\"Jquery.Ajax请求\"></p>\n<p>单步调试一番后，错误详情为parseerror.难道是返回数据类型不是json,看下图<br><img src=\"/assets/images/parseerror.png\" alt=\"json数据错误\"></p>\n<p>终于找到错误:<b> <color=\"red\">Invalid Json</color=\"red\"></b></p>\n<p>竟然还有我在数据库连接类中的注释信息？难道注释不起作用了？</p>\n<h4 id=\"脱离坑\"><a href=\"#脱离坑\" class=\"headerlink\" title=\"脱离坑\"></a>脱离坑</h4><pre><code>原来是在类文件中，前四行是作为html注释，引入到处理请求的文件中，由于该段内容在php标签内，所以注释格式应该是/* */,看到此番注释，php当然不识别。\n</code></pre><h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><pre><code>之所以遇到坑，就是还太嫩了。不过收获的是：更加会利用google浏览器调试一些信息。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"不要乱写注释\"><a href=\"#不要乱写注释\" class=\"headerlink\" title=\"不要乱写注释\"></a>不要乱写注释</h3><p>为了体现自己的专业，在写代码的时候，我会尽量写注释。可是今天却被自己写的注释整整坑了6个小时。当php注释风格遭遇html注释风格的时候，我想很少有像我这样的逗逼掉进了陷阱吧。</p>\n<h4 id=\"坑的来源-注释风格迥异\"><a href=\"#坑的来源-注释风格迥异\" class=\"headerlink\" title=\"坑的来源(注释风格迥异)\"></a>坑的来源(注释风格迥异)</h4><pre><code>php注释风格： // 单行注释 ; /**/ 多行注释\nhtml注释风格：&lt;!-- --&gt;\n</code></pre><h4 id=\"开始挖坑\"><a href=\"#开始挖坑\" class=\"headerlink\" title=\"开始挖坑\"></a>开始挖坑</h4><p>今天我在写一个ajax异步请求的时候，主要是测试一段代码。</p>\n<p>业务逻辑很简单： 入口页面填写用户名和密码，点击注册按钮，触发引入js文件中的ajax的异步请求，向远程数据库插入数据。</p>\n<p>连接数据库连接部分还是一如既往写了一个类，还写了4行注释，现在来看，这样来连数据库绝对是菜鸟。由于这4行不在&lt;?php ?&gt;标签内，所以是<b><color=\"red\">html注释</color=\"red\"></b>。</p>\n<pre><code>&lt;!--\n    数据库类\n    author:caijl\n    date:2014/12/17;\n--&gt;\n&lt;?php\n    class ConnectionMySQL{\n\n        //主机\n        private $host=&quot;localhost&quot;;\n\n        //数据库用户\n        private $name = &quot;root&quot;;\n\n        //数据库服务器密码\n\n        private $password = &quot;root&quot;;\n\n        //数据库名称\n\n        private $database = &quot;&quot;; \n\n        //连接\n\n        private $conn =&quot;&quot;;\n\n        //构造函数\n\n        function __construct($host, $name, $password, $database){\n            $this-&gt;host = $host;\n            $this-&gt;name = $name;\n            $this-&gt;password = $password;\n            $this-&gt;database = $database;\n            $this-&gt;connect();\n        }\n\n        //连接函数\n        function connect()\n        {\n            $this-&gt;conn = mysql_connect($this-&gt;host, $this-&gt;name, $this-&gt;password);\n            mysql_select_db($this-&gt;database);\n            mysql_query(&quot;set names utf8&quot;);\n        }\n\n        //处理函数\n        function query($sql)\n        {\n            return mysql_query($sql);\n        }\n        //关闭连接\n        function close()\n        {\n            mysql_close();\n        }\n        //获取连接\n        function getDb()\n        {\n            return $this-&gt;conn;\n        }\n    }   \n?&gt;\n</code></pre><p>在处理请求的文件中，我是这样处理来自入口页面的请求的</p>\n<pre><code>&lt;?php\n  require(&quot;conn.php&quot;);\n  header(&apos;Content-type: text/html; charset=utf8&apos;);\n  //$user_info = json_encode($_POST);\n  $user_name = json_encode($_POST[&quot;name&quot;]); \n  $user_pwd =  json_encode($_POST[&quot;pwd&quot;]);\n  $db = new ConnectionMySQL(&quot;192.168.25.108&quot;,&quot;root&quot;,&quot;123456&quot;,&quot;test&quot;);\n  $sql = &quot;insert into user_info(user_name, user_pwd) values($user_name, $user_pwd)&quot;;\n  $result = $db-&gt;query($sql);\n  echo json_encode($result);\n?&gt;\n</code></pre><p>报错结果： object xmlHttprequest ,但是数据插入到数据库中了，相当纳闷。</p>\n<h4 id=\"爬出坑\"><a href=\"#爬出坑\" class=\"headerlink\" title=\"爬出坑\"></a>爬出坑</h4><pre><code>为了解决这个问题,我用了echo,var_dump函数进行输出测试，但都石沉大海。不甘心就此结局。\n</code></pre><p>搬来google浏览器自带调试工具，开始学习ajax调试。看到<a href=\"http://www.cnblogs.com/mybest/archive/2011/12/13/2285730.html\" style=\"color:red;\" target=\"_blank\" rel=\"external\">Jquery.Ajax之错误调试帮助信息</a>，开始了<br>疯狂的调试之旅。在js文件中设置断点还不够，对错误信息进行全面分析。<br><img src=\"/assets/images/JqueryAjax.png\" alt=\"Jquery.Ajax请求\"></p>\n<p>单步调试一番后，错误详情为parseerror.难道是返回数据类型不是json,看下图<br><img src=\"/assets/images/parseerror.png\" alt=\"json数据错误\"></p>\n<p>终于找到错误:<b> <color=\"red\">Invalid Json</color=\"red\"></b></p>\n<p>竟然还有我在数据库连接类中的注释信息？难道注释不起作用了？</p>\n<h4 id=\"脱离坑\"><a href=\"#脱离坑\" class=\"headerlink\" title=\"脱离坑\"></a>脱离坑</h4><pre><code>原来是在类文件中，前四行是作为html注释，引入到处理请求的文件中，由于该段内容在php标签内，所以注释格式应该是/* */,看到此番注释，php当然不识别。\n</code></pre><h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><pre><code>之所以遇到坑，就是还太嫩了。不过收获的是：更加会利用google浏览器调试一些信息。\n</code></pre>"},{"title":"砸向自己的巨人坑（二）","date":"2015-02-06T00:00:00.000Z","_content":"\n### 少敲代码多思考\n\n#### 坑的来源\n\n    1.头脑发热，不知道ajax请求php文件时，php是通过echo返回值而不是return\n    2.php作为弱类型的一门脚本语言，类型比较\n\n#### 开始挖坑\n\n#### 业务逻辑：\n\n修改密码时，一般都会要求输入原密码，检查原密码是否正确，检查正确才可以输入新密码修改密码；整个过程用ajax异步请求实现\n\n#### 请求代码：\n    \n    $.get('/front/user/checkUserPwd/oldpassword/'+oldpassword, \n                      function(data,status){\n                        alert(data);//方便调试\n                        if(parseInt(data)===parseInt(0)){ //没有比较类型\n                            alert('密码错误');\n                        }\n                        else{\n                            alert('密码正确');\n                        }\n              });\n\n#### 响应代码（基于Thinkphp）：\n\n        $mailbox = $_SESSION[ C('ACCOUNT_AUTH_KEY')];\n        $password = md5($_GET['oldpassword']);\n        $condition['mailbox'] = $mailbox;\n        $condition['password'] = $password;\n        $account = M('Account');\n        $data = $account->where($condition)->select();\n        //var_dump($data);\n        //var_dump($password);\n        //return count($data);//最初我竟然是这样干的\n        echo count($data);\n\n发现无论怎么输入正确还是错误的密码，data均为null，当我以为正确密码加密也不对的时候，我在响应代码中使用\n\n        var_dump($data);\n        var_dump($password);\n    \n发现输入正确的密码，加密后匹配时是对的啊，此时发现data已经变成了数组内容，注意var_dump打印的就是类型和数据，相当于ajax请求已经结束，\n返回了值。当我使用var_dump(0),把它与数字0比较的时候，怎么比较都不对。使用echo就行，恍然大悟,php不同输出函数的特性。\n\n但php是弱类型的语言，在匹配的时候，如果直接data===0，也会不成功，必须都转化为int时，才能使得类型和数值都得以匹配。\n\n#### 总结：\n\n    1.php与ajax交互时，ajax的返回值data是php使用打印函数打印出来的，而不是return的\n    2.使用比较的时候注意php的弱类型\n\n\n","source":"_posts/砸向自己的巨人坑（二）.md","raw":"---\ntitle: 砸向自己的巨人坑（二）\ntags: []\ndate: 2015-02-06 08:00:00\n---\n\n### 少敲代码多思考\n\n#### 坑的来源\n\n    1.头脑发热，不知道ajax请求php文件时，php是通过echo返回值而不是return\n    2.php作为弱类型的一门脚本语言，类型比较\n\n#### 开始挖坑\n\n#### 业务逻辑：\n\n修改密码时，一般都会要求输入原密码，检查原密码是否正确，检查正确才可以输入新密码修改密码；整个过程用ajax异步请求实现\n\n#### 请求代码：\n    \n    $.get('/front/user/checkUserPwd/oldpassword/'+oldpassword, \n                      function(data,status){\n                        alert(data);//方便调试\n                        if(parseInt(data)===parseInt(0)){ //没有比较类型\n                            alert('密码错误');\n                        }\n                        else{\n                            alert('密码正确');\n                        }\n              });\n\n#### 响应代码（基于Thinkphp）：\n\n        $mailbox = $_SESSION[ C('ACCOUNT_AUTH_KEY')];\n        $password = md5($_GET['oldpassword']);\n        $condition['mailbox'] = $mailbox;\n        $condition['password'] = $password;\n        $account = M('Account');\n        $data = $account->where($condition)->select();\n        //var_dump($data);\n        //var_dump($password);\n        //return count($data);//最初我竟然是这样干的\n        echo count($data);\n\n发现无论怎么输入正确还是错误的密码，data均为null，当我以为正确密码加密也不对的时候，我在响应代码中使用\n\n        var_dump($data);\n        var_dump($password);\n    \n发现输入正确的密码，加密后匹配时是对的啊，此时发现data已经变成了数组内容，注意var_dump打印的就是类型和数据，相当于ajax请求已经结束，\n返回了值。当我使用var_dump(0),把它与数字0比较的时候，怎么比较都不对。使用echo就行，恍然大悟,php不同输出函数的特性。\n\n但php是弱类型的语言，在匹配的时候，如果直接data===0，也会不成功，必须都转化为int时，才能使得类型和数值都得以匹配。\n\n#### 总结：\n\n    1.php与ajax交互时，ajax的返回值data是php使用打印函数打印出来的，而不是return的\n    2.使用比较的时候注意php的弱类型\n\n\n","slug":"砸向自己的巨人坑（二）","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwu600232o5pdyn9t0p4","content":"<h3 id=\"少敲代码多思考\"><a href=\"#少敲代码多思考\" class=\"headerlink\" title=\"少敲代码多思考\"></a>少敲代码多思考</h3><h4 id=\"坑的来源\"><a href=\"#坑的来源\" class=\"headerlink\" title=\"坑的来源\"></a>坑的来源</h4><pre><code>1.头脑发热，不知道ajax请求php文件时，php是通过echo返回值而不是return\n2.php作为弱类型的一门脚本语言，类型比较\n</code></pre><h4 id=\"开始挖坑\"><a href=\"#开始挖坑\" class=\"headerlink\" title=\"开始挖坑\"></a>开始挖坑</h4><h4 id=\"业务逻辑：\"><a href=\"#业务逻辑：\" class=\"headerlink\" title=\"业务逻辑：\"></a>业务逻辑：</h4><p>修改密码时，一般都会要求输入原密码，检查原密码是否正确，检查正确才可以输入新密码修改密码；整个过程用ajax异步请求实现</p>\n<h4 id=\"请求代码：\"><a href=\"#请求代码：\" class=\"headerlink\" title=\"请求代码：\"></a>请求代码：</h4><pre><code>$.get(&apos;/front/user/checkUserPwd/oldpassword/&apos;+oldpassword, \n                  function(data,status){\n                    alert(data);//方便调试\n                    if(parseInt(data)===parseInt(0)){ //没有比较类型\n                        alert(&apos;密码错误&apos;);\n                    }\n                    else{\n                        alert(&apos;密码正确&apos;);\n                    }\n          });\n</code></pre><h4 id=\"响应代码（基于Thinkphp）：\"><a href=\"#响应代码（基于Thinkphp）：\" class=\"headerlink\" title=\"响应代码（基于Thinkphp）：\"></a>响应代码（基于Thinkphp）：</h4><pre><code>$mailbox = $_SESSION[ C(&apos;ACCOUNT_AUTH_KEY&apos;)];\n$password = md5($_GET[&apos;oldpassword&apos;]);\n$condition[&apos;mailbox&apos;] = $mailbox;\n$condition[&apos;password&apos;] = $password;\n$account = M(&apos;Account&apos;);\n$data = $account-&gt;where($condition)-&gt;select();\n//var_dump($data);\n//var_dump($password);\n//return count($data);//最初我竟然是这样干的\necho count($data);\n</code></pre><p>发现无论怎么输入正确还是错误的密码，data均为null，当我以为正确密码加密也不对的时候，我在响应代码中使用</p>\n<pre><code>var_dump($data);\nvar_dump($password);\n</code></pre><p>发现输入正确的密码，加密后匹配时是对的啊，此时发现data已经变成了数组内容，注意var_dump打印的就是类型和数据，相当于ajax请求已经结束，<br>返回了值。当我使用var_dump(0),把它与数字0比较的时候，怎么比较都不对。使用echo就行，恍然大悟,php不同输出函数的特性。</p>\n<p>但php是弱类型的语言，在匹配的时候，如果直接data===0，也会不成功，必须都转化为int时，才能使得类型和数值都得以匹配。</p>\n<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4><pre><code>1.php与ajax交互时，ajax的返回值data是php使用打印函数打印出来的，而不是return的\n2.使用比较的时候注意php的弱类型\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"少敲代码多思考\"><a href=\"#少敲代码多思考\" class=\"headerlink\" title=\"少敲代码多思考\"></a>少敲代码多思考</h3><h4 id=\"坑的来源\"><a href=\"#坑的来源\" class=\"headerlink\" title=\"坑的来源\"></a>坑的来源</h4><pre><code>1.头脑发热，不知道ajax请求php文件时，php是通过echo返回值而不是return\n2.php作为弱类型的一门脚本语言，类型比较\n</code></pre><h4 id=\"开始挖坑\"><a href=\"#开始挖坑\" class=\"headerlink\" title=\"开始挖坑\"></a>开始挖坑</h4><h4 id=\"业务逻辑：\"><a href=\"#业务逻辑：\" class=\"headerlink\" title=\"业务逻辑：\"></a>业务逻辑：</h4><p>修改密码时，一般都会要求输入原密码，检查原密码是否正确，检查正确才可以输入新密码修改密码；整个过程用ajax异步请求实现</p>\n<h4 id=\"请求代码：\"><a href=\"#请求代码：\" class=\"headerlink\" title=\"请求代码：\"></a>请求代码：</h4><pre><code>$.get(&apos;/front/user/checkUserPwd/oldpassword/&apos;+oldpassword, \n                  function(data,status){\n                    alert(data);//方便调试\n                    if(parseInt(data)===parseInt(0)){ //没有比较类型\n                        alert(&apos;密码错误&apos;);\n                    }\n                    else{\n                        alert(&apos;密码正确&apos;);\n                    }\n          });\n</code></pre><h4 id=\"响应代码（基于Thinkphp）：\"><a href=\"#响应代码（基于Thinkphp）：\" class=\"headerlink\" title=\"响应代码（基于Thinkphp）：\"></a>响应代码（基于Thinkphp）：</h4><pre><code>$mailbox = $_SESSION[ C(&apos;ACCOUNT_AUTH_KEY&apos;)];\n$password = md5($_GET[&apos;oldpassword&apos;]);\n$condition[&apos;mailbox&apos;] = $mailbox;\n$condition[&apos;password&apos;] = $password;\n$account = M(&apos;Account&apos;);\n$data = $account-&gt;where($condition)-&gt;select();\n//var_dump($data);\n//var_dump($password);\n//return count($data);//最初我竟然是这样干的\necho count($data);\n</code></pre><p>发现无论怎么输入正确还是错误的密码，data均为null，当我以为正确密码加密也不对的时候，我在响应代码中使用</p>\n<pre><code>var_dump($data);\nvar_dump($password);\n</code></pre><p>发现输入正确的密码，加密后匹配时是对的啊，此时发现data已经变成了数组内容，注意var_dump打印的就是类型和数据，相当于ajax请求已经结束，<br>返回了值。当我使用var_dump(0),把它与数字0比较的时候，怎么比较都不对。使用echo就行，恍然大悟,php不同输出函数的特性。</p>\n<p>但php是弱类型的语言，在匹配的时候，如果直接data===0，也会不成功，必须都转化为int时，才能使得类型和数值都得以匹配。</p>\n<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4><pre><code>1.php与ajax交互时，ajax的返回值data是php使用打印函数打印出来的，而不是return的\n2.使用比较的时候注意php的弱类型\n</code></pre>"},{"title":"计算机内存分配方式","date":"2014-08-14T00:00:00.000Z","_content":"\n#### 计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量\n\n![蔡金林的博客](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/neicun.png)","source":"_posts/计算机内存分配方式.md","raw":"---\ntitle: 计算机内存分配方式\ntags: []\ndate: 2014-08-14 08:00:00\n---\n\n#### 计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量\n\n![蔡金林的博客](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/neicun.png)","slug":"计算机内存分配方式","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwu800242o5pbqf08j36","content":"<h4 id=\"计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量\"><a href=\"#计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量\" class=\"headerlink\" title=\"计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量\"></a>计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量</h4><p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/neicun.png\" alt=\"蔡金林的博客\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量\"><a href=\"#计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量\" class=\"headerlink\" title=\"计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量\"></a>计算机内存可以从静态存储区，常量存储区，堆，栈分配，分别存储对应的变量</h4><p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/neicun.png\" alt=\"蔡金林的博客\"></p>\n"},{"title":"话题社区项目总结","date":"2015-02-12T00:00:00.000Z","_content":"\n### 话题社区项目整体框架\n\n在凤凰网实习期间和主管等4人做了一个项目，在春节期间上线。我主要负责后端，今天总结一下，写一下项目的历程和架构，以及一些收获。\n\n<!-- more -->\n\n#### 项目初期\n\n接到产品需求后，项目主管审视了一番，觉得可以做。就开始规划话题社区的开展工作了，当时项目开发时间预估为20天。产品成果是嵌入到ios和anriod凤凰新闻客户端的.\n\n#### 项目架构：\n\n![项目配置](/assets/images/topicConfig.png)\n\n因为话题社区挂在访问量每天都在百万级别的凤凰希望新闻客户端上，所以必须需要足够的后台支持才行。\n\n#### 项目准备：\n\n为了做这个项目，我还专门学习了mongodb等相关知识。技术支持为php,javascript\n\n#### 部分业务逻辑(前端与客户端接口)\n\n1.  在话题页面发表评论 \n\n   （1）前端调用客户端接口，传入参数：\n   （2）用户发言、上传图片处理后将回调前端js方法，返回相关参数\n   （3）前端再将数据提交到后台\n    \t\n\n2. 在评论详情页面发表二级评论 （不支持发图片）  \n2.1 回复评论\n   \n   （1）传给客户端的参数:\n   （2）用户发言后,客户端将回调前端js方法，返回以下参数：\n    (3） 前端将数据提交到后台\n\n2.2 回复评论的评论\n\n   （1）传给客户端的参数:\n   （2）用户发言后,客户端将回调前端js方法，返回以下参数：\n   （3）前端将数据提交到后台\n    \t\t\n#### 收获\n\n 在这个项目开发的过程中，除了自身做了一些后台开发，也参与了一些手机客户端的测试工作，接触到了一些以前没接触的东西。\n","source":"_posts/话题社区项目总结.md","raw":"---\ntitle: 话题社区项目总结\ntags: []\ndate: 2015-02-12 08:00:00\n---\n\n### 话题社区项目整体框架\n\n在凤凰网实习期间和主管等4人做了一个项目，在春节期间上线。我主要负责后端，今天总结一下，写一下项目的历程和架构，以及一些收获。\n\n<!-- more -->\n\n#### 项目初期\n\n接到产品需求后，项目主管审视了一番，觉得可以做。就开始规划话题社区的开展工作了，当时项目开发时间预估为20天。产品成果是嵌入到ios和anriod凤凰新闻客户端的.\n\n#### 项目架构：\n\n![项目配置](/assets/images/topicConfig.png)\n\n因为话题社区挂在访问量每天都在百万级别的凤凰希望新闻客户端上，所以必须需要足够的后台支持才行。\n\n#### 项目准备：\n\n为了做这个项目，我还专门学习了mongodb等相关知识。技术支持为php,javascript\n\n#### 部分业务逻辑(前端与客户端接口)\n\n1.  在话题页面发表评论 \n\n   （1）前端调用客户端接口，传入参数：\n   （2）用户发言、上传图片处理后将回调前端js方法，返回相关参数\n   （3）前端再将数据提交到后台\n    \t\n\n2. 在评论详情页面发表二级评论 （不支持发图片）  \n2.1 回复评论\n   \n   （1）传给客户端的参数:\n   （2）用户发言后,客户端将回调前端js方法，返回以下参数：\n    (3） 前端将数据提交到后台\n\n2.2 回复评论的评论\n\n   （1）传给客户端的参数:\n   （2）用户发言后,客户端将回调前端js方法，返回以下参数：\n   （3）前端将数据提交到后台\n    \t\t\n#### 收获\n\n 在这个项目开发的过程中，除了自身做了一些后台开发，也参与了一些手机客户端的测试工作，接触到了一些以前没接触的东西。\n","slug":"话题社区项目总结","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwua00252o5ph6iddfve","content":"<h3 id=\"话题社区项目整体框架\"><a href=\"#话题社区项目整体框架\" class=\"headerlink\" title=\"话题社区项目整体框架\"></a>话题社区项目整体框架</h3><p>在凤凰网实习期间和主管等4人做了一个项目，在春节期间上线。我主要负责后端，今天总结一下，写一下项目的历程和架构，以及一些收获。</p>\n<a id=\"more\"></a>\n<h4 id=\"项目初期\"><a href=\"#项目初期\" class=\"headerlink\" title=\"项目初期\"></a>项目初期</h4><p>接到产品需求后，项目主管审视了一番，觉得可以做。就开始规划话题社区的开展工作了，当时项目开发时间预估为20天。产品成果是嵌入到ios和anriod凤凰新闻客户端的.</p>\n<h4 id=\"项目架构：\"><a href=\"#项目架构：\" class=\"headerlink\" title=\"项目架构：\"></a>项目架构：</h4><p><img src=\"/assets/images/topicConfig.png\" alt=\"项目配置\"></p>\n<p>因为话题社区挂在访问量每天都在百万级别的凤凰希望新闻客户端上，所以必须需要足够的后台支持才行。</p>\n<h4 id=\"项目准备：\"><a href=\"#项目准备：\" class=\"headerlink\" title=\"项目准备：\"></a>项目准备：</h4><p>为了做这个项目，我还专门学习了mongodb等相关知识。技术支持为php,javascript</p>\n<h4 id=\"部分业务逻辑-前端与客户端接口\"><a href=\"#部分业务逻辑-前端与客户端接口\" class=\"headerlink\" title=\"部分业务逻辑(前端与客户端接口)\"></a>部分业务逻辑(前端与客户端接口)</h4><ol>\n<li><p>在话题页面发表评论 </p>\n<p>（1）前端调用客户端接口，传入参数：<br>（2）用户发言、上传图片处理后将回调前端js方法，返回相关参数<br>（3）前端再将数据提交到后台</p>\n</li>\n</ol>\n<ol>\n<li><p>在评论详情页面发表二级评论 （不支持发图片）<br>2.1 回复评论</p>\n<p>（1）传给客户端的参数:<br>（2）用户发言后,客户端将回调前端js方法，返回以下参数：<br> (3） 前端将数据提交到后台</p>\n</li>\n</ol>\n<p>2.2 回复评论的评论</p>\n<p>   （1）传给客户端的参数:<br>   （2）用户发言后,客户端将回调前端js方法，返回以下参数：<br>   （3）前端将数据提交到后台</p>\n<h4 id=\"收获\"><a href=\"#收获\" class=\"headerlink\" title=\"收获\"></a>收获</h4><p> 在这个项目开发的过程中，除了自身做了一些后台开发，也参与了一些手机客户端的测试工作，接触到了一些以前没接触的东西。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"话题社区项目整体框架\"><a href=\"#话题社区项目整体框架\" class=\"headerlink\" title=\"话题社区项目整体框架\"></a>话题社区项目整体框架</h3><p>在凤凰网实习期间和主管等4人做了一个项目，在春节期间上线。我主要负责后端，今天总结一下，写一下项目的历程和架构，以及一些收获。</p>","more":"<h4 id=\"项目初期\"><a href=\"#项目初期\" class=\"headerlink\" title=\"项目初期\"></a>项目初期</h4><p>接到产品需求后，项目主管审视了一番，觉得可以做。就开始规划话题社区的开展工作了，当时项目开发时间预估为20天。产品成果是嵌入到ios和anriod凤凰新闻客户端的.</p>\n<h4 id=\"项目架构：\"><a href=\"#项目架构：\" class=\"headerlink\" title=\"项目架构：\"></a>项目架构：</h4><p><img src=\"/assets/images/topicConfig.png\" alt=\"项目配置\"></p>\n<p>因为话题社区挂在访问量每天都在百万级别的凤凰希望新闻客户端上，所以必须需要足够的后台支持才行。</p>\n<h4 id=\"项目准备：\"><a href=\"#项目准备：\" class=\"headerlink\" title=\"项目准备：\"></a>项目准备：</h4><p>为了做这个项目，我还专门学习了mongodb等相关知识。技术支持为php,javascript</p>\n<h4 id=\"部分业务逻辑-前端与客户端接口\"><a href=\"#部分业务逻辑-前端与客户端接口\" class=\"headerlink\" title=\"部分业务逻辑(前端与客户端接口)\"></a>部分业务逻辑(前端与客户端接口)</h4><ol>\n<li><p>在话题页面发表评论 </p>\n<p>（1）前端调用客户端接口，传入参数：<br>（2）用户发言、上传图片处理后将回调前端js方法，返回相关参数<br>（3）前端再将数据提交到后台</p>\n</li>\n</ol>\n<ol>\n<li><p>在评论详情页面发表二级评论 （不支持发图片）<br>2.1 回复评论</p>\n<p>（1）传给客户端的参数:<br>（2）用户发言后,客户端将回调前端js方法，返回以下参数：<br> (3） 前端将数据提交到后台</p>\n</li>\n</ol>\n<p>2.2 回复评论的评论</p>\n<p>   （1）传给客户端的参数:<br>   （2）用户发言后,客户端将回调前端js方法，返回以下参数：<br>   （3）前端将数据提交到后台</p>\n<h4 id=\"收获\"><a href=\"#收获\" class=\"headerlink\" title=\"收获\"></a>收获</h4><p> 在这个项目开发的过程中，除了自身做了一些后台开发，也参与了一些手机客户端的测试工作，接触到了一些以前没接触的东西。</p>"},{"title":"轻松实现多台服务器数据库备份","date":"2014-12-18T00:00:00.000Z","_content":"\n#### linux下两台服务器数据库导入导出\n\n两台服务器环境均为lnmp(linux+nginx+mysql+php),今天一直想实现服务器A备份数据库test，并导入到服务器B中，传统的方法是通过linux共享实现的，具体可以参考<a href=\"http://www.2cto.com/os/201108/102000.html\" target=\"_blank\">linux服务器共享</a>\n\n#### 我的解决办法\n\n充分利用lnmp环境，可以通过ip直接访问的特点，使用mysqldump备份A服务器数据库到网站根目录下，然后在服务器B中通过wget命令进行下载，最后使用mysql自带命令source导入B机数据库，其本质就是实现数据库同步。具体实现及常见问题解决办法如下：\n\n假设A机ip为192.168.12.1 ,B机为192.168.12.2,，假设数据库用户和密码均为root将A机数据库test导入到B机数据库test，使用<a href=\"http://pan.baidu.com/s/1eQ3qPf8\" target=\"_blank\">xshell软件</a>通过ssh协议连接两台linux服务器，方便操作.\n\n#### 备份A机数据库test\n\n    cd www  /*切换到网站根目录*/\n    mysqldump -uroot -proot test > test.sql\n\n#### 下载A机数据库test到B机\n    \n    wget -c http://192.168.12.1/test.sql\n\n注：如果192.168.12.1的80端口没有打开，可能会出现一下错误：\n\n    正在连接 192.168.12.1:80... 失败：没有到主机的路由\n\n排查错误：\n\n定位A机，查看防火墙80端口是否对外开放\n\n    /etc/init.d/iptables status  或者 service  iptables status;\n\n以下情形没有打开80端口，3306和22端口是开放的\n\n![防火墙设置](/assets/images/firewallPort.png)\n\n这时需要自行进行防火墙设置，可以开启80端口\n\n    /sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT \n    #/sbin/iptables -I INPUT -p tcp --dport 22 -j ACCEPT\n    /etc/init.d/iptables save\n\n为了安全起见，我没有开启80端口，而是先关闭防火墙，让B机执行wget命令后，再开启防火墙\n\n    /etc/init.d/iptables stop   (A机操作)\n\n此时，在B机执行命令，就没有问题了，下载的文件在当前目录\n    \n    wget -c http://192.168.12.1/test.sql\n\n再回到A机，重新开启防火墙\n    \n    /etc/init.d/iptables restart \n\n#### 导入数据库到B机\n\n在当前目录，登录到mysql后，使用source命令进行导入\n\n    mysql -uroot -proot;\n    use test;\n    source test.sql;","source":"_posts/轻松实现多台服务器数据库备份.md","raw":"---\ntitle: 轻松实现多台服务器数据库备份\ntags: []\ndate: 2014-12-18 08:00:00\n---\n\n#### linux下两台服务器数据库导入导出\n\n两台服务器环境均为lnmp(linux+nginx+mysql+php),今天一直想实现服务器A备份数据库test，并导入到服务器B中，传统的方法是通过linux共享实现的，具体可以参考<a href=\"http://www.2cto.com/os/201108/102000.html\" target=\"_blank\">linux服务器共享</a>\n\n#### 我的解决办法\n\n充分利用lnmp环境，可以通过ip直接访问的特点，使用mysqldump备份A服务器数据库到网站根目录下，然后在服务器B中通过wget命令进行下载，最后使用mysql自带命令source导入B机数据库，其本质就是实现数据库同步。具体实现及常见问题解决办法如下：\n\n假设A机ip为192.168.12.1 ,B机为192.168.12.2,，假设数据库用户和密码均为root将A机数据库test导入到B机数据库test，使用<a href=\"http://pan.baidu.com/s/1eQ3qPf8\" target=\"_blank\">xshell软件</a>通过ssh协议连接两台linux服务器，方便操作.\n\n#### 备份A机数据库test\n\n    cd www  /*切换到网站根目录*/\n    mysqldump -uroot -proot test > test.sql\n\n#### 下载A机数据库test到B机\n    \n    wget -c http://192.168.12.1/test.sql\n\n注：如果192.168.12.1的80端口没有打开，可能会出现一下错误：\n\n    正在连接 192.168.12.1:80... 失败：没有到主机的路由\n\n排查错误：\n\n定位A机，查看防火墙80端口是否对外开放\n\n    /etc/init.d/iptables status  或者 service  iptables status;\n\n以下情形没有打开80端口，3306和22端口是开放的\n\n![防火墙设置](/assets/images/firewallPort.png)\n\n这时需要自行进行防火墙设置，可以开启80端口\n\n    /sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT \n    #/sbin/iptables -I INPUT -p tcp --dport 22 -j ACCEPT\n    /etc/init.d/iptables save\n\n为了安全起见，我没有开启80端口，而是先关闭防火墙，让B机执行wget命令后，再开启防火墙\n\n    /etc/init.d/iptables stop   (A机操作)\n\n此时，在B机执行命令，就没有问题了，下载的文件在当前目录\n    \n    wget -c http://192.168.12.1/test.sql\n\n再回到A机，重新开启防火墙\n    \n    /etc/init.d/iptables restart \n\n#### 导入数据库到B机\n\n在当前目录，登录到mysql后，使用source命令进行导入\n\n    mysql -uroot -proot;\n    use test;\n    source test.sql;","slug":"轻松实现多台服务器数据库备份","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwud00262o5p3r5k3qhj","content":"<h4 id=\"linux下两台服务器数据库导入导出\"><a href=\"#linux下两台服务器数据库导入导出\" class=\"headerlink\" title=\"linux下两台服务器数据库导入导出\"></a>linux下两台服务器数据库导入导出</h4><p>两台服务器环境均为lnmp(linux+nginx+mysql+php),今天一直想实现服务器A备份数据库test，并导入到服务器B中，传统的方法是通过linux共享实现的，具体可以参考<a href=\"http://www.2cto.com/os/201108/102000.html\" target=\"_blank\">linux服务器共享</a></p>\n<h4 id=\"我的解决办法\"><a href=\"#我的解决办法\" class=\"headerlink\" title=\"我的解决办法\"></a>我的解决办法</h4><p>充分利用lnmp环境，可以通过ip直接访问的特点，使用mysqldump备份A服务器数据库到网站根目录下，然后在服务器B中通过wget命令进行下载，最后使用mysql自带命令source导入B机数据库，其本质就是实现数据库同步。具体实现及常见问题解决办法如下：</p>\n<p>假设A机ip为192.168.12.1 ,B机为192.168.12.2,，假设数据库用户和密码均为root将A机数据库test导入到B机数据库test，使用<a href=\"http://pan.baidu.com/s/1eQ3qPf8\" target=\"_blank\">xshell软件</a>通过ssh协议连接两台linux服务器，方便操作.</p>\n<h4 id=\"备份A机数据库test\"><a href=\"#备份A机数据库test\" class=\"headerlink\" title=\"备份A机数据库test\"></a>备份A机数据库test</h4><pre><code>cd www  /*切换到网站根目录*/\nmysqldump -uroot -proot test &gt; test.sql\n</code></pre><h4 id=\"下载A机数据库test到B机\"><a href=\"#下载A机数据库test到B机\" class=\"headerlink\" title=\"下载A机数据库test到B机\"></a>下载A机数据库test到B机</h4><pre><code>wget -c http://192.168.12.1/test.sql\n</code></pre><p>注：如果192.168.12.1的80端口没有打开，可能会出现一下错误：</p>\n<pre><code>正在连接 192.168.12.1:80... 失败：没有到主机的路由\n</code></pre><p>排查错误：</p>\n<p>定位A机，查看防火墙80端口是否对外开放</p>\n<pre><code>/etc/init.d/iptables status  或者 service  iptables status;\n</code></pre><p>以下情形没有打开80端口，3306和22端口是开放的</p>\n<p><img src=\"/assets/images/firewallPort.png\" alt=\"防火墙设置\"></p>\n<p>这时需要自行进行防火墙设置，可以开启80端口</p>\n<pre><code>/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT \n#/sbin/iptables -I INPUT -p tcp --dport 22 -j ACCEPT\n/etc/init.d/iptables save\n</code></pre><p>为了安全起见，我没有开启80端口，而是先关闭防火墙，让B机执行wget命令后，再开启防火墙</p>\n<pre><code>/etc/init.d/iptables stop   (A机操作)\n</code></pre><p>此时，在B机执行命令，就没有问题了，下载的文件在当前目录</p>\n<pre><code>wget -c http://192.168.12.1/test.sql\n</code></pre><p>再回到A机，重新开启防火墙</p>\n<pre><code>/etc/init.d/iptables restart \n</code></pre><h4 id=\"导入数据库到B机\"><a href=\"#导入数据库到B机\" class=\"headerlink\" title=\"导入数据库到B机\"></a>导入数据库到B机</h4><p>在当前目录，登录到mysql后，使用source命令进行导入</p>\n<pre><code>mysql -uroot -proot;\nuse test;\nsource test.sql;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"linux下两台服务器数据库导入导出\"><a href=\"#linux下两台服务器数据库导入导出\" class=\"headerlink\" title=\"linux下两台服务器数据库导入导出\"></a>linux下两台服务器数据库导入导出</h4><p>两台服务器环境均为lnmp(linux+nginx+mysql+php),今天一直想实现服务器A备份数据库test，并导入到服务器B中，传统的方法是通过linux共享实现的，具体可以参考<a href=\"http://www.2cto.com/os/201108/102000.html\" target=\"_blank\">linux服务器共享</a></p>\n<h4 id=\"我的解决办法\"><a href=\"#我的解决办法\" class=\"headerlink\" title=\"我的解决办法\"></a>我的解决办法</h4><p>充分利用lnmp环境，可以通过ip直接访问的特点，使用mysqldump备份A服务器数据库到网站根目录下，然后在服务器B中通过wget命令进行下载，最后使用mysql自带命令source导入B机数据库，其本质就是实现数据库同步。具体实现及常见问题解决办法如下：</p>\n<p>假设A机ip为192.168.12.1 ,B机为192.168.12.2,，假设数据库用户和密码均为root将A机数据库test导入到B机数据库test，使用<a href=\"http://pan.baidu.com/s/1eQ3qPf8\" target=\"_blank\">xshell软件</a>通过ssh协议连接两台linux服务器，方便操作.</p>\n<h4 id=\"备份A机数据库test\"><a href=\"#备份A机数据库test\" class=\"headerlink\" title=\"备份A机数据库test\"></a>备份A机数据库test</h4><pre><code>cd www  /*切换到网站根目录*/\nmysqldump -uroot -proot test &gt; test.sql\n</code></pre><h4 id=\"下载A机数据库test到B机\"><a href=\"#下载A机数据库test到B机\" class=\"headerlink\" title=\"下载A机数据库test到B机\"></a>下载A机数据库test到B机</h4><pre><code>wget -c http://192.168.12.1/test.sql\n</code></pre><p>注：如果192.168.12.1的80端口没有打开，可能会出现一下错误：</p>\n<pre><code>正在连接 192.168.12.1:80... 失败：没有到主机的路由\n</code></pre><p>排查错误：</p>\n<p>定位A机，查看防火墙80端口是否对外开放</p>\n<pre><code>/etc/init.d/iptables status  或者 service  iptables status;\n</code></pre><p>以下情形没有打开80端口，3306和22端口是开放的</p>\n<p><img src=\"/assets/images/firewallPort.png\" alt=\"防火墙设置\"></p>\n<p>这时需要自行进行防火墙设置，可以开启80端口</p>\n<pre><code>/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT \n#/sbin/iptables -I INPUT -p tcp --dport 22 -j ACCEPT\n/etc/init.d/iptables save\n</code></pre><p>为了安全起见，我没有开启80端口，而是先关闭防火墙，让B机执行wget命令后，再开启防火墙</p>\n<pre><code>/etc/init.d/iptables stop   (A机操作)\n</code></pre><p>此时，在B机执行命令，就没有问题了，下载的文件在当前目录</p>\n<pre><code>wget -c http://192.168.12.1/test.sql\n</code></pre><p>再回到A机，重新开启防火墙</p>\n<pre><code>/etc/init.d/iptables restart \n</code></pre><h4 id=\"导入数据库到B机\"><a href=\"#导入数据库到B机\" class=\"headerlink\" title=\"导入数据库到B机\"></a>导入数据库到B机</h4><p>在当前目录，登录到mysql后，使用source命令进行导入</p>\n<pre><code>mysql -uroot -proot;\nuse test;\nsource test.sql;\n</code></pre>"},{"title":"贪心算法","date":"2014-05-04T00:00:00.000Z","_content":"\n### 贪心算法（自顶向下，局部最优）\n\n贪心算法（又称贪婪算法）：在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，但对范围相当广泛的许多问题他能产生整体最优解或者是整体最优解的近似解。\n\n\n#### 贪心算法的基本思想\n\n找出整体当中每个小的局部的最优解，并且将所有的这些局部最优解合起来形成整体上的一个最优解。\n\n#### 贪心选择性质\n\n    1.整体的最优解可以通过局部的最优解来求出；\n    2.一个整体能够被分为多个局部，并且这些局部都能够求出最优解。\n\n使用贪心算法当中的两个典型问题是活动安排问题和背包问题。\n\n#### 贪心算法的基本步骤\n\n    1、从问题的某个初始解出发。\n    2、采用循环语句，当可以向求解目标前进一步时，就根据局部最优策略，得到一个部分解，缩小问题的范围或规模。\n    3、将所有部分解综合起来，得到问题的最终解。\n\n#### 经典案例:活动安排问题,背包等\n\n![背包问题](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/backpack.png)\n\n#### 案例分析:平衡负载\n\n2013年百度之星区域赛中的第一题”平衡负载”，主要就利用贪心进行分段，在我们理工的acm平台上有这道题，闲着也是闲着，贴出这道题自己的c++版本code。\n\n平衡负载\n\nDu熊正在负责一个大型的项目，目前有K台服务器，有N个任务需要用这K台服务器来完成，所以要把这些任务分成K个部分来完成，在同上台服务器上执行的任务必须是连续的任务，每个任务有各自需要的执行时间。\n例如N=5,K=2，每个任务需要时间分别为5,3,1,4,7分钟，那么我们可以分成(5)(3 1 4 7)两部分，这样第一台服务器所花时间就是5分钟，而第二台机器需要花15分钟，当然，所有任务完成的时间是按最迟完成的那台服务器的时间，即这样划分的话完成所有任务所需要的时间就是15分钟。而另外一种划分方法是(5 3 1)(4 7)，这种划分方案完成所有任务的时间就是11分钟，也是最优的一种划分方案。\n现在你的任务就是根据给定的N,K和每个任务要花费的时间，找出使完成所有任务时间最短的方案。\n\n输入：多组输入。\n\n第一行输入N和K（1<=K<=N<=10000）。\n\n第二行输入N个不大于1000的正整数，表示各个任要花费的时间。N=K=0表示输入结束。\n\n输出：\n\n每行输出一个整数，对应对于每个数据（除了N=K=0不用输出）。\n\n样例输入：\n\n    5 1\n    5 3 1 4 7\n    5 2\n    5 3 1 4 7\n    5 3\n\n#### 算法实现code\n\n    #include<stdio.h>\n    #include<iostream>\n    using namespace std;\n    int a[10005];\n    bool check(int a[], int k,int m, int n) //数组，分k段,用来分段的m值,数组个数（检测m值是否可以将数组分为k段）\n    {\n        int i,sum=0,count=0;\n        for(i=0;i<n;i++)\n        {\n            sum+=a[i];//前i项求和\n            if(sum>m) //若超过m值，则前i-1项分为一段,重新寻求下一段，同时段数加1\n            {\n                sum=a[i];\n                count++;\n            }\n        }\n        count++;//加上最后一段\n        return count<=k;\n    }\n    int main()\n    {\n        int i=0,j=0,n,k,l,r,mid=0;\n        while(cin>>n>>k&&n!=0&&k!=0)\n        {\n           l=0;//最左边\n           r=0;//最右边\n           for(i=0;i<n;i++)\n           {\n               cin>>a[i];\n               r+=a[i];\n           }\n           while(l<r)\n           {\n               mid=(l+r)/2;\n               if(check(a,k,mid,n)) //m值分段数小于k，则要分段的m值应该减少，承受的项的个数更少，段数增加\n               {\n                  r=mid;\n               }\n               else //m值分段数大于k，则要分段的m值应该增加，可承受更多项的和，段数减少\n               {\n                  l=mid+1;\n               }\n           }\n           printf(\"%d\\n\",l);//输出时间\n        }\n        return 0;\n    }\n","source":"_posts/贪心算法.md","raw":"---\ntitle: 贪心算法\ntags: [algorithm]\ncategories: algorithm\ndate: 2014-05-04 08:00:00\n---\n\n### 贪心算法（自顶向下，局部最优）\n\n贪心算法（又称贪婪算法）：在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，但对范围相当广泛的许多问题他能产生整体最优解或者是整体最优解的近似解。\n\n\n#### 贪心算法的基本思想\n\n找出整体当中每个小的局部的最优解，并且将所有的这些局部最优解合起来形成整体上的一个最优解。\n\n#### 贪心选择性质\n\n    1.整体的最优解可以通过局部的最优解来求出；\n    2.一个整体能够被分为多个局部，并且这些局部都能够求出最优解。\n\n使用贪心算法当中的两个典型问题是活动安排问题和背包问题。\n\n#### 贪心算法的基本步骤\n\n    1、从问题的某个初始解出发。\n    2、采用循环语句，当可以向求解目标前进一步时，就根据局部最优策略，得到一个部分解，缩小问题的范围或规模。\n    3、将所有部分解综合起来，得到问题的最终解。\n\n#### 经典案例:活动安排问题,背包等\n\n![背包问题](http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/backpack.png)\n\n#### 案例分析:平衡负载\n\n2013年百度之星区域赛中的第一题”平衡负载”，主要就利用贪心进行分段，在我们理工的acm平台上有这道题，闲着也是闲着，贴出这道题自己的c++版本code。\n\n平衡负载\n\nDu熊正在负责一个大型的项目，目前有K台服务器，有N个任务需要用这K台服务器来完成，所以要把这些任务分成K个部分来完成，在同上台服务器上执行的任务必须是连续的任务，每个任务有各自需要的执行时间。\n例如N=5,K=2，每个任务需要时间分别为5,3,1,4,7分钟，那么我们可以分成(5)(3 1 4 7)两部分，这样第一台服务器所花时间就是5分钟，而第二台机器需要花15分钟，当然，所有任务完成的时间是按最迟完成的那台服务器的时间，即这样划分的话完成所有任务所需要的时间就是15分钟。而另外一种划分方法是(5 3 1)(4 7)，这种划分方案完成所有任务的时间就是11分钟，也是最优的一种划分方案。\n现在你的任务就是根据给定的N,K和每个任务要花费的时间，找出使完成所有任务时间最短的方案。\n\n输入：多组输入。\n\n第一行输入N和K（1<=K<=N<=10000）。\n\n第二行输入N个不大于1000的正整数，表示各个任要花费的时间。N=K=0表示输入结束。\n\n输出：\n\n每行输出一个整数，对应对于每个数据（除了N=K=0不用输出）。\n\n样例输入：\n\n    5 1\n    5 3 1 4 7\n    5 2\n    5 3 1 4 7\n    5 3\n\n#### 算法实现code\n\n    #include<stdio.h>\n    #include<iostream>\n    using namespace std;\n    int a[10005];\n    bool check(int a[], int k,int m, int n) //数组，分k段,用来分段的m值,数组个数（检测m值是否可以将数组分为k段）\n    {\n        int i,sum=0,count=0;\n        for(i=0;i<n;i++)\n        {\n            sum+=a[i];//前i项求和\n            if(sum>m) //若超过m值，则前i-1项分为一段,重新寻求下一段，同时段数加1\n            {\n                sum=a[i];\n                count++;\n            }\n        }\n        count++;//加上最后一段\n        return count<=k;\n    }\n    int main()\n    {\n        int i=0,j=0,n,k,l,r,mid=0;\n        while(cin>>n>>k&&n!=0&&k!=0)\n        {\n           l=0;//最左边\n           r=0;//最右边\n           for(i=0;i<n;i++)\n           {\n               cin>>a[i];\n               r+=a[i];\n           }\n           while(l<r)\n           {\n               mid=(l+r)/2;\n               if(check(a,k,mid,n)) //m值分段数小于k，则要分段的m值应该减少，承受的项的个数更少，段数增加\n               {\n                  r=mid;\n               }\n               else //m值分段数大于k，则要分段的m值应该增加，可承受更多项的和，段数减少\n               {\n                  l=mid+1;\n               }\n           }\n           printf(\"%d\\n\",l);//输出时间\n        }\n        return 0;\n    }\n","slug":"贪心算法","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwue00272o5p9rblbpvz","content":"<h3 id=\"贪心算法（自顶向下，局部最优）\"><a href=\"#贪心算法（自顶向下，局部最优）\" class=\"headerlink\" title=\"贪心算法（自顶向下，局部最优）\"></a>贪心算法（自顶向下，局部最优）</h3><p>贪心算法（又称贪婪算法）：在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，但对范围相当广泛的许多问题他能产生整体最优解或者是整体最优解的近似解。</p>\n<h4 id=\"贪心算法的基本思想\"><a href=\"#贪心算法的基本思想\" class=\"headerlink\" title=\"贪心算法的基本思想\"></a>贪心算法的基本思想</h4><p>找出整体当中每个小的局部的最优解，并且将所有的这些局部最优解合起来形成整体上的一个最优解。</p>\n<h4 id=\"贪心选择性质\"><a href=\"#贪心选择性质\" class=\"headerlink\" title=\"贪心选择性质\"></a>贪心选择性质</h4><pre><code>1.整体的最优解可以通过局部的最优解来求出；\n2.一个整体能够被分为多个局部，并且这些局部都能够求出最优解。\n</code></pre><p>使用贪心算法当中的两个典型问题是活动安排问题和背包问题。</p>\n<h4 id=\"贪心算法的基本步骤\"><a href=\"#贪心算法的基本步骤\" class=\"headerlink\" title=\"贪心算法的基本步骤\"></a>贪心算法的基本步骤</h4><pre><code>1、从问题的某个初始解出发。\n2、采用循环语句，当可以向求解目标前进一步时，就根据局部最优策略，得到一个部分解，缩小问题的范围或规模。\n3、将所有部分解综合起来，得到问题的最终解。\n</code></pre><h4 id=\"经典案例-活动安排问题-背包等\"><a href=\"#经典案例-活动安排问题-背包等\" class=\"headerlink\" title=\"经典案例:活动安排问题,背包等\"></a>经典案例:活动安排问题,背包等</h4><p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/backpack.png\" alt=\"背包问题\"></p>\n<h4 id=\"案例分析-平衡负载\"><a href=\"#案例分析-平衡负载\" class=\"headerlink\" title=\"案例分析:平衡负载\"></a>案例分析:平衡负载</h4><p>2013年百度之星区域赛中的第一题”平衡负载”，主要就利用贪心进行分段，在我们理工的acm平台上有这道题，闲着也是闲着，贴出这道题自己的c++版本code。</p>\n<p>平衡负载</p>\n<p>Du熊正在负责一个大型的项目，目前有K台服务器，有N个任务需要用这K台服务器来完成，所以要把这些任务分成K个部分来完成，在同上台服务器上执行的任务必须是连续的任务，每个任务有各自需要的执行时间。<br>例如N=5,K=2，每个任务需要时间分别为5,3,1,4,7分钟，那么我们可以分成(5)(3 1 4 7)两部分，这样第一台服务器所花时间就是5分钟，而第二台机器需要花15分钟，当然，所有任务完成的时间是按最迟完成的那台服务器的时间，即这样划分的话完成所有任务所需要的时间就是15分钟。而另外一种划分方法是(5 3 1)(4 7)，这种划分方案完成所有任务的时间就是11分钟，也是最优的一种划分方案。<br>现在你的任务就是根据给定的N,K和每个任务要花费的时间，找出使完成所有任务时间最短的方案。</p>\n<p>输入：多组输入。</p>\n<p>第一行输入N和K（1&lt;=K&lt;=N&lt;=10000）。</p>\n<p>第二行输入N个不大于1000的正整数，表示各个任要花费的时间。N=K=0表示输入结束。</p>\n<p>输出：</p>\n<p>每行输出一个整数，对应对于每个数据（除了N=K=0不用输出）。</p>\n<p>样例输入：</p>\n<pre><code>5 1\n5 3 1 4 7\n5 2\n5 3 1 4 7\n5 3\n</code></pre><h4 id=\"算法实现code\"><a href=\"#算法实现code\" class=\"headerlink\" title=\"算法实现code\"></a>算法实现code</h4><pre><code>#include&lt;stdio.h&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nint a[10005];\nbool check(int a[], int k,int m, int n) //数组，分k段,用来分段的m值,数组个数（检测m值是否可以将数组分为k段）\n{\n    int i,sum=0,count=0;\n    for(i=0;i&lt;n;i++)\n    {\n        sum+=a[i];//前i项求和\n        if(sum&gt;m) //若超过m值，则前i-1项分为一段,重新寻求下一段，同时段数加1\n        {\n            sum=a[i];\n            count++;\n        }\n    }\n    count++;//加上最后一段\n    return count&lt;=k;\n}\nint main()\n{\n    int i=0,j=0,n,k,l,r,mid=0;\n    while(cin&gt;&gt;n&gt;&gt;k&amp;&amp;n!=0&amp;&amp;k!=0)\n    {\n       l=0;//最左边\n       r=0;//最右边\n       for(i=0;i&lt;n;i++)\n       {\n           cin&gt;&gt;a[i];\n           r+=a[i];\n       }\n       while(l&lt;r)\n       {\n           mid=(l+r)/2;\n           if(check(a,k,mid,n)) //m值分段数小于k，则要分段的m值应该减少，承受的项的个数更少，段数增加\n           {\n              r=mid;\n           }\n           else //m值分段数大于k，则要分段的m值应该增加，可承受更多项的和，段数减少\n           {\n              l=mid+1;\n           }\n       }\n       printf(&quot;%d\\n&quot;,l);//输出时间\n    }\n    return 0;\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"贪心算法（自顶向下，局部最优）\"><a href=\"#贪心算法（自顶向下，局部最优）\" class=\"headerlink\" title=\"贪心算法（自顶向下，局部最优）\"></a>贪心算法（自顶向下，局部最优）</h3><p>贪心算法（又称贪婪算法）：在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，但对范围相当广泛的许多问题他能产生整体最优解或者是整体最优解的近似解。</p>\n<h4 id=\"贪心算法的基本思想\"><a href=\"#贪心算法的基本思想\" class=\"headerlink\" title=\"贪心算法的基本思想\"></a>贪心算法的基本思想</h4><p>找出整体当中每个小的局部的最优解，并且将所有的这些局部最优解合起来形成整体上的一个最优解。</p>\n<h4 id=\"贪心选择性质\"><a href=\"#贪心选择性质\" class=\"headerlink\" title=\"贪心选择性质\"></a>贪心选择性质</h4><pre><code>1.整体的最优解可以通过局部的最优解来求出；\n2.一个整体能够被分为多个局部，并且这些局部都能够求出最优解。\n</code></pre><p>使用贪心算法当中的两个典型问题是活动安排问题和背包问题。</p>\n<h4 id=\"贪心算法的基本步骤\"><a href=\"#贪心算法的基本步骤\" class=\"headerlink\" title=\"贪心算法的基本步骤\"></a>贪心算法的基本步骤</h4><pre><code>1、从问题的某个初始解出发。\n2、采用循环语句，当可以向求解目标前进一步时，就根据局部最优策略，得到一个部分解，缩小问题的范围或规模。\n3、将所有部分解综合起来，得到问题的最终解。\n</code></pre><h4 id=\"经典案例-活动安排问题-背包等\"><a href=\"#经典案例-活动安排问题-背包等\" class=\"headerlink\" title=\"经典案例:活动安排问题,背包等\"></a>经典案例:活动安排问题,背包等</h4><p><img src=\"http://7xirhj.com1.z0.glb.clouddn.com/blog/assert/images/backpack.png\" alt=\"背包问题\"></p>\n<h4 id=\"案例分析-平衡负载\"><a href=\"#案例分析-平衡负载\" class=\"headerlink\" title=\"案例分析:平衡负载\"></a>案例分析:平衡负载</h4><p>2013年百度之星区域赛中的第一题”平衡负载”，主要就利用贪心进行分段，在我们理工的acm平台上有这道题，闲着也是闲着，贴出这道题自己的c++版本code。</p>\n<p>平衡负载</p>\n<p>Du熊正在负责一个大型的项目，目前有K台服务器，有N个任务需要用这K台服务器来完成，所以要把这些任务分成K个部分来完成，在同上台服务器上执行的任务必须是连续的任务，每个任务有各自需要的执行时间。<br>例如N=5,K=2，每个任务需要时间分别为5,3,1,4,7分钟，那么我们可以分成(5)(3 1 4 7)两部分，这样第一台服务器所花时间就是5分钟，而第二台机器需要花15分钟，当然，所有任务完成的时间是按最迟完成的那台服务器的时间，即这样划分的话完成所有任务所需要的时间就是15分钟。而另外一种划分方法是(5 3 1)(4 7)，这种划分方案完成所有任务的时间就是11分钟，也是最优的一种划分方案。<br>现在你的任务就是根据给定的N,K和每个任务要花费的时间，找出使完成所有任务时间最短的方案。</p>\n<p>输入：多组输入。</p>\n<p>第一行输入N和K（1&lt;=K&lt;=N&lt;=10000）。</p>\n<p>第二行输入N个不大于1000的正整数，表示各个任要花费的时间。N=K=0表示输入结束。</p>\n<p>输出：</p>\n<p>每行输出一个整数，对应对于每个数据（除了N=K=0不用输出）。</p>\n<p>样例输入：</p>\n<pre><code>5 1\n5 3 1 4 7\n5 2\n5 3 1 4 7\n5 3\n</code></pre><h4 id=\"算法实现code\"><a href=\"#算法实现code\" class=\"headerlink\" title=\"算法实现code\"></a>算法实现code</h4><pre><code>#include&lt;stdio.h&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nint a[10005];\nbool check(int a[], int k,int m, int n) //数组，分k段,用来分段的m值,数组个数（检测m值是否可以将数组分为k段）\n{\n    int i,sum=0,count=0;\n    for(i=0;i&lt;n;i++)\n    {\n        sum+=a[i];//前i项求和\n        if(sum&gt;m) //若超过m值，则前i-1项分为一段,重新寻求下一段，同时段数加1\n        {\n            sum=a[i];\n            count++;\n        }\n    }\n    count++;//加上最后一段\n    return count&lt;=k;\n}\nint main()\n{\n    int i=0,j=0,n,k,l,r,mid=0;\n    while(cin&gt;&gt;n&gt;&gt;k&amp;&amp;n!=0&amp;&amp;k!=0)\n    {\n       l=0;//最左边\n       r=0;//最右边\n       for(i=0;i&lt;n;i++)\n       {\n           cin&gt;&gt;a[i];\n           r+=a[i];\n       }\n       while(l&lt;r)\n       {\n           mid=(l+r)/2;\n           if(check(a,k,mid,n)) //m值分段数小于k，则要分段的m值应该减少，承受的项的个数更少，段数增加\n           {\n              r=mid;\n           }\n           else //m值分段数大于k，则要分段的m值应该增加，可承受更多项的和，段数减少\n           {\n              l=mid+1;\n           }\n       }\n       printf(&quot;%d\\n&quot;,l);//输出时间\n    }\n    return 0;\n}\n</code></pre>"},{"title":"高精度算法","date":"2014-06-18T00:00:00.000Z","_content":"\n### 高精度算法（包含精度计算乘法、精度计算加法等）\n\n高数精度算法，属于处理大数字的数学计算方法。在一般的科学计算中，会经常算到小数点后几百位或者更多，当然也可能是几千亿几百亿的大数字。一般这类数字我们统称为高精度数，高精度算法是用计算机对于超大数据的一种模拟加，减，乘，除，乘方，阶乘，开方等运算。对于非常庞大的数字无法在计算机中正常存储，于是，将这个数字拆开，拆成一位一位的，或者是四位四位的存储到一个数组中， 用一个数组去表示一个字，这样这个数字就被称谓是高精度数。高精度算法就是能处理高精度数各种运算的算法。\n\n![蔡金林的博客之高精度算法](/assets/images/precision.png)\n\n在acmer眼里看来，大数字之间的运算一般都会用字符串的形式来处理，例如大数求阶乘，乘法，加法等。\n\n北电上一道关于高精度算法的算法题，题目链接[http://poj.org/problem?id=1001](http://poj.org/problem?id=1001)，用了一下午的时间开始搜集各方面code，发现大多数杂而乱，在绞尽脑汁后，自己动手写了个，终于一次性AC。\n源代码实现c++版：/*注释的代码是为了记录某些值，进行排错*/\n\n``` c++\t\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <stdio.h>;\nusing namespace std;\nstring add(string a, string b)//参与运算的两个数字串\n{\n\tint i,j,k,up,x,y,z;\n\tstring c;//存放相加结果的字符串\n\ti=a.length()-1;\n\tj=b.length()-1;\n\tup=0;//进位\n\twhile(i>=0||j>=0)\n\t{\n        if(i<0) x='0'; else x=a[i];\n        if(j<0) y='0'; else y=b[j];\n        z=x-'0'+y-'0';\n        if(up) z+=1;//上一位加法产生的进位\n        if(z>9)\n        {\n            up=1;\n            z%=10;\n        }\n        else\n        {\n            up=0;\n        }\n        c.push_back(z+'0');//压入字符串\n        i--;\n        j--;\n\t}\n\tif(up)//判断最高位产生的进位\n\t{\n\t     c.push_back('1');\n\t}\n\treverse(c.begin(),c.end());//字符串反转\n\treturn c;\n\n}\nstring multiple(string a, string b)  //计算两高精度数乘积\n{\n\tint i, j,k;\n\tstring result = \"0\";\n\tfor(i = a.length() - 1; i >= 0; i--)\n\t{\n\t    int remain = 0;\n\t    string str = \"\";\n\t    for(j = b.length() - 1; j >= 0; j--)\n\t    {\n\t        int tmp = (a[i] - '0') * (b[j] - '0') + remain;\n\t        remain = tmp / 10;\n\t        str = (char)(tmp % 10 + '0') + str;\n\t    }\n\t    if(remain != 0)\n\t    {\n\t        str = (char)(remain + '0') + str;\n\t    }\n\t    for(k=i;k&lt;a.length()-1;k++)\n\t    {\n\t        str=str+'0';\n\t    }\n\t   result=add(str,result);\n\t}\n\treturn result;\n}\nint main()\n{\n\tstring s1,s2;\n\tint i,n,pos,j=0;\n\tstring res=\"1\";\n\tstring::iterator its;\n\tchar ch1[81];\n\twhile(scanf(\"%s %d\",ch1,&amp;n)!=EOF)\n\t{\n\t    s1=ch1;\n\t    i=0;\n\t    pos=0;\n\t    for(its=s1.begin();its!=s1.end();its++)\n\t    {\n\t        if(*its=='.') //如果包含小数点，删除小数点，当作整数处理\n\t        {\n\t            pos=i;\n\t            s1.erase(its);\n\t            break;\n\t        }\n\t        i++;\n\t    }\n\t    /*\n\t    for(i=0;i<s1.size();i++)\n\t    {\n\t        cout<<s1[i];\n\t    }\n\t    cout<<endl;\n\t    */\n\t    for(i=1;i<=n;i++)//循环作乘法\n\t    {\n\t        res=multiple(s1,res);\n\t    }\n\t    if(pos!=0)//判断是否包含小数点\n\t    {\n\t          j=s1.size()-pos;//取得小数点后面数的个数\n\t          j=j*n;//输出时将要移动的小数点位数\n\t    }\n\t    /*\n\t    cout<<\"j:\"<<j<<endl;\n\t    cout<<\"res:\";\n\t    for(i=0;i<res.size();i++)\n\t    {\n\t         cout<<res[i];\n\t    }\n\t    cout<<endl;\n\t    */\n\t   string::iterator it=res.begin();\n\t   if(pos!=0)\n\t   {\n\t        res.insert(it+res.size()-j,'.');\n\t        it=res.begin();\n\t        if(res[0]=='0'&& res[1]=='.') //删除0.0001中的小树点前面的0\n\t        {\n\t            res.erase(it);\n\t        }\n\t        while(res[res.size()-1]=='0') //删除0.5000中小数点后面的0\n\t        {\n\t            it=res.begin()+res.size()-1;\n\t            res.erase(it);\n\t        }\n\t        if(res[res.size()-1]=='.')//如果为整数，去掉小数点\n\t        {\n\t            it=res.begin()+res.size()-1;\n\t            res.erase(it);\n\t        }\n\t   }\n\t    for(i=0;i<res.size();i++)//直接输出\n\t    {\n\t        printf(\"%c\",res[i]);\n\t    }\n\t    cout<<endl;\n\t    s1.clear();\n\t    res=\"1\";\n\t}\n}\n```","source":"_posts/高精度算法.md","raw":"---\ntitle: 高精度算法\ntags: []\ndate: 2014-06-18 08:00:00\n---\n\n### 高精度算法（包含精度计算乘法、精度计算加法等）\n\n高数精度算法，属于处理大数字的数学计算方法。在一般的科学计算中，会经常算到小数点后几百位或者更多，当然也可能是几千亿几百亿的大数字。一般这类数字我们统称为高精度数，高精度算法是用计算机对于超大数据的一种模拟加，减，乘，除，乘方，阶乘，开方等运算。对于非常庞大的数字无法在计算机中正常存储，于是，将这个数字拆开，拆成一位一位的，或者是四位四位的存储到一个数组中， 用一个数组去表示一个字，这样这个数字就被称谓是高精度数。高精度算法就是能处理高精度数各种运算的算法。\n\n![蔡金林的博客之高精度算法](/assets/images/precision.png)\n\n在acmer眼里看来，大数字之间的运算一般都会用字符串的形式来处理，例如大数求阶乘，乘法，加法等。\n\n北电上一道关于高精度算法的算法题，题目链接[http://poj.org/problem?id=1001](http://poj.org/problem?id=1001)，用了一下午的时间开始搜集各方面code，发现大多数杂而乱，在绞尽脑汁后，自己动手写了个，终于一次性AC。\n源代码实现c++版：/*注释的代码是为了记录某些值，进行排错*/\n\n``` c++\t\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <stdio.h>;\nusing namespace std;\nstring add(string a, string b)//参与运算的两个数字串\n{\n\tint i,j,k,up,x,y,z;\n\tstring c;//存放相加结果的字符串\n\ti=a.length()-1;\n\tj=b.length()-1;\n\tup=0;//进位\n\twhile(i>=0||j>=0)\n\t{\n        if(i<0) x='0'; else x=a[i];\n        if(j<0) y='0'; else y=b[j];\n        z=x-'0'+y-'0';\n        if(up) z+=1;//上一位加法产生的进位\n        if(z>9)\n        {\n            up=1;\n            z%=10;\n        }\n        else\n        {\n            up=0;\n        }\n        c.push_back(z+'0');//压入字符串\n        i--;\n        j--;\n\t}\n\tif(up)//判断最高位产生的进位\n\t{\n\t     c.push_back('1');\n\t}\n\treverse(c.begin(),c.end());//字符串反转\n\treturn c;\n\n}\nstring multiple(string a, string b)  //计算两高精度数乘积\n{\n\tint i, j,k;\n\tstring result = \"0\";\n\tfor(i = a.length() - 1; i >= 0; i--)\n\t{\n\t    int remain = 0;\n\t    string str = \"\";\n\t    for(j = b.length() - 1; j >= 0; j--)\n\t    {\n\t        int tmp = (a[i] - '0') * (b[j] - '0') + remain;\n\t        remain = tmp / 10;\n\t        str = (char)(tmp % 10 + '0') + str;\n\t    }\n\t    if(remain != 0)\n\t    {\n\t        str = (char)(remain + '0') + str;\n\t    }\n\t    for(k=i;k&lt;a.length()-1;k++)\n\t    {\n\t        str=str+'0';\n\t    }\n\t   result=add(str,result);\n\t}\n\treturn result;\n}\nint main()\n{\n\tstring s1,s2;\n\tint i,n,pos,j=0;\n\tstring res=\"1\";\n\tstring::iterator its;\n\tchar ch1[81];\n\twhile(scanf(\"%s %d\",ch1,&amp;n)!=EOF)\n\t{\n\t    s1=ch1;\n\t    i=0;\n\t    pos=0;\n\t    for(its=s1.begin();its!=s1.end();its++)\n\t    {\n\t        if(*its=='.') //如果包含小数点，删除小数点，当作整数处理\n\t        {\n\t            pos=i;\n\t            s1.erase(its);\n\t            break;\n\t        }\n\t        i++;\n\t    }\n\t    /*\n\t    for(i=0;i<s1.size();i++)\n\t    {\n\t        cout<<s1[i];\n\t    }\n\t    cout<<endl;\n\t    */\n\t    for(i=1;i<=n;i++)//循环作乘法\n\t    {\n\t        res=multiple(s1,res);\n\t    }\n\t    if(pos!=0)//判断是否包含小数点\n\t    {\n\t          j=s1.size()-pos;//取得小数点后面数的个数\n\t          j=j*n;//输出时将要移动的小数点位数\n\t    }\n\t    /*\n\t    cout<<\"j:\"<<j<<endl;\n\t    cout<<\"res:\";\n\t    for(i=0;i<res.size();i++)\n\t    {\n\t         cout<<res[i];\n\t    }\n\t    cout<<endl;\n\t    */\n\t   string::iterator it=res.begin();\n\t   if(pos!=0)\n\t   {\n\t        res.insert(it+res.size()-j,'.');\n\t        it=res.begin();\n\t        if(res[0]=='0'&& res[1]=='.') //删除0.0001中的小树点前面的0\n\t        {\n\t            res.erase(it);\n\t        }\n\t        while(res[res.size()-1]=='0') //删除0.5000中小数点后面的0\n\t        {\n\t            it=res.begin()+res.size()-1;\n\t            res.erase(it);\n\t        }\n\t        if(res[res.size()-1]=='.')//如果为整数，去掉小数点\n\t        {\n\t            it=res.begin()+res.size()-1;\n\t            res.erase(it);\n\t        }\n\t   }\n\t    for(i=0;i<res.size();i++)//直接输出\n\t    {\n\t        printf(\"%c\",res[i]);\n\t    }\n\t    cout<<endl;\n\t    s1.clear();\n\t    res=\"1\";\n\t}\n}\n```","slug":"高精度算法","published":1,"updated":"2017-08-26T15:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6u9wwug00282o5pmce44exd","content":"<h3 id=\"高精度算法（包含精度计算乘法、精度计算加法等）\"><a href=\"#高精度算法（包含精度计算乘法、精度计算加法等）\" class=\"headerlink\" title=\"高精度算法（包含精度计算乘法、精度计算加法等）\"></a>高精度算法（包含精度计算乘法、精度计算加法等）</h3><p>高数精度算法，属于处理大数字的数学计算方法。在一般的科学计算中，会经常算到小数点后几百位或者更多，当然也可能是几千亿几百亿的大数字。一般这类数字我们统称为高精度数，高精度算法是用计算机对于超大数据的一种模拟加，减，乘，除，乘方，阶乘，开方等运算。对于非常庞大的数字无法在计算机中正常存储，于是，将这个数字拆开，拆成一位一位的，或者是四位四位的存储到一个数组中， 用一个数组去表示一个字，这样这个数字就被称谓是高精度数。高精度算法就是能处理高精度数各种运算的算法。</p>\n<p><img src=\"/assets/images/precision.png\" alt=\"蔡金林的博客之高精度算法\"></p>\n<p>在acmer眼里看来，大数字之间的运算一般都会用字符串的形式来处理，例如大数求阶乘，乘法，加法等。</p>\n<p>北电上一道关于高精度算法的算法题，题目链接<a href=\"http://poj.org/problem?id=1001\" target=\"_blank\" rel=\"external\">http://poj.org/problem?id=1001</a>，用了一下午的时间开始搜集各方面code，发现大多数杂而乱，在绞尽脑汁后，自己动手写了个，终于一次性AC。<br>源代码实现c++版：/<em>注释的代码是为了记录某些值，进行排错</em>/</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"built_in\">string</span> a, <span class=\"built_in\">string</span> b)</span><span class=\"comment\">//参与运算的两个数字串</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i,j,k,up,x,y,z;</div><div class=\"line\">\t<span class=\"built_in\">string</span> c;<span class=\"comment\">//存放相加结果的字符串</span></div><div class=\"line\">\ti=a.length()<span class=\"number\">-1</span>;</div><div class=\"line\">\tj=b.length()<span class=\"number\">-1</span>;</div><div class=\"line\">\tup=<span class=\"number\">0</span>;<span class=\"comment\">//进位</span></div><div class=\"line\">\t<span class=\"keyword\">while</span>(i&gt;=<span class=\"number\">0</span>||j&gt;=<span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span>) x=<span class=\"string\">'0'</span>; <span class=\"keyword\">else</span> x=a[i];</div><div class=\"line\">        <span class=\"keyword\">if</span>(j&lt;<span class=\"number\">0</span>) y=<span class=\"string\">'0'</span>; <span class=\"keyword\">else</span> y=b[j];</div><div class=\"line\">        z=x-<span class=\"string\">'0'</span>+y-<span class=\"string\">'0'</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(up) z+=<span class=\"number\">1</span>;<span class=\"comment\">//上一位加法产生的进位</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(z&gt;<span class=\"number\">9</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            up=<span class=\"number\">1</span>;</div><div class=\"line\">            z%=<span class=\"number\">10</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            up=<span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        c.push_back(z+<span class=\"string\">'0'</span>);<span class=\"comment\">//压入字符串</span></div><div class=\"line\">        i--;</div><div class=\"line\">        j--;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(up)<span class=\"comment\">//判断最高位产生的进位</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t     c.push_back(<span class=\"string\">'1'</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treverse(c.begin(),c.end());<span class=\"comment\">//字符串反转</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> c;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">multiple</span><span class=\"params\">(<span class=\"built_in\">string</span> a, <span class=\"built_in\">string</span> b)</span>  <span class=\"comment\">//计算两高精度数乘积</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i, j,k;</div><div class=\"line\">\t<span class=\"built_in\">string</span> result = <span class=\"string\">\"0\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(i = a.length() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    <span class=\"keyword\">int</span> remain = <span class=\"number\">0</span>;</div><div class=\"line\">\t    <span class=\"built_in\">string</span> str = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t    <span class=\"keyword\">for</span>(j = b.length() - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)</div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t        <span class=\"keyword\">int</span> tmp = (a[i] - <span class=\"string\">'0'</span>) * (b[j] - <span class=\"string\">'0'</span>) + remain;</div><div class=\"line\">\t        remain = tmp / <span class=\"number\">10</span>;</div><div class=\"line\">\t        str = (<span class=\"keyword\">char</span>)(tmp % <span class=\"number\">10</span> + <span class=\"string\">'0'</span>) + str;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"keyword\">if</span>(remain != <span class=\"number\">0</span>)</div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t        str = (<span class=\"keyword\">char</span>)(remain + <span class=\"string\">'0'</span>) + str;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"keyword\">for</span>(k=i;k&amp;lt;a.length()<span class=\"number\">-1</span>;k++)</div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t        str=str+<span class=\"string\">'0'</span>;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t   result=add(str,result);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">string</span> s1,s2;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i,n,pos,j=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"built_in\">string</span> res=<span class=\"string\">\"1\"</span>;</div><div class=\"line\">\t<span class=\"built_in\">string</span>::iterator its;</div><div class=\"line\">\t<span class=\"keyword\">char</span> ch1[<span class=\"number\">81</span>];</div><div class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s %d\"</span>,ch1,&amp;amp;n)!=EOF)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    s1=ch1;</div><div class=\"line\">\t    i=<span class=\"number\">0</span>;</div><div class=\"line\">\t    pos=<span class=\"number\">0</span>;</div><div class=\"line\">\t    <span class=\"keyword\">for</span>(its=s1.begin();its!=s1.end();its++)</div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t        <span class=\"keyword\">if</span>(*its==<span class=\"string\">'.'</span>) <span class=\"comment\">//如果包含小数点，删除小数点，当作整数处理</span></div><div class=\"line\">\t        &#123;</div><div class=\"line\">\t            pos=i;</div><div class=\"line\">\t            s1.erase(its);</div><div class=\"line\">\t            <span class=\"keyword\">break</span>;</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        i++;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">\t    for(i=0;i&lt;s1.size();i++)</span></div><div class=\"line\"><span class=\"comment\">\t    &#123;</span></div><div class=\"line\"><span class=\"comment\">\t        cout&lt;&lt;s1[i];</span></div><div class=\"line\"><span class=\"comment\">\t    &#125;</span></div><div class=\"line\"><span class=\"comment\">\t    cout&lt;&lt;endl;</span></div><div class=\"line\"><span class=\"comment\">\t    */</span></div><div class=\"line\">\t    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"comment\">//循环作乘法</span></div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t        res=multiple(s1,res);</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"keyword\">if</span>(pos!=<span class=\"number\">0</span>)<span class=\"comment\">//判断是否包含小数点</span></div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t          j=s1.size()-pos;<span class=\"comment\">//取得小数点后面数的个数</span></div><div class=\"line\">\t          j=j*n;<span class=\"comment\">//输出时将要移动的小数点位数</span></div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">\t    cout&lt;&lt;\"j:\"&lt;&lt;j&lt;&lt;endl;</span></div><div class=\"line\"><span class=\"comment\">\t    cout&lt;&lt;\"res:\";</span></div><div class=\"line\"><span class=\"comment\">\t    for(i=0;i&lt;res.size();i++)</span></div><div class=\"line\"><span class=\"comment\">\t    &#123;</span></div><div class=\"line\"><span class=\"comment\">\t         cout&lt;&lt;res[i];</span></div><div class=\"line\"><span class=\"comment\">\t    &#125;</span></div><div class=\"line\"><span class=\"comment\">\t    cout&lt;&lt;endl;</span></div><div class=\"line\"><span class=\"comment\">\t    */</span></div><div class=\"line\">\t   <span class=\"built_in\">string</span>::iterator it=res.begin();</div><div class=\"line\">\t   <span class=\"keyword\">if</span>(pos!=<span class=\"number\">0</span>)</div><div class=\"line\">\t   &#123;</div><div class=\"line\">\t        res.insert(it+res.size()-j,<span class=\"string\">'.'</span>);</div><div class=\"line\">\t        it=res.begin();</div><div class=\"line\">\t        <span class=\"keyword\">if</span>(res[<span class=\"number\">0</span>]==<span class=\"string\">'0'</span>&amp;&amp; res[<span class=\"number\">1</span>]==<span class=\"string\">'.'</span>) <span class=\"comment\">//删除0.0001中的小树点前面的0</span></div><div class=\"line\">\t        &#123;</div><div class=\"line\">\t            res.erase(it);</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        <span class=\"keyword\">while</span>(res[res.size()<span class=\"number\">-1</span>]==<span class=\"string\">'0'</span>) <span class=\"comment\">//删除0.5000中小数点后面的0</span></div><div class=\"line\">\t        &#123;</div><div class=\"line\">\t            it=res.begin()+res.size()<span class=\"number\">-1</span>;</div><div class=\"line\">\t            res.erase(it);</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        <span class=\"keyword\">if</span>(res[res.size()<span class=\"number\">-1</span>]==<span class=\"string\">'.'</span>)<span class=\"comment\">//如果为整数，去掉小数点</span></div><div class=\"line\">\t        &#123;</div><div class=\"line\">\t            it=res.begin()+res.size()<span class=\"number\">-1</span>;</div><div class=\"line\">\t            res.erase(it);</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t   &#125;</div><div class=\"line\">\t    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;res.size();i++)<span class=\"comment\">//直接输出</span></div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>,res[i]);</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">\t    s1.clear();</div><div class=\"line\">\t    res=<span class=\"string\">\"1\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"高精度算法（包含精度计算乘法、精度计算加法等）\"><a href=\"#高精度算法（包含精度计算乘法、精度计算加法等）\" class=\"headerlink\" title=\"高精度算法（包含精度计算乘法、精度计算加法等）\"></a>高精度算法（包含精度计算乘法、精度计算加法等）</h3><p>高数精度算法，属于处理大数字的数学计算方法。在一般的科学计算中，会经常算到小数点后几百位或者更多，当然也可能是几千亿几百亿的大数字。一般这类数字我们统称为高精度数，高精度算法是用计算机对于超大数据的一种模拟加，减，乘，除，乘方，阶乘，开方等运算。对于非常庞大的数字无法在计算机中正常存储，于是，将这个数字拆开，拆成一位一位的，或者是四位四位的存储到一个数组中， 用一个数组去表示一个字，这样这个数字就被称谓是高精度数。高精度算法就是能处理高精度数各种运算的算法。</p>\n<p><img src=\"/assets/images/precision.png\" alt=\"蔡金林的博客之高精度算法\"></p>\n<p>在acmer眼里看来，大数字之间的运算一般都会用字符串的形式来处理，例如大数求阶乘，乘法，加法等。</p>\n<p>北电上一道关于高精度算法的算法题，题目链接<a href=\"http://poj.org/problem?id=1001\" target=\"_blank\" rel=\"external\">http://poj.org/problem?id=1001</a>，用了一下午的时间开始搜集各方面code，发现大多数杂而乱，在绞尽脑汁后，自己动手写了个，终于一次性AC。<br>源代码实现c++版：/<em>注释的代码是为了记录某些值，进行排错</em>/</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"built_in\">string</span> a, <span class=\"built_in\">string</span> b)</span><span class=\"comment\">//参与运算的两个数字串</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i,j,k,up,x,y,z;</div><div class=\"line\">\t<span class=\"built_in\">string</span> c;<span class=\"comment\">//存放相加结果的字符串</span></div><div class=\"line\">\ti=a.length()<span class=\"number\">-1</span>;</div><div class=\"line\">\tj=b.length()<span class=\"number\">-1</span>;</div><div class=\"line\">\tup=<span class=\"number\">0</span>;<span class=\"comment\">//进位</span></div><div class=\"line\">\t<span class=\"keyword\">while</span>(i&gt;=<span class=\"number\">0</span>||j&gt;=<span class=\"number\">0</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span>) x=<span class=\"string\">'0'</span>; <span class=\"keyword\">else</span> x=a[i];</div><div class=\"line\">        <span class=\"keyword\">if</span>(j&lt;<span class=\"number\">0</span>) y=<span class=\"string\">'0'</span>; <span class=\"keyword\">else</span> y=b[j];</div><div class=\"line\">        z=x-<span class=\"string\">'0'</span>+y-<span class=\"string\">'0'</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(up) z+=<span class=\"number\">1</span>;<span class=\"comment\">//上一位加法产生的进位</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(z&gt;<span class=\"number\">9</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            up=<span class=\"number\">1</span>;</div><div class=\"line\">            z%=<span class=\"number\">10</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            up=<span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        c.push_back(z+<span class=\"string\">'0'</span>);<span class=\"comment\">//压入字符串</span></div><div class=\"line\">        i--;</div><div class=\"line\">        j--;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(up)<span class=\"comment\">//判断最高位产生的进位</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t     c.push_back(<span class=\"string\">'1'</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treverse(c.begin(),c.end());<span class=\"comment\">//字符串反转</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> c;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">multiple</span><span class=\"params\">(<span class=\"built_in\">string</span> a, <span class=\"built_in\">string</span> b)</span>  <span class=\"comment\">//计算两高精度数乘积</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i, j,k;</div><div class=\"line\">\t<span class=\"built_in\">string</span> result = <span class=\"string\">\"0\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(i = a.length() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    <span class=\"keyword\">int</span> remain = <span class=\"number\">0</span>;</div><div class=\"line\">\t    <span class=\"built_in\">string</span> str = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t    <span class=\"keyword\">for</span>(j = b.length() - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)</div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t        <span class=\"keyword\">int</span> tmp = (a[i] - <span class=\"string\">'0'</span>) * (b[j] - <span class=\"string\">'0'</span>) + remain;</div><div class=\"line\">\t        remain = tmp / <span class=\"number\">10</span>;</div><div class=\"line\">\t        str = (<span class=\"keyword\">char</span>)(tmp % <span class=\"number\">10</span> + <span class=\"string\">'0'</span>) + str;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"keyword\">if</span>(remain != <span class=\"number\">0</span>)</div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t        str = (<span class=\"keyword\">char</span>)(remain + <span class=\"string\">'0'</span>) + str;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"keyword\">for</span>(k=i;k&amp;lt;a.length()<span class=\"number\">-1</span>;k++)</div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t        str=str+<span class=\"string\">'0'</span>;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t   result=add(str,result);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">string</span> s1,s2;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i,n,pos,j=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"built_in\">string</span> res=<span class=\"string\">\"1\"</span>;</div><div class=\"line\">\t<span class=\"built_in\">string</span>::iterator its;</div><div class=\"line\">\t<span class=\"keyword\">char</span> ch1[<span class=\"number\">81</span>];</div><div class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s %d\"</span>,ch1,&amp;amp;n)!=EOF)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t    s1=ch1;</div><div class=\"line\">\t    i=<span class=\"number\">0</span>;</div><div class=\"line\">\t    pos=<span class=\"number\">0</span>;</div><div class=\"line\">\t    <span class=\"keyword\">for</span>(its=s1.begin();its!=s1.end();its++)</div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t        <span class=\"keyword\">if</span>(*its==<span class=\"string\">'.'</span>) <span class=\"comment\">//如果包含小数点，删除小数点，当作整数处理</span></div><div class=\"line\">\t        &#123;</div><div class=\"line\">\t            pos=i;</div><div class=\"line\">\t            s1.erase(its);</div><div class=\"line\">\t            <span class=\"keyword\">break</span>;</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        i++;</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">\t    for(i=0;i&lt;s1.size();i++)</span></div><div class=\"line\"><span class=\"comment\">\t    &#123;</span></div><div class=\"line\"><span class=\"comment\">\t        cout&lt;&lt;s1[i];</span></div><div class=\"line\"><span class=\"comment\">\t    &#125;</span></div><div class=\"line\"><span class=\"comment\">\t    cout&lt;&lt;endl;</span></div><div class=\"line\"><span class=\"comment\">\t    */</span></div><div class=\"line\">\t    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"comment\">//循环作乘法</span></div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t        res=multiple(s1,res);</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"keyword\">if</span>(pos!=<span class=\"number\">0</span>)<span class=\"comment\">//判断是否包含小数点</span></div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t          j=s1.size()-pos;<span class=\"comment\">//取得小数点后面数的个数</span></div><div class=\"line\">\t          j=j*n;<span class=\"comment\">//输出时将要移动的小数点位数</span></div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">\t    cout&lt;&lt;\"j:\"&lt;&lt;j&lt;&lt;endl;</span></div><div class=\"line\"><span class=\"comment\">\t    cout&lt;&lt;\"res:\";</span></div><div class=\"line\"><span class=\"comment\">\t    for(i=0;i&lt;res.size();i++)</span></div><div class=\"line\"><span class=\"comment\">\t    &#123;</span></div><div class=\"line\"><span class=\"comment\">\t         cout&lt;&lt;res[i];</span></div><div class=\"line\"><span class=\"comment\">\t    &#125;</span></div><div class=\"line\"><span class=\"comment\">\t    cout&lt;&lt;endl;</span></div><div class=\"line\"><span class=\"comment\">\t    */</span></div><div class=\"line\">\t   <span class=\"built_in\">string</span>::iterator it=res.begin();</div><div class=\"line\">\t   <span class=\"keyword\">if</span>(pos!=<span class=\"number\">0</span>)</div><div class=\"line\">\t   &#123;</div><div class=\"line\">\t        res.insert(it+res.size()-j,<span class=\"string\">'.'</span>);</div><div class=\"line\">\t        it=res.begin();</div><div class=\"line\">\t        <span class=\"keyword\">if</span>(res[<span class=\"number\">0</span>]==<span class=\"string\">'0'</span>&amp;&amp; res[<span class=\"number\">1</span>]==<span class=\"string\">'.'</span>) <span class=\"comment\">//删除0.0001中的小树点前面的0</span></div><div class=\"line\">\t        &#123;</div><div class=\"line\">\t            res.erase(it);</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        <span class=\"keyword\">while</span>(res[res.size()<span class=\"number\">-1</span>]==<span class=\"string\">'0'</span>) <span class=\"comment\">//删除0.5000中小数点后面的0</span></div><div class=\"line\">\t        &#123;</div><div class=\"line\">\t            it=res.begin()+res.size()<span class=\"number\">-1</span>;</div><div class=\"line\">\t            res.erase(it);</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t        <span class=\"keyword\">if</span>(res[res.size()<span class=\"number\">-1</span>]==<span class=\"string\">'.'</span>)<span class=\"comment\">//如果为整数，去掉小数点</span></div><div class=\"line\">\t        &#123;</div><div class=\"line\">\t            it=res.begin()+res.size()<span class=\"number\">-1</span>;</div><div class=\"line\">\t            res.erase(it);</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t   &#125;</div><div class=\"line\">\t    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;res.size();i++)<span class=\"comment\">//直接输出</span></div><div class=\"line\">\t    &#123;</div><div class=\"line\">\t        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>,res[i]);</div><div class=\"line\">\t    &#125;</div><div class=\"line\">\t    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</div><div class=\"line\">\t    s1.clear();</div><div class=\"line\">\t    res=<span class=\"string\">\"1\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj6u9wwrd00092o5p8bwgmxzu","category_id":"cj6u9wwrg000b2o5puuhkctdk","_id":"cj6u9wwrv000k2o5pvcm1omsq"},{"post_id":"cj6u9wwro000d2o5p5bxlxmhs","category_id":"cj6u9wwrs000g2o5piokg2fi6","_id":"cj6u9wws2000p2o5pvxnw7wl8"},{"post_id":"cj6u9wws1000o2o5p3dwulal6","category_id":"cj6u9wwrs000g2o5piokg2fi6","_id":"cj6u9wws8000v2o5p8w3v3k25"},{"post_id":"cj6u9wws7000t2o5pa27m2hvt","category_id":"cj6u9wwrs000g2o5piokg2fi6","_id":"cj6u9wwsc00102o5pb7gaxvta"},{"post_id":"cj6u9wwsu001a2o5pw3ydfq4z","category_id":"cj6u9wwrs000g2o5piokg2fi6","_id":"cj6u9wwsy001e2o5p9qpdet74"},{"post_id":"cj6u9wwtj001q2o5po2xizl54","category_id":"cj6u9wwrg000b2o5puuhkctdk","_id":"cj6u9wwtq001u2o5pkocjj4hv"},{"post_id":"cj6u9wwue00272o5p9rblbpvz","category_id":"cj6u9wwrg000b2o5puuhkctdk","_id":"cj6u9wwui002a2o5pkhoh1874"}],"PostTag":[{"post_id":"cj6u9wwrd00092o5p8bwgmxzu","tag_id":"cj6u9wwro000c2o5p4zm0z1d1","_id":"cj6u9wwrt000i2o5pdgoo1auh"},{"post_id":"cj6u9wwro000d2o5p5bxlxmhs","tag_id":"cj6u9wwrs000h2o5p491wge67","_id":"cj6u9wws6000r2o5pmj01v5dn"},{"post_id":"cj6u9wwro000d2o5p5bxlxmhs","tag_id":"cj6u9wwrx000m2o5pe7gubglw","_id":"cj6u9wws8000u2o5pbc5l0mhh"},{"post_id":"cj6u9wws7000t2o5pa27m2hvt","tag_id":"cj6u9wwrx000m2o5pe7gubglw","_id":"cj6u9wwsa000x2o5p6yrbazqw"},{"post_id":"cj6u9wws1000o2o5p3dwulal6","tag_id":"cj6u9wws6000s2o5p9hi4jlht","_id":"cj6u9wwsg00142o5pmwqtgp2i"},{"post_id":"cj6u9wws1000o2o5p3dwulal6","tag_id":"cj6u9wwsb000z2o5p4180l3uv","_id":"cj6u9wwsj00162o5psmw5u13j"},{"post_id":"cj6u9wwsu001a2o5pw3ydfq4z","tag_id":"cj6u9wwsx001c2o5pbubux8xo","_id":"cj6u9wwt0001h2o5pl36ft6ua"},{"post_id":"cj6u9wwtj001q2o5po2xizl54","tag_id":"cj6u9wwro000c2o5p4zm0z1d1","_id":"cj6u9wwtn001s2o5pysouq9bl"},{"post_id":"cj6u9wwue00272o5p9rblbpvz","tag_id":"cj6u9wwro000c2o5p4zm0z1d1","_id":"cj6u9wwui00292o5pumviq9xu"}],"Tag":[{"name":"algorithm","_id":"cj6u9wwro000c2o5p4zm0z1d1"},{"name":"laravel","_id":"cj6u9wwrs000h2o5p491wge67"},{"name":"mysql","_id":"cj6u9wwrx000m2o5pe7gubglw"},{"name":"hexo","_id":"cj6u9wws6000s2o5p9hi4jlht"},{"name":"jekyll","_id":"cj6u9wwsb000z2o5p4180l3uv"},{"name":"php","_id":"cj6u9wwsx001c2o5pbubux8xo"}]}}